<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>区块链</title>
    <link href="/blog/2022/09/01/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    <url>/blog/2022/09/01/%E5%8C%BA%E5%9D%97%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>讨论：速度最慢的数据库、下一代价值互联网</p><h3 id="1、比特币中的密码学原理"><a href="#1、比特币中的密码学原理" class="headerlink" title="1、比特币中的密码学原理"></a>1、比特币中的密码学原理</h3><p>比特币又称加密货币，用到了密码学上的哈希和签名</p><h4 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h4><p>密码学上的哈希函数cryptographic hash function两个重要性质：</p><ul><li>collision resistance，两个不同的输入算出来的哈希值相等，称为哈希碰撞，哈希碰撞无法避免，这里是指没有高效的方法人为制造哈希碰撞。<ul><li>MD5曾经是很流行的哈希函数，但现在已经知道如何人为制造哈希碰撞了。</li></ul></li><li>hiding：哈希函数的计算过程是单向的，不可逆的。无法通过哈希值反推输入的内容，哈希值没有泄露输入的信息。</li><li>二者结合在一起，可以实现：digital commitment&#x2F;digital equivalent of a sealed envelope，但要注意，需要输入空间足够大、输入分布要尽量均匀。输入空间不够大时，可以给输入值后面拼接随机数再一起取hash，以保证输入随机且分布均匀。</li><li>比特币中用到的哈希函数还要求第三个性质：puzzle friendly。<ul><li>挖矿：寻找随机数nonce，拼接到block header，使得$H(\text {block header}) \le target$，需要大量的计算，挖矿很难、验证很容易（difficult to solve, but easy to verify）。</li></ul></li></ul><p>比特币中的哈希函数叫做<code>SHA-256</code>。</p><h4 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h4><p>开账户：在本地创立一个公钥和私钥的对（public key, private key)，这就代表了一个比特币的账户，公私钥的概念来自非对称的加密体系（asymmetric encryption algorithm）</p><ul><li>对称加密体系需要安全的网络环境，不能以明文形式在网络上传输，密钥的分发不是很方便。</li><li>非对称加密体系：加密用公钥、解密用私钥，公钥可以公开。</li></ul><p>比特币系统是不加密的，信息都是公开的，公私钥的作用主要就是签名， 发起交易时用自己的私钥签名，其他人用公钥验证，证明交易来自本人。</p><p>生成公私钥的过程要是随机的，比特币中每一次签名时也要有好的随机源，一次随机源不好就有可能泄露私钥。</p><h3 id="2、比特币的数据结构"><a href="#2、比特币的数据结构" class="headerlink" title="2、比特币的数据结构"></a>2、比特币的数据结构</h3><p>哈希指针（hash pointers）：存地址+hash值。（找到位置，检测是否有被篡改）</p><p><strong>区块链：</strong></p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.jpg" alt="区块链的数据结构"></p><p>取hash时，是将前一个区块的内容（包括保存的hash值）一起取hash，通过这个数据结构可以实现tamper-evident log：只要记住系统里保存的最后一个hash值，就可以检测出对区块链任何部位的修改。</p><p><strong>Merkle tree：</strong></p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(1).jpg" alt="merkle tree"></p><p>用hash指针代替了普通的指针。记住根hash值，就能检测出对数中任何节点的修改，效率更高。每个区块分为两部分：块头和块身。</p><ul><li>block header：仅存储这个区块所包含的所有交易组成的merkle tree组成的根hash值。</li><li>block body：有交易列表。</li></ul><p>Merkle tree的用途：</p><ul><li><p>提供merkle proof：从需验证的交易往上找到根节点，这个路径上的节点就是merkle proof，从下往上验证，沿途的这些hash值都是正确的就行了。</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/e65b588da577865af9a1ad6b7339f89.png" alt="merkle proof"></p></li><li><p>proof of membership&#x2F;proof of inclusion：$O(log(n))$</p></li><li><p>proof of non-membership：$O(n)$</p></li><li><p>Sorted merkle tree：对hash值排序</p></li></ul><blockquote><p>hash指针不适用于有环的情况，会出现数据相互依赖从而没有一个区块的数据能定下来。</p></blockquote><h3 id="3、比特币协议"><a href="#3、比特币协议" class="headerlink" title="3、比特币协议"></a>3、比特币协议</h3><p>使用公私钥发行货币：double spending attack</p><p>使用编号，每次使用货币向央行验证归属：央行超负荷（中心化方案）</p><p>将央行的职能改为由用户共同承担（去中心化方案）</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(3).jpg" alt="未命名文件 (3)"></p><p>比特币系统中每个交易都包含了输入和输出两个部分，输入部分要给出币的来源，输出部分要给出收款人公钥的hash。</p><p>付款人的公钥是付款人交易时给出，但可能为伪造，为了验证交易真实，使用付款人给出的公钥和币的来源时的公钥核对。（有借必有贷、借贷必相等）</p><ul><li><p>block header：保存宏观信息</p><ul><li>version 使用比特币哪个版本的协议</li><li>hash of previous block header 区块链中指向前一个区块的指针</li><li>Merkle root hash merkle tree的根hash值</li><li>target 挖矿的难度目标阈值</li><li>nonce 随机数</li></ul></li><li><p>block body：保存交易数据</p><ul><li>transaction list 交易列表</li></ul></li></ul><p>系统中的节点分为全节点(full node)和轻节点(light node)，全节点保存区块链的所有信息，验证每一个交易，也叫fully validating node，轻节点只保存block header，一般来说，轻节点无法独立验证交易的合法性。系统中大部分节点是轻节点，不参与区块链的构造和维护，只是利用区块链的信息做查询等。</p><p>账本的内容要取得分布式的共识 distributed consensus：系统里有很多台机器，共同维护一个全局的hash表（distributed hash table）。</p><p>分布式系统有很多不可能结论，例FLP impossibility result：在一个异步(asynchronous)的系统里(网络传输时延没有上限)，那么即使只有一个成员是有问题的(faulty)，那么也不可能取得共识。</p><p>CAP Theorem：一致性(Consistency)、可用性(Availability)、分区容错性(Partition tolerance)，这三个性质中最多只能满足两个，不可能三个都满足。</p><p>分布式共识的一个重要协议：Paxos(确保一致性)</p><p>比特币中的共识协议：有些节点可能是有恶意的，假设系统中大多数节点是好的。</p><ul><li><p>使用投票：需要先确定谁有投票权(membership)，例如联盟链(hyperledger fabric)，只有某些符合条件的大公司才可以加入，此时基于投票的方案是可行的。但比特币产生账户是很容易的，不需要批准，只有跟外部发生交易时才知道有这个账户存在，可能受到女巫攻击(sybil attack)。</p></li><li><p>比特币中的解决方案：用计算力来投票。</p><ul><li><p>每个节点都可以在本地组装出一个候选区块，把他认为合法的交易放在区块里，然后尝试各种nonce值(4 bytes)，看哪一个能满足不等式要求，求出hash落在指定范围内，如果某个节点找到了符合要求的nonce，就获得了记账权，也即往比特币这个去中心化的系统里写入下一个区块的权力，只有找到nonce，获得记账权的节点才有资格发布下一个区块。</p></li><li><p>其他节点收到这个区块后，要验证这个区块的合法性(验证block header的内容是否正确；目标阈值的编码——nBits域，检查nBits域是否符合比特币协议中规定的难度要求；检查nonce是否使$H(\text {block header}) \le target$成立)，假设都符合要求，然后看block body里的交易列表，验证每个交易都是合法的(要有合法的签名；以前没有被花过)，如果有任何一个不符合要求，那么这个区块是不能被接收的，要被放弃掉。</p></li><li><p>最长合法链 longest vaild chain：假设有一个区块经过检查，都是符合要求的，但如果不在最长链上，也有可能不被接收。比特币协议中规定：接受的区块应该是在扩展最长合法链。（分叉攻击的例子forking attack：通过往中间插入区块，来回滚已经发生了的交易）</p><ul><li>如果两个节点在差不多同一个时间找到了符合要求的nonce，都可以发布区块，这时候会出现两个等长的分叉，按最长合法链原则，这两个都是合法的。</li><li>比特币中，缺省情况下，每个节点是接收它最早收到的那个。</li><li>等长的临时性的分叉可能会维持一段时间，直到最后有某个区块是胜出的，也即沿着这个区块往下扩展，其他分支又被称为orphan block。</li></ul></li><li><p>获得记账权的节点本身有一定权利，可以决定哪些交易被写到下个区块里，但是设计协议时不应该让这个成为争夺记账权的主要动力，因为凡是合法的交易，都应该能被写到区块链里。</p><ul><li><p>出块奖励 block reward 比特币协议中规定，获得记账权的节点在发布的区块里，可以有一个特殊的交易，即铸币交易，在这个交易里可以发布一定数量的比特币。</p></li><li><p>coinbase transaction 是比特币系统中发行新比特币的唯一方法，其他所有的交易都只是把已有的比特币把一个账户转移到另一个账户，包括用法币购买比特币，也没有产生新的比特币。</p></li><li><p>比特币刚上线时，每一个发布的区块可以产生50BTC，21万个区块之后，这个出块奖励就要减半，即25BTC，再过21万个区块，再次减半，即12.5BTC。</p><blockquote><p>21万个区块平均是4年，每隔4年出块奖励减半。</p></blockquote></li></ul></li></ul></li></ul><p>以上即是比特币里的共识机制。</p><h3 id="4、比特币系统的实现"><a href="#4、比特币系统的实现" class="headerlink" title="4、比特币系统的实现"></a>4、比特币系统的实现</h3><p>比特币采取基于交易的账本模式 transaction-based ledger，每个区块里记录的是交易信息，有转账交易、有铸币交易，但是系统中没有显式的记录每个账户有多少钱，需要经过交易记录来推算。</p><p>比特币中的全节点要维护一个UTXO的数据结构(Unspent Transaction Output)——还没有被花出去的交易的输出组成的集合。一个交易可能有多个输出，Utxo中的每个元素要给出产生这个输出的交易的hash值，以及它在这个交易里是第几个输出。新发起的交易是否合法，要查询Utxo，只有在这个集合里才是合法的，维护Utxo以便快速检测double spending。</p><p>每个交易可以有多个输入，也可以有多个输出，所有输入的金额加起来要等于输出的金额。</p><blockquote><p> 有时可能不等，涉及到比特币系统的第二个激励机制：transaction fee</p></blockquote><p>以太坊采取基于账户的模式 account_based ledger，这个模式之中，系统要显式的记录每个账户上有多少个币。</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/e905bb6edc2ab35cd4c40a7b8616245.png" alt="e905bb6edc2ab35cd4c40a7b8616245"></p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/62f9439c6b117abb1d982f4a890709a.png" alt="62f9439c6b117abb1d982f4a890709a"></p><blockquote><p>求hash时只用到了block header的内容，block header里有merkle tree的根hash值，这已经能保证整个区块里的交易是不能被篡改的。</p></blockquote><h4 id="挖矿过程的概率分析"><a href="#挖矿过程的概率分析" class="headerlink" title="挖矿过程的概率分析"></a>挖矿过程的概率分析</h4><p>挖矿即不断尝试nonce，求解puzzle，每次尝试nonce可以看做是一个伯努利实验Bernoulli trial（a random experiment with binary outcome），大量尝试这个过程，构成了一个Bernoulli process（a sequence of independent Bernoulli trials），具有无记忆性（memoryless）。</p><p>每次尝试nonce，成功的可能性很小，需要尝试大量的nonce，才有可能找到符合要求的，这个情况下，Bernoulli process可以用Poisson process来近似（实验的次数很多，每次实验成功的概率很小）。</p><p>出块时间服从指数分布（exponential distribution），整个系统的平均出块时间是10min，这个平均时间是比特币协议设计出来的，通过定期调整挖矿难度，使得平均出块时间维持在10min左右，具体到每一个矿工，能挖到下一个区块的时间，取决于这个矿工的算力占系统总算力的百分比。出块时间的分布也是无记忆的，将来还要挖多少时间跟过去已经挖了多少时间是没有关系的，仍然服从指数分布，平均还是要10min，这个性质也成progress free（过去的progress是没有用的）。</p><blockquote><p>如果没有这个特点，算力强的矿工会有不成比例的优势，这恰恰是挖矿公平性的保证。</p></blockquote><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/1.png" alt="1"></p><h4 id="比特币的总量"><a href="#比特币的总量" class="headerlink" title="比特币的总量"></a>比特币的总量</h4><p>出块奖励是系统中产生新的比特币的唯一途径。而出块奖励每隔四年减半，这样产生的比特币数量就构成了一个几何序列（geometric series）：$21万<em>50+21万</em>25+21万<em>12.5+\dots &#x3D; 21万</em>50*(1+\frac 1 2+\frac 1 4+\dots ) &#x3D; 21万<em>50</em>2 &#x3D;210万$</p><p>比特币的puzzle除了比拼算力之外，没有其他的实际意义，比特币越来越难挖到是因为出块奖励被人为的减少了，比特币的稀缺性是人为造成的。</p><p>但是，挖矿的过程对于维护比特币系统的安全性是至关重要的：Bitcoin is secured by mining。对于一个去中心化的，没有membership控制的系统来说，挖矿提供了一种凭借算力投票的有效手段，只要大部分算力掌握在诚实的节点手里，比特币的安全性就能得到保证，挖矿这个过程虽然表面上看没有实际意义，但是这个机制的设立对于维护整个系统的安全性是非常有效的。</p><h4 id="比特币安全性分析"><a href="#比特币安全性分析" class="headerlink" title="比特币安全性分析"></a>比特币安全性分析</h4><p>假设大部分算力掌握在诚实的矿工手里，是否能保证写入区块链的交易都是合法的？</p><ul><li><p>恶意节点伪造交易：没有对方的私钥无法签名。</p></li><li><p>定义有恶意的攻击是否成功的标准，是看他能不能让诚实的节点接受这个交易，如果仅是恶意节点之间互相认账，诚实节点都不认账，那是没有用的，因为比特币是扩展最长合法链，恶意的区块相当于作废，这对于攻击者来说会损失出块奖励。（&#x3D;&#x3D;这里老师讲的是恶意节点多长都没有用，可如果这个节点本来是诚实的，他后面延伸了很多节点，后来它变成恶意的了，这条链不再扩展，那么它后面的诚实链会受到影响吗？&#x3D;&#x3D;）</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(0).jpg" alt="未命名文件 (0)"></p></li><li><p>能否把已经花出去的币再花一遍？</p></li><li><p>区块插在哪个位置，是要在刚开始挖矿时就要决定的，因为设置的block header里要填前一个区块的hash，如果想插在某个节点之后，一开始就要把该节点设置为前一个区块，而不是等获得了记账权之后再说。防范双花攻击的办法是多等几个区块&#x2F;确认，比特币协议中缺省要等六个confirmation，此时才认为前面一个交易是不可篡改的，平均出块时间10min，这个过程要等一个小时。</p></li></ul><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/4.jpg" alt="4"></p><ul><li><p>零确认 zero confirmation：这个转账交易发布出去，但还没有被写入区块链。比特币中缺省的设置是节点接收最先听到的交易；实际交易天然有时间间隔。</p></li><li><p>恶意节点是否能故意不把合法的交易写在区块链？</p></li><li><p>可以，但合法的交易可以写在下一个区块里，总有诚实的节点愿意发布这些交易，比特币协议规定，区块的大小有限制，最多不能超过1M字节，所以如果交易太多，有些交易就只能等到下一个区块再发布。</p></li><li><p>是否可以隐藏算好的区块，等到交易目标达成再同时发布，以超越已形成的区块&#x2F;confirmation，成为最长链？（selfish mining）</p></li><li><p>正常的情况是挖到区块马上发布，以免被其他人挖到损失奖励，这个攻击成功的前提是需要占到很大的算力。（不可能越级挖，因为每个块需要前一个块的hash，前面一个区块没挖出来，没办法提前准备好）</p><blockquote><p>selfish mining 的另一个目的：减少竞争。</p><p>藏一个块，用两个块竞争，但也有风险，还是拼算力。</p></blockquote></li></ul><h3 id="5、比特币网络"><a href="#5、比特币网络" class="headerlink" title="5、比特币网络"></a>5、比特币网络</h3><p>用户把交易发布到比特币网络上，节点收到这些交易把他们打包到区块里，然后把区块发布到比特币网络上，这些新发布的交易和区块在比特币网络上如何传播？</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/5.jpg" alt="5"></p><p>比特币网络的设计原则：简单、鲁棒而非高效。</p><p>消息以flooding的方式传播：节点第一次收到消息时，将它传播给其他邻居节点，同时记录已收到这个消息，下次再收到这个消息，就不再转发给邻居节点，邻居节点的选取是随机的，不考虑底层的拓扑结构，鲁棒性很强，但牺牲了效率。</p><p>比特币系统中每个节点要维护一个等待上链交易的集合，第一次听到某个交易时，把这个交易写入集合，并且转发这个交易，再收到这个交易就不转发，转发的前提是交易合法（有合法的签名，以前没有被花过）。</p><p>集合中的交易一旦写入区块链，就要从集合中删掉，如果因为某个区块链里的交易导致集合里出现了非法交易，也要删除非法交易。</p><blockquote><p>risk condition：有两个有冲突的交易，差不多同时被广播到网络上，那么每个节点因为在网络上的位置不同，先收到的交易不同。</p></blockquote><p>新发布的区块在网络上的传播方式跟新发布的交易是类似的，每个节点除了检查区块的内容的合法性，还要检查它是否在最长合法链上，越是大的区块在网络上的传播速度就越慢。</p><p>best effort：一个交易发布到比特币网络上，不一定所有的节点都能收到，而且不同的节点收到交易的顺序也可能是不一样的，网络传播存在延迟，且有的节点不一定按照比特币协议的要求进行转发，也有的节点可能转发不合法的交易，这是一个去中心化的系统中面临的实际问题。</p><h3 id="6、比特币的挖矿难度调整"><a href="#6、比特币的挖矿难度调整" class="headerlink" title="6、比特币的挖矿难度调整"></a>6、比特币的挖矿难度调整</h3><p>挖矿：不断尝试block header里的nonce值，使整个block header的哈希值小于等于给定的目标阈值。即$H(\text{block header}) \le target$。$target$越小，挖矿难度越大，调整挖矿难度就是调整目标空间在整个输出空间中所占的比例。</p><p>比特币用的哈希算法是SHA-256，产生的哈希值是256位，所以整个输出空间是$2^{256}$个可能的取值，调整这个比例就是哈希值前面有多少个0（不准确）。</p><p>出块时间太短会出现的问题：</p><ul><li>分叉会成为常态，分叉过多，对于不利于系统达成共识，也危害系统安全（比特币协议假设大部分算力掌握在诚实的矿工手里，系统的总算力越强，安全性越好）。恶意节点可以集中算力扩展成最长合法链。</li></ul><p>比特币协议中规定：每隔2016个区块，要重新调整目标阈值，大概是每两个星期调整一下（$\frac {2016<em>10} {60</em>24} &#x3D; 14天$）。具体调整方式为$target &#x3D; target * \frac {\text{actual time}} {\text{experted time}}$，目标阈值增大最多增大4倍，不会超过4倍；目标阈值缩小最多缩小$\frac 1 4$，不会超过$\frac 1 4$。</p><p>计算$target$的方法是写在比特币系统的代码里，每挖到2016个区块会自动进行调整，代码开源，如果$target$被恶意修改，诚实的矿工不会承认。</p><ul><li>nBits域：$target$编码的版本，在block header里没有直接存储$target$，因为需要256位&#x2F;32个字节，而nBits只有4个字节，可以认为是一个压缩编码，如果没有按规则调整$target$，检查区块合法性就无法通过，因为每个节点要独立验证发布的区块的合法性。</li></ul><h3 id="7、比特币挖矿"><a href="#7、比特币挖矿" class="headerlink" title="7、比特币挖矿"></a>7、比特币挖矿</h3><p>全节点</p><ul><li>一直在线</li><li>在本地硬盘上维护完整的区块链信息</li><li>在内存里维护UTXO集合，以便快速检验交易的正确性</li><li>监听比特币网络上的交易信息，验证每个交易的合法性</li><li>决定哪些交易会被打包到区块里</li><li>监听别的矿工挖出来的区块，验证其合法性</li><li>挖矿<ul><li>决定验证哪条链挖下去</li><li>当出现等长的分叉的时候，选择哪一个分叉</li></ul></li></ul><p>轻节点</p><ul><li>不是一直在线</li><li>不用保存整个区块链，只要保存每个区块的块头（1000倍）</li><li>不用保存全部交易，只保存与自己相关的交易</li><li>无法校验大多数交易的合法性，只能校验与自己相关的那些交易的合法性</li><li>无法检测网上发布的区块的正确性</li><li>可以验证挖矿的难度</li><li>只能检测哪个是最长链，不知道哪个是最长合法链</li></ul><p>比特币怎么保证安全性</p><ul><li>密码学上的保证：没有私钥，就无法伪造签名，不能将他人账上的前转走，前提是，系统中拥有大多数算力的矿工是好的，是遵守协议的，不会接受那些没有合法签名的交易，如果没有这一点，密码学上的保证就没有用武之地。</li><li>共识机制</li></ul><p>挖矿设备</p><ul><li><p>趋于专业化：CPU挖矿（通用计算机、笔记本电脑）→ GPU挖矿（主要用于大规模的并行计算，例如深度学习，大量的矩阵乘法） → ASIC芯片（application specific integrated circulation）</p></li><li><p>大型矿池的出现：单个矿工即使用了ASIC芯片，挖矿从平均收益上看是有利可图的，但是收益是非常不稳定的，除了挖矿外，单个矿工还要承担全节点的其他责任。矿池就是把矿工组织起来成为一个整体，矿石的架构是一个全节点会驱动很多矿机。</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/6.jpg" alt="6"></p><p>矿工只负责计算哈希值，全节点的其他职责都由pool manager来承担（监听网上的交易、把交易组织打包成候选区块、是否有其他节点抢先发布区块，有的话要进行调整）。</p><p>矿池的出现解决了收入不稳定的问题，收入分配时，矿主以矿工提交的较简单的almost valid block作为share的数量为依据进行分配。</p><p>是否会出现矿工挖到矿后不提交给矿池，自己独占奖励？</p><ul><li>不可行，每个矿工的任务是有矿主分配的，矿主负责组装好区块，然后交给矿工尝试nonce，光是调整nonce是不够的，还要调整coinbase，矿主可能把不同的coinbase对应的nonce值的范围交给不同的矿工尝试，coinbase transaction的地址填的是矿主的地址，所以矿工挖到区块后不提交给矿主，自己提交是无用的。</li></ul><p>大型矿池的一个弊病：51%的攻击更容易了（分叉攻击、双花攻击、Boycott封锁某个账户）。类似云计算里的on demand computing，此处为on demand mining，矿石带来的潜在危害。</p></li></ul><h3 id="8、比特币脚本"><a href="#8、比特币脚本" class="headerlink" title="8、比特币脚本"></a>8、比特币脚本</h3><p>唯一能访问的内存空间就是堆栈，所以是基于栈的语言。</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/fb118d0f3f3f69f20c421b3b978ce13.jpg" alt="fb118d0f3f3f69f20c421b3b978ce13"></p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/a44e90b2b47b4759d5d81b91b166c8f.jpg" alt="a44e90b2b47b4759d5d81b91b166c8f"></p><blockquote><p>每个输入都要说明这个输入的币来自之前哪个交易的输出，前两行给出输入的币的来源，第三项是输入脚本，给出signature证明有权力花这个钱。</p></blockquote><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/2175087397b6f48030dd2daf87dc210.jpg" alt="2175087397b6f48030dd2daf87dc210"></p><blockquote><p>scriptPublicKey是输出脚本，asm是输出脚本内容，包含一系列操作，reqSigs表示这个输出需要多少个签名才能兑现，type是输出的类型，这里表示公钥的哈希，addresses是输出的地址。</p></blockquote><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/df1c2ac503eaaa4ca31f23169e91964.jpg" alt="df1c2ac503eaaa4ca31f23169e91964"></p><blockquote><p>输出脚本要与输入脚本匹配</p></blockquote><p>输入输出脚本的形式</p><ul><li><p>P2PK(Pay to Public Key)</p><ul><li><p>input script</p><ul><li>PUSHDATA(Sig)</li></ul></li><li><p>output script</p><ul><li>PUSHDATA(PubKey)&#x2F;&#x2F;输出脚本里直接给出收款人的公钥。</li><li>CHECKSIG&#x2F;&#x2F;检查签名，在输入脚本里直接检查签名，签名是用私钥对输入脚本所在的整个交易的签名，是最简单的。</li></ul></li><li><p>实例：</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/9f2bc3262d66508b9926191b78f1d49.jpg" alt="9f2bc3262d66508b9926191b78f1d49"></p></li></ul></li><li><p>P2PKH(Pay to Public Key Hash)</p><ul><li><p>input script</p><ul><li>PUSHDATA(Sig)&#x2F;&#x2F;把签名压入栈</li><li>PUSHDATA(Public)&#x2F;&#x2F;把公钥压入栈</li></ul></li><li><p>output script</p><ul><li>DUP&#x2F;&#x2F;把栈顶元素复制一遍(栈顶为两个公钥)</li><li>HASH160&#x2F;&#x2F;把栈顶元素弹出来，取哈希，然后把得到的哈希值压入栈(栈顶为公钥的哈希值)(输入脚本里给出的公钥)</li><li>PUSHDATA(PubKeyHash)&#x2F;&#x2F;把输出脚本里提供的公钥的哈希值压入栈(收款人的公钥的哈希)</li><li>EQUALVERIFY&#x2F;&#x2F;弹出栈顶两个元素是否相等，防止冒名顶替</li><li>CHECKSIG&#x2F;&#x2F;弹出栈顶的两个元素，用公钥检查签名</li></ul></li><li><p>实例</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/0223bb1d47a9820801fef7d25ca796d.jpg" alt="0223bb1d47a9820801fef7d25ca796d"></p></li></ul></li><li><p>P2SH(Pay to Script Hash)</p><ul><li><p>采用BIP16的方案</p></li><li><p>input script</p><ul><li><p>……</p></li><li><p>PUSHDATA(Sig)</p></li><li><p>……</p></li><li><p>PUSHDATA(serialized redeemScript)</p></li></ul></li><li><p>output script</p><ul><li>HASH160</li><li>PUSHDATA(redeemScriptHash)(赎回脚本)</li><li>EQUAL</li></ul></li><li><p>input script要给出一些签名（数目不定）及一段序列化的redeemScript，验证分为如下两步：</p><ul><li>验证序列化的redeemScript是否与output script中的哈希值匹配</li><li>反序列化并执行redeemScript，验证input script中给出的签名是否正确</li></ul></li><li><p>redeemScript的形式</p><ul><li>P2PK形式</li><li>P2PKH形式</li><li>多重签名形式</li></ul></li><li><p>例：用P2SH实现P2PK</p><ul><li>redeemScript<ul><li>PUSHDATA(PubKey)</li><li>CHECKSIG</li></ul></li><li>input script<ul><li>PUSHDATA(Sig)</li><li>PUSHDATA(serialized redeemScript)</li></ul></li><li>output script<ul><li>HASH160</li><li>PUSHDATA(redeemScriptHash)</li><li>EQUAL</li></ul></li></ul></li><li><p>P2SH的一个常见场景是对多重签名的支持</p><ul><li><p>比特币系统中一个输出可能性需要多个签名才能把钱取出来</p></li><li><p>最早的多重签名，目前已不推荐使用</p><ul><li>input script<ul><li>X&#x2F;&#x2F;需要多压一个没用的元素，已对应CHECKMULITISIG的bug</li><li>PUSHDATA(Sig_1)</li><li>PUSHDATA(Sig_2)</li><li>……</li><li>PUSHDATA(Sig_M)</li></ul></li><li>outputScript<ul><li>M</li><li>PUSHDATA(pubkey_1)</li><li>PUSHDATA(pubkey_2)</li><li>……</li><li>PUSHDATA(pubkey_N)</li><li>N</li><li>CHECKMULTISIG</li></ul></li></ul></li><li><p>用P2SH实现多重签名</p><ul><li>把输出脚本的复杂度转移到输入脚本</li><li>redeemScript<ul><li>M</li><li>PUSHDATA(pubkey_1)</li><li>PUSHDATA(pubkey_2)</li><li>……</li><li>PUSHDATA(pubkey_N)</li><li>N</li><li>CHECKMULTISIG</li></ul></li><li>input script<ul><li>X</li><li>PUSHDATA(Sig_1)</li><li>PUSHDATA(Sig_2)</li><li>……</li><li>PUSHDATA(Sig_M)</li><li>PUSHDATA(serialized RedeemScript)</li></ul></li><li>output script<ul><li>HASH160</li><li>PUSHDATA(RedeemScriptHash)</li><li>EQUAL</li></ul></li></ul></li><li><p>实例</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/3694329da6ab2de67074e3d6382151d.jpg" alt="3694329da6ab2de67074e3d6382151d"></p></li></ul></li></ul></li><li><p>Proof of Burn</p><ul><li><p>output script</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs script">RETURN //无条件返回错误，包含这个操作的脚本永远不可能通过验证<br>[zero or more ops or test]<br></code></pre></td></tr></table></figure><p>这种形式的output被称为：Provably Unspendable&#x2F;Prunable Outputs</p></li><li><p>脚本说明</p><p>假如有一个交易的input指向这个output，无论input里的input script如何设计，执行到RETURN命令之后都会直接但会false，不会执行RETURN后面的其他指令，所以这个output无法再被花出去，其对应的UTXO也就可以被剪枝了，无需保存。</p><p>应用场景：</p><ul><li><p>这个脚本是证明销毁比特币的一种方法，有些小币种要求销毁一定数量的比特币才能得到这个币种（AltCoin）。</p></li><li><p>在区块链里添加需要永久保存的内容，如digital commitment，把某项知识产权的内容取hash后，把hash值放在RETURN语句的后面，不会占很大的内容，也不会泄露知识产权的内容，应对知识产权的纠纷。</p><blockquote><p>coinbase域里也可以随意写内容，且不用销毁比特币，但只有获得记账权的节点才能用。</p></blockquote></li></ul></li></ul></li></ul><blockquote><p>注：简单起见，所有的操作都省略了OP_前缀，例：OP_CHECKSIG、OP_DUP</p><p>比特币的脚本语言不支持循环，就不会有死循环</p></blockquote><h3 id="9、比特币分叉"><a href="#9、比特币分叉" class="headerlink" title="9、比特币分叉"></a>9、比特币分叉</h3><p>分叉的原因：两个节点差不多同时挖到矿，会出现临时性的分叉（state fork）；分叉攻击（forKing attack&#x2F;deliberate fork）；比特币的协议发生了改变，去中心化的系统中升级软件没办法保证所有节点都升级（protocal fork），根据对协议修改的内容的不同，又可分为硬分叉（hard fork）和软分叉（soft fork）。</p><p>硬分叉：对比特币协议增加一些新的特性，这时候没有升级软件的旧的节点不认可这些特性，认为这些特性非法。一个例子是比特币协议中的区块大小限制（block size limit），某些新节点改为了4M，旧节点依然是1M，只要旧节点不更新软件，这个分叉就不会消失。出现hard fork后变成了两条平行的链，彼此之间有各自的加密货币（社区分裂），分叉前的链理论上分叉后的链都会认，但会出现问题，后来分裂的链会带一条chain Id。</p><blockquote><p>目前区块大小限制</p><p>$\frac {1000000} {250} &#x3D; 4000$   $\frac {4000} {60*10} &#x3D; 7 tx&#x2F;s$</p></blockquote><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/7.jpg" alt="7"></p><p>软分叉：对比特币协议加一些限制，原来合法的交易&#x2F;区块，在新的协议中可能变得不合法。例某些新节点将区块大小限制改为了0.5M，旧节点依然是1M，因为新旧节点都认可的是0.5M的分叉，所以之后所有节点都会在0.5M的链上扩展，迫使其更新协议，系统不会有永久性的分叉。</p><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6%20(4).jpg" alt="未命名文件 (4)"></p><p>实际可能出现软分叉的情况：给某些目前协议中没有规定的域增加一些新的含义，赋予新的规则，例coinbase域，有时会把coinbase域的前八个字节也作为extra nonce，使搜索空间从$2^{32}$变成$2^{96}$，作为挖矿难度，剩下的字节如何用？有人提出作为UTXO的根哈希值。</p><p>比特币历史上一个比较著名的软分叉的例子是P2SH(Pay to Script Hash)，这个功能在最初的比特币版本上是没有的，是通过软分叉的方法加进去的。</p><h3 id="10、问答"><a href="#10、问答" class="headerlink" title="10、问答"></a>10、问答</h3><h5 id="Q1：转账交易时，接收者不在线怎么办"><a href="#Q1：转账交易时，接收者不在线怎么办" class="headerlink" title="Q1：转账交易时，接收者不在线怎么办"></a>Q1：转账交易时，接收者不在线怎么办</h5><p>不需要接收者在线，转账交易只是在区块链上记录把自己账户上的比特币转过去，是不是当时连在比特币网络是没关系的。</p><h5 id="Q2：假设某个全节点收到了某个转账交易，有没有可能转账交易中接收者的收款地址是这个节点以前从来没有听说过的"><a href="#Q2：假设某个全节点收到了某个转账交易，有没有可能转账交易中接收者的收款地址是这个节点以前从来没有听说过的" class="headerlink" title="Q2：假设某个全节点收到了某个转账交易，有没有可能转账交易中接收者的收款地址是这个节点以前从来没有听说过的"></a>Q2：假设某个全节点收到了某个转账交易，有没有可能转账交易中接收者的收款地址是这个节点以前从来没有听说过的</h5><p>可能的，比特币账户在创建的时候是不需要通知其他人的，在本地产生公私钥对就可以了，只有在以后产生收款地址，第一次收到钱，其他节点才知道这个账户的存在。</p><h5 id="Q3：账户的私钥丢失了怎么办"><a href="#Q3：账户的私钥丢失了怎么办" class="headerlink" title="Q3：账户的私钥丢失了怎么办"></a>Q3：账户的私钥丢失了怎么办</h5><p>账户上的钱变成了死钱，永远取不出来，但是有些加密货币的交易所是中心化的机构，在交易所开办账户一般来说是需要提供身份证明的，这种情况下，把比特币放在交易所，私钥是交易所保管的，登录交易所类似登录银行，这种情况下丢失了密码可以跟交易所练习，通过身份验证重置密码（不是密钥），有些在线钱包也有保管私钥的功能（Mt.Gox）。</p><h5 id="Q4：私钥泄露了怎么办"><a href="#Q4：私钥泄露了怎么办" class="headerlink" title="Q4：私钥泄露了怎么办"></a>Q4：私钥泄露了怎么办</h5><p>尽快把账户上的钱转移到另一个安全账户上。</p><h5 id="Q5：转账时写错了地址怎么办"><a href="#Q5：转账时写错了地址怎么办" class="headerlink" title="Q5：转账时写错了地址怎么办"></a>Q5：转账时写错了地址怎么办</h5><p>没有办法取消已经发布的交易，转到别人的地址或者不存在的地址都无法拿回比特币，如果转到不存在的地址，全节点会永久的把这个地址保存在UTXO里，这对全节点是不友好的。</p><h5 id="Q6：OP-RETURN是无条件返回错误，为什么能写在区块链里"><a href="#Q6：OP-RETURN是无条件返回错误，为什么能写在区块链里" class="headerlink" title="Q6：OP_RETURN是无条件返回错误，为什么能写在区块链里"></a>Q6：OP_RETURN是无条件返回错误，为什么能写在区块链里</h5><p>进行验证时，是当前交易的输入脚本和币的来源的输出脚本拼在一起看能不能顺利执行，这个执行过程是不可以发生错误的，如果抛出错误就不是合法交易，但OP_RETURN是写在当前交易的输出脚本，所以验证当前交易合法性时，不会执行这个语句。有人想花这笔钱时才会执行到这个交易的输出脚本。</p><p>&#x3D;&#x3D;那么这个输出脚本与下一个输入脚本拼和时会验证不通过吗&#x3D;&#x3D;</p><h5 id="Q7：会不会有的矿工偷答案，把其他矿工找到的nonce当成自己的nonce发布出去（怎么知道是哪个矿工最先找到nonce）"><a href="#Q7：会不会有的矿工偷答案，把其他矿工找到的nonce当成自己的nonce发布出去（怎么知道是哪个矿工最先找到nonce）" class="headerlink" title="Q7：会不会有的矿工偷答案，把其他矿工找到的nonce当成自己的nonce发布出去（怎么知道是哪个矿工最先找到nonce）"></a>Q7：会不会有的矿工偷答案，把其他矿工找到的nonce当成自己的nonce发布出去（怎么知道是哪个矿工最先找到nonce）</h5><p>发布的区块里有coinbase transaction，里面有收款人地址，是挖到矿的矿工的地址，偷答案要把这个地址换成自己的地址，一旦换掉，coinbase transaction的内容就发生了改变，这样会导致这个merkle tree的根hash会变化，会导致block header的内容发生变化，原来找到的nonce就作废了，所以不可能偷答案。</p><h5 id="Q8：事先怎么知道交易费要给哪个矿工"><a href="#Q8：事先怎么知道交易费要给哪个矿工" class="headerlink" title="Q8：事先怎么知道交易费要给哪个矿工"></a>Q8：事先怎么知道交易费要给哪个矿工</h5><p>事先不需要知道哪个矿工会得到交易费，交易费的计算是<code>total inputs - total outputs</code>，矿工挖到矿后，可以把区块里包含的交易的差额都收集起来，作为自己的交易费。</p><h3 id="11、比特币的匿名性"><a href="#11、比特币的匿名性" class="headerlink" title="11、比特币的匿名性"></a>11、比特币的匿名性</h3><p>有可能破坏比特币匿名性：</p><ul><li>地址账户可能被关联</li><li>比特币跟实体世界发生联系时，可能泄露真实身份</li><li>用比特币做支付</li></ul><p>网络层的匿名性：TOR（多路径转发&#x2F;洋葱路由）</p><p>应用层的匿名性：coin mixing（交易所、在线钱包）</p><p>不可篡改性对隐私保护是灾难性的</p><h4 id="零知识证明"><a href="#零知识证明" class="headerlink" title="零知识证明"></a>零知识证明</h4><p>概念：一方（证明者）向另一方（验证者）证明一个陈述是正确的，而无需透露除该陈述是争取的外的任何信息。</p><p>数学基础：同态隐藏</p><ul><li>如果x,y不同，那么它们的加密函数值E(x)和E(y)也不相同（应不会出现碰撞）</li><li>给定E(x)的值，很难反推出x的值</li><li>给定E(x)和E(y)的值，我们可以很容易地计算出某些关于x,y的加密函数值<ul><li>同态加法：通过E(x)和E(y)计算出E(x+y)的值</li><li>同态乘法：通过E(x)和E(y)计算出E(xy)的值</li><li>扩展到多项式</li></ul></li></ul><p>例子：Alice想要向Bob证明他知道一组数使得x+y&#x3D;7，同时不让Bob知道x和y的具体数值</p><ul><li><p>简单的版本</p><ul><li><p>Alice把E(x)和E(y)的数值发给Bob</p></li><li><p>Bob通过收到的E(x)和E(y)计算出E(x+y)的值</p></li><li><p>Bob同时计算E(7)的值，如果E(x+y) &#x3D; E(7)，那么验证通过，否则验证失败</p><blockquote><p>虽然Bob无法从E(x)知道x的值，但是可以遍历x的各种取值，所以在复杂场景下，Alice将值给Bob之前，要做一些随机化处理，但要保证x+y依然不变。</p></blockquote></li></ul></li></ul><p>盲签</p><ul><li>用户A提供SerialNum，银行在不知道SerialNum的情况下返回签名Token，减少A的存款</li><li>用户A把SerialNum和Token交给B完成交易</li><li>用户B拿SerialNum和Token给银行验证，银行验证通过，增加B的存款</li><li>银行无法把A和B联系起来</li><li>中心化</li></ul><p>零币和零钞</p><ul><li>零币和零钞在协议层就融合了匿名化处理，其匿名属性来自密码保证</li><li>零币(zerocoin)系统中存在基础币和零币，通过基础币和零币的来回转换，消除旧地址和新地址的关联性，其原理类似于混币服务</li><li>零钞(zerocash)系统使用zk-SNARKs协议，不依赖一种基础币，区块链中只记录交易的存在性和矿工用来验证系统正常运行所需要关键属性的证明。区块链上既不显示交易地址也不显示交易金额，所有交易通过零知识验证的方式进行</li></ul><h3 id="12、比特币引发的思考"><a href="#12、比特币引发的思考" class="headerlink" title="12、比特币引发的思考"></a>12、比特币引发的思考</h3><p><strong>Q1：指针保存的是本地内存的地址，只是在本地计算机上才有意义，在其他计算机上就没有意义了，那么在发送区块的时候，哈希指针是怎么通过网络传输</strong></p><p>哈希指针只是一种形象的说法，实际用的时候只有哈希没有指针，全节点一般是把这些区块存储在(key,value)数据库里，key是区块的哈希，value是区块的内容，一个常用的(key,value)数据库是level DB，区块链这种链表结构实际上是在level DB里面用哈希指针串起来的，只要掌握了最后一个区块的哈希指针，就可以通过level DB来查找key对应的value就可以把最后一个区块的内容取出来，这个区块的块头又有指向前一个区块的哈希指针，一步步往前找，最终能把整个区块链找出来。</p><p>有些节点没有保存完整的区块链的信息，只保存了最近的几千个区块，如果需要用到前面区块的信息，可以问其他的全节点要，哈希指针的性质保证了整个区块的内容是不可篡改的。</p><p><strong>Q2：区块恋：n个人保存私钥的n个部分</strong></p><p>任何一人丢失，都可能导致无法取出钱。</p><p>截断私钥的做法会降低账户的安全性，比特币系统中每个账户的安全性与所用的私钥的长度是相关的。</p><p>多个人的共享账户不建议用共享私钥的办法，建议用多重签名。</p><p><strong>Q3：理论上，分布式系统中取得共识是不可能的，比特币系统如何绕过分布式共识中的那些不可能结论。</strong></p><p>严格来说，比特币没有取得真正的共识，因为取得的共识随时可能被推翻，例如分叉攻击，但是理论上的不可能结论，实际中不一定适用，理论可能只针对某种特定的模型。</p><p><strong>Q4：比特币的稀缺性</strong></p><p>总量固定&#x2F;稀缺的东西其实是不适合货币的，一个好的货币要有通货膨胀的功能。</p><p><strong>Q5：量子计算</strong></p><p>量子计算离实用还差得很远；比特币中并没有把账户的公钥直接暴露出来，而是用公钥取hash后得到一个地址（取hash不同于加密，可能造成信息的损失，hash函数一般是不可逆的）；</p><blockquote><p>未完待续。。。。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>区块链</category>
      
    </categories>
    
    
    <tags>
      
      <tag>比特币</tag>
      
      <tag>以太坊</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实训总结</title>
    <link href="/blog/2022/09/01/%E5%AE%9E%E8%AE%AD%E6%80%BB%E7%BB%93/"/>
    <url>/blog/2022/09/01/%E5%AE%9E%E8%AE%AD%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="实训总结"><a href="#实训总结" class="headerlink" title="实训总结"></a>实训总结</h1><h2 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h2><p>我们使用的是mysql+Navicat Premium15，开发的时候用本地的连接（因为开发时为了测试功能会需要一些数据，也产生很多数据，如果要同时保证数据库完整性会降低效率），最终演示是用的是白嫖来的云服务器，方便团队中的其他成员进行管理维护，同时配合项目功能看实际效果。</p><p>我们总共建了13张表，schedule_info这张表因为时间不够了，整个日程功能被放弃，所以并没有用到，实际用到的是13张表，已转储为xbb_db.sql，在项目过程中走过的一些关于数据库的小坑如下：</p><p><strong>1、表名尽量简单。</strong></p><p>最开始建表的时候每张表都带个“_”，doctor_info、nurse_info等等，事实证明多余的“__info”只是在折磨自己，还有一个表名字是medicineinfo_base，后期写相关内容的时候非常折磨。</p><p><strong>2、&#x3D;&#x3D;数据库的字段名和实体类的属性名不对应&#x3D;&#x3D;</strong></p><p><strong>例：</strong></p><p><code>数据库字段：idnamepwd </code></p><p><code>实体类属性：idnamepassword</code></p><p>查询结果：password查询为null</p><p><strong>原因：</strong></p><p>sql语句：<code>select * from mybatis.user where id = #&#123;id&#125; </code></p><p>其实为：<code>select id,name,pwd from mybatis.user where id = #&#123;id&#125; </code></p><p>而输出的user的password属性没有赋值，所以为null</p><p><strong>解决方法：</strong></p><p>法一：起别名</p><p><code>select id,name,pwd as password from mybatis.user where id = #&#123;id&#125;</code></p><p>法二：使用resultMap结果集映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;userMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--property实体类中的属性,column数据库中的字段--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;pwd&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span>  <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;userMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>    select * from mybatis.user where id = #&#123;id&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>id 标签：用于指定主键字段<br>result 标签：用于指定非主键字段<br>column 属性：用于指定数据库列名<br>property 属性：用于指定实体类属性名称</p></blockquote><p>法三：Mybatis-Plus在实体类属性和数据库表字段映射时，会自动将数据库表字段名中的下划线去掉，并且不受字母大小写的影响。</p><p>在application.yml配置文件中添加Mybatis的配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">mybatis</span>:<span class="hljs-string"></span><br>  <span class="hljs-attr">type-aliases-package</span>: <span class="hljs-string">com.mybatisplus.pojo  # 实体类包别名作用:可以用实体类名称代替实体类的相对路径</span><br>  <span class="hljs-attr">configuration</span>:<span class="hljs-string"></span><br>    <span class="hljs-attr">map-underscore-to-camel-case</span>: <span class="hljs-string">true # 驼峰命名</span><br></code></pre></td></tr></table></figure><p>通过驼峰命名,将数据库表字段名下划线去掉，然后去映射实体类属性名，同样不考虑字母大小写问题,这样就达到了和Mybatis-Plus一样的效果。</p><p>（但依然可能有值无法被映射到）</p><p>法四：在核心配置文件中启用下划线与驼峰式命名规则的映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <br>     <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span>  <br>          <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span>  <br>     <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上是从网上搜到的解决办法，我们试过改配置，但还是有问题，所以用了resultMap，但其实很麻烦，每个字段都要写，所以后来直接把数据库的字段名改成了跟实体类属性对应的驼峰。</p><p><strong>3、使用简写</strong></p><p>在application.properties中添加<code>mybatis.type-aliases-package=com.xbb.entity</code>后，我们在mapper.xml映射文件中不需要写出实体类的完整路径，只需要写出类名即可。</p><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;selectByDepartment&quot; resultType<span class="hljs-operator">=</span>&quot;doctor&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> doctor_info <span class="hljs-keyword">where</span> department <span class="hljs-operator">=</span> #&#123;department&#125;<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>4、给每张表都设置自增主键id，可能不会展现给用户，但可以作为唯一标志来查询。</p><p>5、本来觉得在建表的时候要考虑到展示，前端的一个table最好来自一张表的数据，所以可能需要一定的冗余，后来发现，需要多张表数据时直接通过sql操作也可行（left joint），如果之后有机会可以尝试。</p><p>6、算是一点总结吧，个人感觉数据库的设计是很需要逻辑的，一旦定下来改动的成本会很高，而且作为整个项目的底层，设计的好坏会影响到后面所有的开发过程是否复杂可行，所以要用多点心，考虑整体。</p><h2 id="搭建后端"><a href="#搭建后端" class="headerlink" title="搭建后端"></a>搭建后端</h2><h3 id="Spring-Boot入门"><a href="#Spring-Boot入门" class="headerlink" title="Spring Boot入门"></a>Spring Boot入门</h3><p><strong>介绍：</strong></p><p>一般把Spring Boot称为搭建程序的脚手架或者说是便捷搭建基于Spring的工程 脚手架。其最主要作用就是帮助开发人员快速的构建庞大的spring项目，并且尽可能的减少一切xml配置，做到开箱即用，迅速上手，让开发人员关注业务而非配置。 </p><p>java一直被人诟病的一点就是臃肿、麻烦。当我们还在辛苦的搭建项目时，可能Python程序员已经把功能写好了，究其原因注意是两点：</p><p>1、复杂的配置 </p><p>项目各种配置其实是开发时的损耗， 因为在思考 Spring 特性配置和解决业务问题之间需要进行思维切换，所以 写配置挤占了写应用程序逻辑的时间。</p><p>2、混乱的依赖管理</p><p>项目的依赖管理也是件吃力不讨好的事情。决定项目里要用哪些库就已经够让人头痛的了，你还要知道这些库的哪个版本和其他库不会有冲突，这难题实在太棘手。并且，依赖管理也是一种损耗，添加依赖不是写应用程序代码。一旦选错了依赖的版本，随之而来的不兼容问题毫无疑问会是生产力杀手。</p><p>而Spring Boot让这一切成为过去！ </p><p>Spring Boot 简化了基于Spring的应用开发，只需要“run”就能创建一个独立的、生产级别的Spring应用。 </p><p>Spring Boot为Spring平台及第三方库提供开箱即用的设置（提供默认设置，存放默认配置的包就是启动器starter），这样我们就可以简单的开始。多数Spring Boot应用只需要很少的Spring配置。</p><p>我们可以使用Spring Boot创建java应用，并使用java –jar 启动它，就能得到一个生产级别的web工程。 </p><p><strong>Spring Boot 主要特点是：</strong> </p><ul><li>创建独立的Spring应用，为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验 </li><li>直接嵌入应用服务器，如tomcat、jetty、undertow等；不需要去部署war包 </li><li>提供固定的启动器依赖去简化组件配置；实现开箱即用（启动器starter其实就是Spring Boot提供的一个jar 包），通过自己设置参数（.properties或.yml的配置文件），即可快速使用。 </li><li>自动地配置Spring和其它有需要的第三方依赖     </li><li>提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等     </li><li>绝对没有代码生成，也无需 XML 配置。</li></ul><h3 id="新建一个Spring-Boot项目"><a href="#新建一个Spring-Boot项目" class="headerlink" title="新建一个Spring Boot项目"></a>新建一个Spring Boot项目</h3><p><strong>1、新建一个maven工程</strong></p><p>File–New–Project–Maven–next–选定Name和Location–Finish</p><p>生成如图：</p><p><img src="/blog/2022/09/01/%E5%AE%9E%E8%AE%AD%E6%80%BB%E7%BB%93/2022-04-04_133833.png" alt="2022-04-04_133833"></p><p><strong>2、添加依赖</strong></p><p>现在创建好的项目还与Spring Boot没什么关联，Spring Boot提供了一个名为spring-boot-starter-parent的工程，里面已经对各种常用依赖（并非全部）的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们 就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标即可！ </p><p><strong>2.1 添加父工程坐标</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2.2 添加web启动器</strong></p><p>为了让Spring Boot帮我们完成各种自动配置，我们必须引入Spring Boot提供的自动配置依赖，我们称为 启动器 。因为我们是web项目，这里我们引入web启动器，在 pom.xml 文件中加入如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要注意的是，我们并没有在这里指定版本信息。因为Spring Boot的父工程已经对版本进行了管理了。 这个时候，我们会发现项目中多出了大量的依赖。</p><p>那些依赖都是Spring Boot根据 spring-boot-starter-web 这个依赖自动引入的，而且所有的版本都已经管理好，不会出现冲突。 </p><p><strong>2.3 管理jdk版本</strong></p><p>如果我们想要修改Spring Boot项目的jdk版本，只需要简单的添加以下属性即可，如果没有需求，则不添加。同样的在 pom.xml 文件中添加如下： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>2.4 完整pom文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 </span></span><br><span class="hljs-string"><span class="hljs-tag">http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <br>  <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ccnu.springboot.demo1<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springbootdemo1<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">maven-jar-plugin.version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">maven-jar-plugin.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>  <br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span> <br></code></pre></td></tr></table></figure><p><strong>2.5 启动类</strong></p><p>Spring Boot项目通过main函数即可启动，我们需要创建一个启动类： </p><p>编写&#x2F;backend&#x2F;src&#x2F;main&#x2F;java&#x2F;azure&#x2F;Application.java如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azure;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@MapperScan(&quot;azure.dao&quot;)</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2.6 编写controller</strong></p><p>编写&#x2F;backend&#x2F;src&#x2F;mian&#x2F;java&#x2F;azure&#x2F;controller&#x2F;NotFoundcontroller.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> azure.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotFoundController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;404&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">NotFound</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;对不起，您的页面走丢了！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.7 启动项目，查看启动端口：</p><p><img src="/blog/2022/09/01/%E5%AE%9E%E8%AE%AD%E6%80%BB%E7%BB%93/2022-04-04_143417.png" alt="2022-04-04_143417"></p><p>打开<a href="http://localhost:8080/404">http://localhost:8080/404</a></p><p><img src="/blog/2022/09/01/%E5%AE%9E%E8%AE%AD%E6%80%BB%E7%BB%93/2022-04-04_143125.png" alt="2022-04-04_143125"></p><p>测试成功</p><p>2.8 项目最终完整的xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--maven版本和头文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0</span></span><br><span class="hljs-string"><span class="hljs-tag">http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    自己配置的GVA--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ccnu.springboot.demo4<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springbootdemo5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    项目的打包方式--&gt;</span><br><span class="hljs-comment">&lt;!--    jar:java应用--&gt;</span><br><span class="hljs-comment">&lt;!--    war:javaweb应用--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    父工程坐标--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.5.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">fastjson.version</span>&gt;</span>1.2.25<span class="hljs-tag">&lt;/<span class="hljs-name">fastjson.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mybatis.version</span>&gt;</span>1.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">mybatis.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven-jar-plugin.version</span>&gt;</span>3.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">maven-jar-plugin.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    项目依赖--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 分页功能 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.8<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- Spring Boot的web启动器 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- Thymeleaf --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <br>        <span class="hljs-comment">&lt;!-- MyBatis --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 连接池 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- lombok --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 工具包 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span> <br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-comment">&lt;!-- 打jar包时如果不配置该插件，打出来的jar包没有清单文件 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>3、新建配置文件</strong></p><p>在&#x2F;backend&#x2F;src&#x2F;main&#x2F;resources下新建application.properties或application.yml（二者都是配置文件，写法不同）</p><p>application.properties中为：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">project.name</span>=<span class="hljs-string">kanbingbing</span><br><span class="hljs-attr">project.version</span>=<span class="hljs-string">1.0.0</span><br><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8081</span><br><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://114.115.218.247:3307/xbb_db?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-comment">#spring.datasource.url=jdbc:mysql://localhost:3306/xbb_db?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><br><span class="hljs-attr">spring.jackson.time-zone</span>=<span class="hljs-string">GMT+8</span><br><br><span class="hljs-attr">spring.jackson.date-format</span>=<span class="hljs-string">yyyy-MM-dd HH:mm:ss</span><br><br><span class="hljs-attr">spring.thymeleaf.cache</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">spring.resources.static-locations</span>=<span class="hljs-string">classpath:/static/</span><br><br><span class="hljs-attr">mybatis.type-aliases-package</span>=<span class="hljs-string">com.xbb.entity</span><br><span class="hljs-attr">mybatis.mapper-locations</span>=<span class="hljs-string">classpath:mybatis/mappers/*.xml</span><br><br><span class="hljs-attr">logback.level</span>=<span class="hljs-string">INFO</span><br><span class="hljs-attr">logging.level.com.ccnu</span>=<span class="hljs-string">debug</span><br><br><span class="hljs-attr">file.upload.path</span>=<span class="hljs-string">C:\\Shirley-learning\\apache-tomcat-9.0.24-windows-x64\\apache-tomcat-9.0.24\\webapps\\tanghulu</span><br><br><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">2MB</span><br><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">2MB</span><br></code></pre></td></tr></table></figure><p>application.yml中为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">pagehelper:</span><br>  <span class="hljs-attr">helperDialect:</span> <span class="hljs-string">mysql</span><br>  <span class="hljs-attr">reasonable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">supportMethodsArguments:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">params:</span> <span class="hljs-string">count=countSql</span><br><br></code></pre></td></tr></table></figure><h3 id="用mybatis管理数据库"><a href="#用mybatis管理数据库" class="headerlink" title="用mybatis管理数据库"></a>用mybatis管理数据库</h3><p>在&#x2F;backend&#x2F;src&#x2F;main&#x2F;resources下新建mybatis.mappers文件夹，存放xml文件，目录如图所示：</p><p><img src="/blog/2022/09/01/%E5%AE%9E%E8%AE%AD%E6%80%BB%E7%BB%93/2022-04-04_153709.png" alt="2022-04-04_153709"></p><h3 id="以Spring-MVC架构编写程序"><a href="#以Spring-MVC架构编写程序" class="headerlink" title="以Spring MVC架构编写程序"></a>以Spring MVC架构编写程序</h3><p>在&#x2F;backend&#x2F;src&#x2F;main&#x2F;java&#x2F;azure下</p><p>新建entity文件夹存放实体类，实体类类名及属性最好与数据库的表名和字段对应；</p><p>新建dao文件夹作为数据访问层，与编写sql语言直接操作数据库的xml文件相对应，命名如：ArticleMapper接口类；</p><p>新建service文件夹作为业务层，再在service文件夹下新建impl文件夹，二者分别存放service接口类和serviceImpl接口实现类，命名如：ArticleService接口类和ArticleServiceImpl接口实现类；</p><p>新建controller文件夹作为控制层，调用service层的方法以及向前端提供接口，命名如ArticleController类；</p><p>新建utils文件夹存放工具类，如CodeGenerator类、Result类。</p><p>![未命名文件 (1)](.&#x2F;未命名文件 (1).png)</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此，一个项目的后端框架已经搭建完毕，之后的开发按照上述规则进行。</p><h2 id="搭建前端"><a href="#搭建前端" class="headerlink" title="搭建前端"></a>搭建前端</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>需要的环境</p><p>Node.js : <a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p><p>安装就无脑下一步就好,安装在自己的环境目录下</p><p>Git : <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>镜像:<a href="https://npm.taobao.org/mirrors/git-for-windows/">https://npm.taobao.org/mirrors/git-for-windows/</a></p><p>确认nodejs安装成功:</p><p>cmd 下输入 node -v,查看是否能够正确打印出版本号即可!</p><p>cmd 下输入 npm-v,查看是否能够正确打印出版本号即可!</p><p>这个npm,就是一个软件包管理工具,就和linux下的apt软件安装差不多!</p><p>安装 Node.js 淘宝镜像加速器（cnpm）</p><p>这样子的话,下载会快很多~</p><p>在命令台输入-g 就是全局安装</p><p>npm install cnpm -g</p><p>或使用如下语句解决 npm 速度慢的问题</p><p>npm install –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><p>在命令台输入</p><p>cnpm install vue-cli -g</p><p>查看是否安装成功</p><p>vue list</p><h3 id="新建vue脚手架"><a href="#新建vue脚手架" class="headerlink" title="新建vue脚手架"></a>新建vue脚手架</h3><p>进入想新建项目的文件夹，打开控制台</p><p>创建脚手架：vue init webpack frontend</p><blockquote><p>克隆项目：git clone (地址)</p></blockquote><p>然后有一系列选项需要自定义，一般来说可以一路default，选择结束后会显示在安装中</p><p>运行vue：</p><p>cd frontend</p><p>npm install</p><p>npm run dev</p><p>打开<a href="http://localhost:8080/#/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0vue%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E4%B8%80%E4%B8%AA%E9%BB%98%E8%AE%A4%E9%A1%B5%E9%9D%A2%EF%BC%8C%E8%87%AA%E5%B7%B1%E5%9C%A8%E5%86%99%E9%A1%B9%E7%9B%AE%E4%B9%8B%E5%89%8D%E9%9C%80%E8%A6%81%E5%B0%86%E5%BE%88%E5%A4%9A%E4%B8%9C%E8%A5%BF%E5%88%A0%E9%99%A4%EF%BC%8C%E8%BF%99%E4%BA%9B%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C%E5%A6%82%E4%B8%8B%EF%BC%9A">http://localhost:8080/#/，可以看到vue脚手架的一个默认页面，自己在写项目之前需要将很多东西删除，这些初始化操作如下：</a></p><ul><li><p>将src&#x2F;assets中的logo.png替换成自己的logo.png</p></li><li><p>将components中的HelloWorld.vue删除</p></li><li><p>将router&#x2F;index.js中的内容替换如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>      <span class="hljs-comment">//此处开始写自己的路由</span><br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>将App.vue中的内容替换如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>/&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span></span></span><br><span class="language-javascript"><span class="language-xml">&#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li><p>将main.js中的内容替换如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// The Vue build version to load with the `import` command</span><br><span class="hljs-comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-comment">// 扫描路由配置</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-comment">// 导入Axios</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Axios</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-axios&#x27;</span><br><span class="hljs-comment">// 导入vuex</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><span class="hljs-comment">// 导入element-ui</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementUI</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><span class="hljs-comment">// 导入element css</span><br><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="hljs-comment">// 导入echarts</span><br><span class="hljs-comment">// import echarts from &#x27;echarts&#x27;</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> echarts <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;echarts&#x27;</span>;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementUI</span>)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(router)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Axios</span>, axios)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">$echarts</span> = echarts<br><br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router,<br>  store,<br>  <span class="hljs-comment">// components: &#123;App&#125;,</span><br>  <span class="hljs-comment">// template: &#x27;&lt;App/&gt;&#x27;</span><br>  <span class="hljs-comment">// elementUI</span><br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>注：引入前需要配套安装，安装方式基本都为：npm install xxx</p></blockquote></li></ul><p>还有一些要根据项目情况改变的小细节如下：</p><p>1、在写路径时可用@来代替src，相关配置在build&#x2F;webpack.base.conf.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">context</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;../&#x27;</span>),<br>  <span class="hljs-attr">entry</span>: &#123;<br>    <span class="hljs-attr">app</span>: <span class="hljs-string">&#x27;./src/main.js&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&#x27;.js&#x27;</span>, <span class="hljs-string">&#x27;.vue&#x27;</span>, <span class="hljs-string">&#x27;.json&#x27;</span>],<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&#x27;vue$&#x27;</span>: <span class="hljs-string">&#x27;vue/dist/vue.esm.js&#x27;</span>,<br>      <span class="hljs-string">&#x27;@&#x27;</span>: <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;src&#x27;</span>),<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、设置前后端交互的端口，相关配置在config&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">dev</span>: &#123;<br>    <span class="hljs-comment">// Paths</span><br>    <span class="hljs-attr">assetsSubDirectory</span>: <span class="hljs-string">&#x27;static&#x27;</span>,<br>    <span class="hljs-attr">assetsPublicPath</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">proxyTable</span>: &#123;<br>      <span class="hljs-string">&#x27;/api&#x27;</span>: &#123;<br>        <span class="hljs-comment">// 此处写后端启动的端口号</span><br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&#x27;http://localhost:8081&#x27;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">pathRewrite</span>: &#123;<br>          <span class="hljs-string">&#x27;^/api&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-comment">// can be overwritten by process.env.HOST</span><br>    <span class="hljs-comment">// 此处写前端启动的端口号</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>, <span class="hljs-comment">// can be overwritten by process.env.PORT, if port is in use, a free one will be determined</span><br>    <span class="hljs-attr">autoOpenBrowser</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">errorOverlay</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">notifyOnErrors</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">poll</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// https://webpack.js.org/configuration/dev-server/#devserver-watchoptions-</span><br><br>    <span class="hljs-attr">useEslint</span>: <span class="hljs-literal">true</span>,<br><br>    <span class="hljs-attr">showEslintErrorsInOverlay</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">&#x27;cheap-module-eval-source-map&#x27;</span>,<br>    <span class="hljs-attr">cacheBusting</span>: <span class="hljs-literal">true</span>,<br><br>    <span class="hljs-attr">cssSourceMap</span>: <span class="hljs-literal">true</span><br>  &#125;,<br></code></pre></td></tr></table></figure><p>3、设置打开时的网页名称，在index.html中进行修改</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width,initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 此处写网页名称 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>xbb-frontend<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- built files will be auto injected --&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="项目主要功能实现"><a href="#项目主要功能实现" class="headerlink" title="项目主要功能实现"></a>项目主要功能实现</h2><h3 id="1、基础增删改查及分类"><a href="#1、基础增删改查及分类" class="headerlink" title="1、基础增删改查及分类"></a>1、基础增删改查及分类</h3><p>以doctor为例</p><p>&#x3D;&#x3D;后端内容&#x3D;&#x3D;</p><p>在src&#x2F;main&#x2F;resources&#x2F;mybatis.mappers中新建DoctorMapper.xml，内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.xbb.dao.DoctorMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 增加 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addDoctor&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.xbb.entity.Doctor&quot;</span>&gt;</span><br>        insert into doctor_info(id,name,sex,idCard,age,birth,image,introduction,department,sort,fee,telephone)<br>        values(#&#123;id&#125;,#&#123;name&#125;,#&#123;sex&#125;,#&#123;idCard&#125;,#&#123;age&#125;,#&#123;birth&#125;,#&#123;image&#125;,#&#123;introduction&#125;,#&#123;department&#125;,#&#123;sort&#125;,#&#123;fee&#125;,#&#123;telephone&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 删除 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteDoctor&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.xbb.entity.Doctor&quot;</span>&gt;</span><br>        delete from doctor_info where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 修改 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateDoctor&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.xbb.entity.Doctor&quot;</span>&gt;</span><br>        update doctor_info set name=#&#123;name&#125;,sex=#&#123;sex&#125;,idCard=#&#123;idCard&#125;,age=#&#123;age&#125;,birth=#&#123;birth&#125;,image=#&#123;image&#125;,introduction=#&#123;introduction&#125;,department=#&#123;department&#125;,sort=#&#123;sort&#125;,fee=#&#123;fee&#125;,telephone=#&#123;telephone&#125;<br>        where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 查询 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectAll&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;doctor&quot;</span>&gt;</span><br>        select * from doctor_info<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据科室查询医生 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByDepartment&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;doctor&quot;</span>&gt;</span><br>        select * from doctor_info where department = #&#123;department&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 模糊查询 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;search&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;doctor&quot;</span>&gt;</span><br>    select * from doctor_info where name like concat(&#x27;%&#x27;,#&#123;val&#125;,&#x27;%&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>utils中新建Result工具类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.utils;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Result</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> total;<span class="hljs-comment">//内容长度</span><br>    <span class="hljs-keyword">private</span> Object data;<span class="hljs-comment">// 内容</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>entity中新建Doctor实体类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.entity;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Doctor</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<span class="hljs-comment">//工号</span><br>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> String sex;<span class="hljs-comment">//性别</span><br>    <span class="hljs-keyword">private</span> String idCard;<span class="hljs-comment">//身份证号</span><br>    <span class="hljs-keyword">private</span> String telephone;<span class="hljs-comment">//电话号码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-keyword">private</span> String birth;<span class="hljs-comment">//出生日期</span><br>    <span class="hljs-keyword">private</span> String image;<span class="hljs-comment">//个人照片</span><br>    <span class="hljs-keyword">private</span> String introduction;<span class="hljs-comment">//个人简介</span><br>    <span class="hljs-keyword">private</span> String department;<span class="hljs-comment">//科室</span><br>    <span class="hljs-keyword">private</span> String sort;<span class="hljs-comment">//职称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> fee;<span class="hljs-comment">//挂号费</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>dao中新建DcotorMapper.interface，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.dao;<br><span class="hljs-keyword">import</span> com.xbb.entity.Doctor;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DoctorMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addDoctor</span><span class="hljs-params">(Doctor doctor)</span>;<span class="hljs-comment">//添加医生信息（医生）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteDoctor</span><span class="hljs-params">(Long id)</span>;<span class="hljs-comment">//删除一条医生信息记录（管理员）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateDoctor</span><span class="hljs-params">(Doctor doctor)</span>;<span class="hljs-comment">//修改医生信息（医生）</span><br>    <span class="hljs-keyword">public</span> List&lt;Doctor&gt; <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>;<span class="hljs-comment">//查询所有医生信息（管理员）</span><br>    <span class="hljs-keyword">public</span> List&lt;Doctor&gt; <span class="hljs-title function_">selectByDepartment</span><span class="hljs-params">(String department)</span>;<span class="hljs-comment">//根据科室查询医生信息（病人）</span><br>    <span class="hljs-keyword">public</span> List&lt;Doctor&gt; <span class="hljs-title function_">search</span><span class="hljs-params">(String val)</span>;<span class="hljs-comment">//根据医生名模糊查询（管理员）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>service中新建DoctorService.interface，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.service;<br><span class="hljs-keyword">import</span> com.xbb.entity.Doctor;<br><span class="hljs-keyword">import</span> com.xbb.utils.Result;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DoctorService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addDoctor</span><span class="hljs-params">(Doctor doctor)</span>;<span class="hljs-comment">//添加医生信息（医生）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteDoctor</span><span class="hljs-params">(Long id)</span>;<span class="hljs-comment">//删除一条医生信息记录（管理员）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateDoctor</span><span class="hljs-params">(Doctor doctor)</span>;<span class="hljs-comment">//修改医生信息（医生）</span><br>    <span class="hljs-keyword">public</span> List&lt;Doctor&gt; <span class="hljs-title function_">selectAllOnce</span><span class="hljs-params">()</span>;<span class="hljs-comment">//一次获取所有医生信息（管理员）</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">selectAll</span><span class="hljs-params">(<span class="hljs-type">int</span> current,<span class="hljs-type">int</span> size)</span>;<span class="hljs-comment">//分页查询所有医生信息（管理员）</span><br>    <span class="hljs-keyword">public</span> List&lt;Doctor&gt; <span class="hljs-title function_">selectByDepartment</span><span class="hljs-params">(String department)</span>;<span class="hljs-comment">//根据科室查询医生信息（病人）</span><br>    Result <span class="hljs-title function_">search</span><span class="hljs-params">(Integer current, Integer size, String val)</span>;<span class="hljs-comment">//根据医生名模糊查询并分类</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Impl中新建DoctorServiceImpl接口实现类，内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.service.impl;<br><br><span class="hljs-keyword">import</span> com.github.pagehelper.Page;<br><span class="hljs-keyword">import</span> com.github.pagehelper.PageHelper;<br><span class="hljs-keyword">import</span> com.xbb.dao.DoctorMapper;<br><span class="hljs-keyword">import</span> com.xbb.entity.Doctor;<br><span class="hljs-keyword">import</span> com.xbb.service.DoctorService;<br><span class="hljs-keyword">import</span> com.xbb.utils.Result;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoctorServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">DoctorService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DoctorMapper doctorMapper;<span class="hljs-comment">//这里总会报错，不知为何，但不影响运行</span><br><br>    <span class="hljs-comment">// 插入：添加医生</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addDoctor</span><span class="hljs-params">(Doctor doctor)</span> &#123;<br>        <span class="hljs-keyword">return</span> doctorMapper.addDoctor(doctor);<br>    &#125;<br><br>    <span class="hljs-comment">// 删除：删除医生</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteDoctor</span><span class="hljs-params">(Long id)</span> &#123;<br>        <span class="hljs-keyword">return</span> doctorMapper.deleteDoctor(id);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 修改：修改医生信息</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateDoctor</span><span class="hljs-params">(Doctor doctor)</span> &#123;<br>        <span class="hljs-keyword">return</span> doctorMapper.updateDoctor(doctor);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 查询：一次获取所有医生列表</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Doctor&gt; <span class="hljs-title function_">selectAllOnce</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> doctorMapper.selectAll();<br>    &#125;<br><br>    <span class="hljs-comment">// 查询：一次获取所有医生列表并分页</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">selectAll</span><span class="hljs-params">(<span class="hljs-type">int</span> current ,<span class="hljs-type">int</span> size)</span> &#123;<br>        Page&lt;Doctor&gt; doctors = PageHelper.startPage(current, size);<br>        doctorMapper.selectAll();<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br>        result.setData(doctors.getResult());<br>        result.setTotal(doctors.getTotal());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// 查询：根据科室名查询医生</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;Doctor&gt; <span class="hljs-title function_">selectByDepartment</span><span class="hljs-params">(String department)</span> &#123;<br>        <span class="hljs-keyword">return</span> doctorMapper.selectByDepartment(department);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 模糊查询：根据医生名进行模糊查询并分类</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">search</span><span class="hljs-params">(Integer current, Integer size, String val)</span> &#123;<br>        Page&lt;Doctor&gt; doctors = PageHelper.startPage(current, size);<br>        doctorMapper.search(val);<br>        <span class="hljs-type">Result</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Result</span>();<br>        result.setData(doctors.getResult());<br>        result.setTotal(doctors.getTotal());<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在controller中新建DoctorController类，内容如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.controller;<br><br><span class="hljs-keyword">import</span> com.xbb.entity.Doctor;<br><span class="hljs-keyword">import</span> com.xbb.entity.User;<br><span class="hljs-keyword">import</span> com.xbb.service.impl.DoctorServiceImpl;<br><span class="hljs-keyword">import</span> com.xbb.service.impl.UserServiceImpl;<br><span class="hljs-keyword">import</span> com.xbb.utils.Result;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/doctor&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoctorController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DoctorServiceImpl doctorService;<br><br>    <span class="hljs-comment">// 添加医生</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/addDoctor&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addDoctor</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Doctor doctor)</span>&#123;<br>        <span class="hljs-keyword">return</span> doctorService.addDoctor(doctor);<br>    &#125;<br><br>    <span class="hljs-comment">// 删除医生</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/deleteDoctor&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">deleteDoctor</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Long id)</span>&#123;<br>        <span class="hljs-keyword">return</span> doctorService.deleteDoctor(id);<br>    &#125;<br><br>    <span class="hljs-comment">// 修改医生信息</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/updateDoctor&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateDoctor</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Doctor doctor)</span>&#123;<br>        <span class="hljs-keyword">return</span> doctorService.updateDoctor(doctor);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 一次获取所有医生列表</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;selectAllOnce&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Doctor&gt; <span class="hljs-title function_">selectAllOnce</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> doctorService.selectAllOnce();<br>    &#125;<br>    <br>    <span class="hljs-comment">// 获取所有医生并分页</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/selectAll&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">selectAll</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer current,<span class="hljs-meta">@RequestParam</span> Integer size)</span>&#123;<br>        <span class="hljs-keyword">return</span> doctorService.selectAll(current,size);<br>    &#125;<br><br>    <span class="hljs-comment">// 根据科室名查询医生列表</span><br>    <span class="hljs-meta">@RequestMapping(value=&quot;/selectByDepartment&quot;)</span><br>    <span class="hljs-keyword">public</span> List&lt;Doctor&gt; <span class="hljs-title function_">selectByDepartment</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String department)</span>&#123;<br>        <span class="hljs-keyword">return</span> doctorService.selectByDepartment(department);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 模糊查询并分页</span><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/search&quot;)</span><br>    <span class="hljs-keyword">public</span> Result <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer current,<span class="hljs-meta">@RequestParam</span> Integer size,<span class="hljs-meta">@RequestParam</span> String val)</span>&#123;<br>        <span class="hljs-keyword">return</span> doctorService.search(current,size,val);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;前端内容&#x3D;&#x3D;</p><p>在src下新建utils文件夹，在utils下新建request.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Message</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;element-ui&#x27;</span><br><br><span class="hljs-comment">// create an axios instance</span><br><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>  <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;/api&#x27;</span>, <span class="hljs-comment">// url = base url + request url</span><br>  <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span> <span class="hljs-comment">// request timeout</span><br>&#125;)<br><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>  <span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> res = response.<span class="hljs-property">data</span><br>    <span class="hljs-keyword">if</span> (res.<span class="hljs-property">code</span> !== <span class="hljs-number">200</span>) &#123;<br>      <span class="hljs-keyword">return</span> res<br>      <span class="hljs-comment">// return Promise.reject(new Error(res.message || &#x27;Error&#x27;))</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> res<br>    &#125;<br>  &#125;,<br>  <span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;<br>    <span class="hljs-title class_">Message</span>(&#123;<br>      <span class="hljs-attr">message</span>: error.<span class="hljs-property">message</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span>,<br>      <span class="hljs-attr">duration</span>: <span class="hljs-number">5</span> * <span class="hljs-number">1000</span><br>    &#125;)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error)<br>  &#125;<br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service<br></code></pre></td></tr></table></figure><p>在src下新建api文件夹，在api中新建doctor.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/request&#x27;</span><br><br><span class="hljs-comment">// 添加医生信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">addDoctor</span> (data) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/doctor/addDoctor&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    data<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 删除医生信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">deleteDoctor</span> (data) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/doctor/deleteDoctor&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">id</span>: data<br>    &#125;<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 修改医生信息</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">editDoctor</span> (data) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/doctor/updateDoctor&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    data<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 一次性获取所有医生</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getDoctorOnce</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/doctor/selectAllOnce&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 获取所有医生并分页</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getDoctor</span> (data) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/doctor/selectAll&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">params</span>: data<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 根据科室名获取医生</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getDoctorByDepartment</span> (department) &#123;<br>  <span class="hljs-keyword">return</span> request (&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/doctor/selectByDepartment&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">department</span>: department<br>    &#125;<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 根据医生名模糊搜索</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">searchByDoctorName</span>(<span class="hljs-params">val,current,size</span>)&#123;<br>  <span class="hljs-keyword">return</span> request (&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/doctor/search&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">params</span>: &#123;<br>        val : val,<br>        current : current,<br>        <span class="hljs-attr">size</span>: size<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>在src下新建admin，admin下新建index.vue和subadmin文件夹，subadmin文件夹继续新建Doctor.vue</p><p>Doctor.vue内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;!-- template里的所有东西必须用一个div包裹，规定 --&gt;<br>  &lt;div&gt;<br>    &lt;div class=&quot;tab-container&quot;&gt;<br>      &lt;!-- 添加按钮：样式、图标、点击事件 --&gt;  <br>      &lt;el-button<br>        type=&quot;primary&quot;<br>        icon=&quot;el-icon-edit&quot;<br>        @click=&quot;handleCreate&quot;<br>      &gt;添加<br>      &lt;/el-button&gt;<br>      &lt;br&gt;<br>      &lt;!-- element-ui的弹框，dialogFormVisible默认为false --&gt;<br>      &lt;el-dialog :visible.sync=&quot;dialogFormVisible&quot;&gt;<br>        &lt;!-- 表单：向后端提交数据，属性：model：v-bind:model的缩写，将表单数据绑定到doctorForm；元素绑定ref之后，直接通过this.$refs即可调用；：rules：写表单项提交规则；label-position=&quot;left&quot;：标签放在左边--&gt;<br>        &lt;el-form<br>          :model=&quot;doctorForm&quot;<br>          ref=&quot;doctorForm&quot;<br>          :rules=&quot;rules&quot;<br>          label-position=&quot;left&quot;<br>        &gt;<br>            <br>          &lt;!-- el-form-item即为表单项 --&gt;<br>          &lt;el-form-item label=&quot;姓名&quot; prop=&quot;name&quot;&gt;<br>            &lt;el-input v-model=&quot;doctorForm.name&quot;&gt;&lt;/el-input&gt;<br>          &lt;/el-form-item&gt;<br>            <br>          &lt;el-form-item label=&quot;性别&quot; prop=&quot;sex&quot;&gt;<br>            &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>            &lt;el-radio v-model=&quot;doctorForm.sex&quot; label=&quot;男&quot;&gt;男&lt;/el-radio&gt;<br>            &lt;el-radio v-model=&quot;doctorForm.sex&quot; label=&quot;女&quot;&gt;女&lt;/el-radio&gt;<br>          &lt;/el-form-item&gt;<br>            <br>          &lt;el-form-item label=&quot;身份证号&quot; prop=&quot;idCard&quot;&gt;<br>            &lt;el-input v-model=&quot;doctorForm.idCard&quot;&gt;&lt;/el-input&gt;<br>          &lt;/el-form-item&gt;<br>            <br>          &lt;el-form-item label=&quot;电话号码&quot; prop=&quot;telephone&quot;&gt;<br>            &lt;el-input v-model=&quot;doctorForm.telephone&quot;&gt;&lt;/el-input&gt;<br>          &lt;/el-form-item&gt;<br>            <br>          &lt;el-form-item label=&quot;年龄&quot; prop=&quot;age&quot;&gt;<br>            &lt;el-input-number v-model=&quot;doctorForm.age&quot; :min=&quot;1&quot;<br>                             :max=&quot;160&quot;&gt;&lt;/el-input-number&gt;<br>          &lt;/el-form-item&gt;<br>            <br>          &lt;el-form-item label=&quot;生日&quot; prop=&quot;birth&quot;&gt;<br>            &lt;el-input v-model=&quot;doctorForm.birth&quot;&gt;&lt;/el-input&gt;<br>          &lt;/el-form-item&gt;<br><br>          &lt;el-form-item label=&quot;科室&quot; prop=&quot;department&quot;&gt;<br>            &lt;el-select<br>              v-model=&quot;doctorForm.department&quot;<br>              class=&quot;filter-item&quot;<br>              placeholder=&quot;选择科室&quot;<br>            &gt;<br>              &lt;el-option<br>                v-for=&quot;item in tabMapDepartments&quot;<br>                :key=&quot;item.key&quot;<br>                :label=&quot;item.label&quot;<br>                :value=&quot;item.key&quot;<br>              /&gt;<br>            &lt;/el-select&gt;<br>          &lt;/el-form-item&gt;<br>            <br>          &lt;el-form-item label=&quot;职称&quot; prop=&quot;sort&quot;&gt;<br>            &lt;el-select<br>              v-model=&quot;doctorForm.sort&quot;<br>              class=&quot;filter-item&quot;<br>              placeholder=&quot;选择职称&quot;<br>            &gt;<br>              &lt;el-option<br>                v-for=&quot;item in tabMapSorts&quot;<br>                :key=&quot;item.key&quot;<br>                :label=&quot;item.label&quot;<br>                :value=&quot;item.key&quot;<br>              /&gt;<br>            &lt;/el-select&gt;<br>          &lt;/el-form-item&gt;<br>            <br>          &lt;el-form-item label=&quot;挂号费&quot; prop=&quot;fee&quot;&gt;<br>            &lt;el-input-number v-model=&quot;doctorForm.fee&quot; :min=&quot;0&quot;<br>                             :max=&quot;10000&quot;&gt;&lt;/el-input-number&gt;<br>          &lt;/el-form-item&gt;<br>            <br>          &lt;el-form-item label=&quot;个人介绍&quot; prop=&quot;introduction&quot;&gt;<br>            &lt;el-input type=&quot;textarea&quot; autosize v-model=&quot;doctorForm.introduction&quot;<br>                      style=&quot;width: 50%;&quot;&gt;&lt;/el-input&gt;<br>          &lt;/el-form-item&gt;<br><br>        &lt;/el-form&gt;<br>          <br>        &lt;!-- 弹出框底部按钮 --&gt;<br>        &lt;div slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;<br>          &lt;el-button @click=&quot;dialogFormVisible = false&quot;&gt;取消&lt;/el-button&gt;<br>          &lt;el-button type=&quot;primary&quot; @click=&quot; createData(&#x27;doctorForm&#x27;) &quot;&gt;确定&lt;/el-button&gt;<br>        &lt;/div&gt;<br>          <br>      &lt;/el-dialog&gt;<br>    &lt;/div&gt;<br><br>    &lt;div&gt;<br>      &lt;!-- 表格 --&gt;<br>      &lt;el-table<br>        ref=&quot;filterTable&quot;<br>        :data=&quot;tableData&quot;<br>        stript<br>        style=&quot;width: 100%&quot;<br>        :default-sort=&quot;&#123;prop: &#x27;data&#x27;, order: &#x27;descending&#x27;&#125;&quot;<br>      &gt;<br>          <br>        &lt;!--        详情框--&gt;<br>        &lt;el-table-column type=&quot;expand&quot;&gt;<br>          &lt;template slot-scope=&quot;props&quot;&gt;<br>            &lt;el-form label-position=&quot;left&quot;<br>                     class=&quot;demo-table-expand&quot;<br>                     style=&quot;margin-left: 100px; width: 800px;&quot;&gt;<br>              &lt;el-form-item label=&quot;姓名:&quot;&gt;<br>                &lt;span&gt;&#123;&#123; props.row.name &#125;&#125;&lt;/span&gt;<br>              &lt;/el-form-item&gt;<br>              &lt;el-form-item label=&quot;性别:&quot;&gt;<br>                &lt;span&gt;&#123;&#123; props.row.sex &#125;&#125;&lt;/span&gt;<br>              &lt;/el-form-item&gt;<br>              &lt;el-form-item label=&quot;身份证号:&quot;&gt;<br>                &lt;span&gt;&#123;&#123; props.row.idCard &#125;&#125;&lt;/span&gt;<br>              &lt;/el-form-item&gt;<br>              &lt;el-form-item label=&quot;电话号码:&quot;&gt;<br>                &lt;span&gt;&#123;&#123; props.row.telephone &#125;&#125;&lt;/span&gt;<br>              &lt;/el-form-item&gt;<br>              &lt;el-form-item label=&quot;年龄:&quot;&gt;<br>                &lt;span&gt;&#123;&#123; props.row.age &#125;&#125;&lt;/span&gt;<br>              &lt;/el-form-item&gt;<br>              &lt;el-form-item label=&quot;生日:&quot;&gt;<br>                &lt;span&gt;&#123;&#123; props.row.birth &#125;&#125;&lt;/span&gt;<br>              &lt;/el-form-item&gt;<br>&lt;!--              &lt;el-form-item label=&quot;头像:&quot;&gt;--&gt;<br>&lt;!--                &lt;span&gt;&#123;&#123; props.row.image &#125;&#125;&lt;/span&gt;--&gt;<br>&lt;!--              &lt;/el-form-item&gt;--&gt;<br>              &lt;el-form-item label=&quot;职称:&quot;&gt;<br>                &lt;span&gt;&#123;&#123; props.row.sort &#125;&#125;&lt;/span&gt;<br>              &lt;/el-form-item&gt;<br>              &lt;el-form-item label=&quot;费用:&quot;&gt;<br>                &lt;span&gt;&#123;&#123; props.row.fee &#125;&#125;&lt;/span&gt;<br>              &lt;/el-form-item&gt;<br>              &lt;el-form-item label=&quot;科室:&quot;&gt;<br>                &lt;span&gt;&#123;&#123; props.row.department &#125;&#125;&lt;/span&gt;<br>              &lt;/el-form-item&gt;<br>              &lt;el-form-item label=&quot;个人介绍:&quot; style=&quot;width: 700px;&quot;&gt;<br>                &lt;span&gt;&#123;&#123; props.row.introduction &#125;&#125;&lt;/span&gt;<br>              &lt;/el-form-item&gt;<br>            &lt;/el-form&gt;<br>          &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br><br>        &lt;!--        主要表单--&gt;<br>        &lt;el-table-column<br>          prop=&quot;name&quot;<br>          label=&quot;姓名&quot;<br>          width=&quot;100&quot;<br>        &gt;<br>          &lt;template slot-scope=&quot;scope&quot;&gt;<br>            &lt;el-popover trigger=&quot;hover&quot; placement=&quot;top&quot;&gt;<br>              &lt;p&gt;姓名：&#123;&#123; scope.row.name &#125;&#125;&lt;/p&gt;<br>              &lt;p&gt;医生介绍：&#123;&#123; scope.row.introduction &#125;&#125;&lt;/p&gt;<br>              &lt;div slot=&quot;reference&quot; class=&quot;name-wrapper&quot;&gt;<br>                &lt;el-tag size=&quot;medium&quot;&gt;&#123;&#123; scope.row.name &#125;&#125;&lt;/el-tag&gt;<br>              &lt;/div&gt;<br>            &lt;/el-popover&gt;<br>          &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br><br>        &lt;el-table-column<br>          prop=&quot;sex&quot;<br>          label=&quot;性别&quot;<br>          width=&quot;70&quot;<br>          :sex=&quot;sex&quot;<br>        &gt;&lt;/el-table-column&gt;<br><br>        &lt;el-table-column<br>          prop=&quot;sort&quot;<br>          label=&quot;职称&quot;<br>          width=&quot;150&quot;<br>          :sort=&quot;sort&quot;<br>        &gt;&lt;/el-table-column&gt;<br><br>        &lt;el-table-column<br>          prop=&quot;age&quot;<br>          label=&quot;年龄&quot;<br>          width=&quot;100&quot;<br>          :age=&quot;age&quot;<br>        &gt;&lt;/el-table-column&gt;<br><br>        &lt;el-table-column<br>          prop=&quot;department&quot;<br>          label=&quot;科室&quot;<br>          width=&quot;150&quot;<br>          :filters=&quot;[<br>            &#123; text : &#x27;神经内科&#x27;, value : &#x27;神经内科&#x27;&#125;,<br>            &#123; text : &#x27;内科&#x27;, value : &#x27;内科&#x27;&#125;,<br>            &#123; text : &#x27;外科&#x27;, value : &#x27;外科&#x27;&#125;,<br>            &#123; text : &#x27;妇产科&#x27;, value : &#x27;妇产科&#x27;&#125;,<br>            &#123; text : &#x27;儿科&#x27;, value : &#x27;儿科&#x27;&#125;,<br>            &#123; text : &#x27;眼科&#x27;, value : &#x27;眼科&#x27;&#125;,<br>            &#123; text : &#x27;耳鼻喉科&#x27;, value : &#x27;耳鼻喉科&#x27;&#125;,<br>            &#123; text : &#x27;口腔科&#x27;, value : &#x27;口腔科&#x27;&#125;,<br>            &#123; text : &#x27;皮肤科&#x27;, value : &#x27;皮肤科&#x27;&#125;,<br>            &#123; text : &#x27;肿瘤科&#x27;, value : &#x27;肿瘤科&#x27;&#125;,<br>            &#123; text : &#x27;中医科&#x27;, value : &#x27;中医科&#x27;&#125;,<br>            &#123; text : &#x27;体检中心&#x27;, value : &#x27;体检中心&#x27;&#125;<br>          ]&quot;<br>          :filter-method=&quot;filterTag&quot;<br>          filter-placement=&quot;bottom-end&quot;<br>        &gt;<br>          &lt;template slot-scope=&quot;scope&quot;&gt;<br>            &lt;el-tag&gt;&#123;&#123; scope.row.department &#125;&#125;<br>            &lt;/el-tag&gt;<br>          &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br><br>        &lt;el-table-column<br>          fixed=&quot;right&quot;<br>          label=&quot;操作&quot;<br>          width=&quot;200&quot;<br>        &gt;<br>          &lt;template slot=&quot;header&quot; slot-scope=&quot;scope&quot;&gt;<br>            &lt;el-input<br>              v-model=&quot;val&quot;<br>              size=&quot;medium&quot;<br>              placeholder=&quot;输入关键字搜索&quot;<br>              @keyup.enter.native=&quot;search&quot;/&gt;<br>            &lt;el-button style=&quot;margin-right: 10px&quot; @click=&quot;search()&quot;&gt;搜索&lt;/el-button&gt;<br>          &lt;/template&gt;<br><br>          &lt;template slot-scope=&quot;scope&quot;&gt;<br>            &lt;el-button<br>              size=&quot;mini&quot;<br>              @click=&quot;handleEdit(scope.$index, scope.row)&quot;<br>            &gt;编辑<br>            &lt;/el-button&gt;<br>            &lt;el-button<br>              size=&quot;mini&quot;<br>              type=&quot;danger&quot;<br>              @click=&quot;handleDelete(scope.$index, scope.row)&quot;<br>            &gt;删除<br>            &lt;/el-button&gt;<br>          &lt;/template&gt;<br>        &lt;/el-table-column&gt;<br>      &lt;/el-table&gt;<br>      &lt;pagination<br>        v-show=&quot;total &gt; 0&quot;<br>        :total=&quot;total&quot;<br>        :page.sync=&quot;page.current&quot;<br>        :limit.sync=&quot;page.size&quot;<br>        @pagination=&quot;getDoctor&quot;/&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br><br>import &#123;<br>  deleteDoctor,<br>  addDoctor,<br>  getDoctor,<br>  editDoctor,<br>  searchByDoctorName, addDoctorUser<br>&#125; from &#x27;@/api/admin&#x27;<br>import &#123; register &#125; from &#x27;@/api/register&#x27;<br>import Pagination from &#x27;@/components/Pagination&#x27;<br><br>export default &#123;<br>  name: &#x27;Doctor&#x27;,<br>  edit: false,<br>  components: &#123;Pagination&#125;,<br>  created () &#123;<br>    this.getDoctor()<br>  &#125;,<br>  data () &#123;<br>    return &#123;<br>      fileList: [],<br>      val: &#x27;&#x27;,<br>      tableData: [],<br>      total: 10,<br>      page: &#123;<br>        current: 1,<br>        size: 10<br>      &#125;,<br>      dialogFormVisible: false,<br>      doctorForm: &#123;<br>        name: &#x27;&#x27;,<br>        sex: &#x27;&#x27;,<br>        idCard: &#x27;&#x27;,<br>        age: &#x27;&#x27;,<br>        birth: &#x27;&#x27;,<br>        image: &#x27;&#x27;,<br>        introduction: &#x27;&#x27;,<br>        department: &#x27;&#x27;,<br>        sort: &#x27;&#x27;,<br>        fee: &#x27;&#x27;,<br>        telephone: &#x27;&#x27;,<br>        password: &#x27;&#x27;,<br>        flag: &#x27;&#x27;<br>      &#125;,<br>      // 表单验证，需要在el-form-item元素中增加prop属性<br>      rules: &#123;<br>        name: [<br>          &#123;required: true, message: &#x27;姓名不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        sex: [<br>          &#123;required: true, message: &#x27;性别不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        idCard: [<br>          &#123;required: true, message: &#x27;身份证号不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        age: [<br>          &#123;required: true, message: &#x27;年龄不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        birth: [<br>          &#123;required: true, message: &#x27;生日不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        // image: [<br>        //   &#123;required: true, message: &#x27;照片不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        // ],<br>        introduction: [<br>          &#123;required: true, message: &#x27;个人介绍不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        sort: [<br>          &#123;required: true, message: &#x27;职称不可为空&#x27;,  trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        department: [<br>          &#123;required: true, message: &#x27;科室不可为空&#x27;,  trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        fee: [<br>          &#123;required: true, message: &#x27;费用不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        telephone: [<br>          &#123;required: true, message: &#x27;电话不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        password: [<br>          &#123;required: true, message: &#x27;密码不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>      &#125;,<br>      // 对话框和显示<br>      dialogVisible: false,<br>      tabMapDepartments: [<br>        &#123;label: &#x27;神经内科&#x27;, key: &#x27;神经内科&#x27;&#125;,<br>        &#123;label: &#x27;内科&#x27;, key: &#x27;内科&#x27;&#125;,<br>        &#123;label: &#x27;外科&#x27;, key: &#x27;外科&#x27;&#125;,<br>        &#123;label: &#x27;妇产科&#x27;, key: &#x27;妇产科&#x27;&#125;,<br>        &#123;label: &#x27;儿科&#x27;, key: &#x27;儿科&#x27;&#125;,<br>        &#123;label: &#x27;眼科&#x27;, key: &#x27;眼科&#x27;&#125;,<br>        &#123;label: &#x27;耳鼻喉科&#x27;, key: &#x27;耳鼻喉科&#x27;&#125;,<br>        &#123;label: &#x27;口腔科&#x27;, key: &#x27;口腔科&#x27;&#125;,<br>        &#123;label: &#x27;皮肤科&#x27;, key: &#x27;皮肤科&#x27;&#125;,<br>        &#123;label: &#x27;肿瘤科&#x27;, key: &#x27;肿瘤科&#x27;&#125;,<br>        &#123;label: &#x27;中医科&#x27;, key: &#x27;中医科&#x27;&#125;,<br>        &#123;label: &#x27;体检中心&#x27;, key: &#x27;体检中心&#x27;&#125;,<br>      ],<br>      tabMapSorts: [<br>        &#123;label: &#x27;科室主任&#x27;, key: &#x27;科室主任&#x27;&#125;,<br>        &#123;label: &#x27;科室副主任&#x27;, key: &#x27;科室副主任&#x27;&#125;,<br>        &#123;label: &#x27;科室专家&#x27;, key: &#x27;科室专家&#x27;&#125;,<br>        &#123;label: &#x27;主治医师&#x27;, key: &#x27;主治医师&#x27;&#125;,<br>        &#123;label: &#x27;副主治医师&#x27;, key: &#x27;副主治医师&#x27;&#125;,<br>      ],<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    getDoctor () &#123;<br>      getDoctor(this.page).then((res) =&gt; &#123;<br>        this.tableData = res.data<br>        this.total = res.total<br>      &#125;)<br>    &#125;,<br>    search () &#123;<br>      searchByDoctorName(this.val, this.page.current, this.page.size).then((res) =&gt; &#123;<br>        this.tableData = res.data<br>        this.total = res.total<br>      &#125;)<br>    &#125;,<br>    handleCreate () &#123;<br>      this.dialogFormVisible = true<br>      this.doctorForm = &#123;<br>        name: &#x27;&#x27;,<br>        sex: &#x27;&#x27;,<br>        idCard: &#x27;&#x27;,<br>        telephone: &#x27;&#x27;,<br>        age: &#x27;&#x27;,<br>        birth: &#x27;&#x27;,<br>        image: &#x27;&#x27;,<br>        sort: &#x27;&#x27;,<br>        department: &#x27;&#x27;,<br>        fee: &#x27;&#x27;,<br>        introduction: &#x27;&#x27;,<br>        password: &#x27;&#x27;,<br>        flag: &#x27;&#x27;<br>      &#125;<br>    &#125;,<br>    createData (formName) &#123;<br>      this.$refs[formName].validate((vaild) =&gt; &#123;<br>        if (vaild) &#123;<br>          if (this.editDoctor) &#123;<br>            // 为表单绑定验证功能<br>            editDoctor(this.doctorForm)<br>            this.editDoctor = false<br>            this.$notify(&#123;<br>              title: &#x27;提示信息&#x27;,<br>              message: &#x27;修改成功&#x27;,<br>              type: &#x27;success&#x27;<br>            &#125;)<br>            this.getDoctor()<br>            this.getDoctor()<br>            this.dialogFormVisible = false<br>          &#125; else &#123;<br>            console.log(&#x27;start&#x27;)<br>            addDoctor(this.doctorForm)<br>            addDoctorUser(this.doctorForm.telephone, this.doctorForm.password, this.doctorForm.name, this.doctorForm.flag)<br>            this.editDoctor = false<br>            this.$notify(&#123;<br>              title: &#x27;提示信息&#x27;,<br>              message: &#x27;添加成功&#x27;,<br>              type: &#x27;success&#x27;<br>            &#125;)<br>            this.getDoctor()<br>            this.getDoctor()<br>            this.dialogFormVisible = false<br>          &#125;<br>        &#125; else &#123;<br>          this.dialogVisible = true<br>          this.getDoctor()<br>          this.getDoctor()<br>          return false<br>        &#125;<br>      &#125;)<br>    &#125;,<br>    sex (row, column) &#123;<br>      return row.sex<br>    &#125;,<br>    department (row, column) &#123;<br>      return row.department<br>    &#125;,<br>    sort (row, column) &#123;<br>      return row.sort<br>    &#125;,<br>    telephone (row, column) &#123;<br>      return row.telephone<br>    &#125;,<br>    age (row, column) &#123;<br>      return row.age<br>    &#125;,<br>    image (row, column) &#123;<br>      return row.image<br>    &#125;,<br>    handleEdit (index, row) &#123;<br>      this.dialogFormVisible = true<br>      this.editDoctor = true<br>      this.doctorForm = row<br>    &#125;,<br>    handleDelete (index, row) &#123;<br>      this.$confirm(&#x27;确认删除？&#x27;, &#x27;确认信息&#x27;, &#123;<br>        distinguishCancelAndClose: true,<br>        confirmButtonText: &#x27;删除&#x27;,<br>        cancelButtonText: &#x27;放弃删除&#x27;<br>      &#125;).then(() =&gt; &#123;<br>        deleteDoctor(row.id)<br>        this.getDoctor()<br>        this.$message(&#123;<br>          type: &#x27;info&#x27;,<br>          message: &#x27;删除成功&#x27;<br>        &#125;);<br>      &#125;).catch(action =&gt; &#123;<br>      &#125;);<br>    &#125;,<br>    //根据标签刷新<br>    filterHandler(value, row, column) &#123;<br>      const property = column[&#x27;property&#x27;];<br>      return row[property] === value;<br>    &#125;,<br>    filterTag(value, row) &#123;<br>      console.log(this.tableData)<br>      return row.department=== value<br>    &#125;,<br>    //清除标签<br>    clearFilter() &#123;<br>      this.$refs.filterTable.clearFilter()<br>    &#125;,<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.demo-table-expand &#123;<br>  font-size: 0;<br>&#125;<br><br>.demo-table-expand label &#123;<br>  width: 90px;<br>  color: #99a9bf;<br>&#125;<br><br>.demo-table-expand .el-form-item &#123;<br>  margin-right: 0;<br>  margin-bottom: 0;<br>  width: 50%;<br>&#125;<br><br>.block &#123;<br>  position: absolute;<br>  left: 30%;<br>  margin: 30px auto;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><p>index.vue内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>      &lt;el-header style=&quot;text-align: right; fontsize: 20px&quot;&gt;<br>        &lt;el-dropdown&gt;<br>          &lt;span&gt;你好，管理员&lt;/span&gt;<br>        &lt;/el-dropdown&gt;<br>      &lt;/el-header&gt;<br>    <br>      &lt;el-container&gt;<br>      &lt;el-aside width=&quot;200px&quot;&gt;<br>        &lt;div class=&quot;title&quot;&gt;&lt;br&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;管 理 员 后 台&lt;/div&gt;<br>        &lt;br&gt;&lt;br&gt;<br>        &lt;el-menu&gt;<br>          &lt;el-menu-item index=&quot;5&quot; @click=&quot;toDoctor()&quot;&gt;<br>              &lt;i class=&quot;el-icon-setting&quot;&gt;&lt;/i&gt;<br>              &lt;template slot=&quot;title&quot;&gt;医生信息管理&lt;/template&gt;<br>          &lt;/el-menu-item&gt;<br>        &lt;/el-menu&gt;<br>      &lt;/el-aside&gt;<br><br>      &lt;el-container&gt;<br>        &lt;el-main class=&quot;main&quot;&gt;<br>          &lt;!--          此处展示视图--&gt;<br>          &lt;transition name=&quot;scale&quot; mode=&quot;out-in&quot;&gt;<br>            &lt;router-view/&gt;<br>          &lt;/transition&gt;<br>        &lt;/el-main&gt;<br>      &lt;/el-container&gt;<br><br>    &lt;/el-container&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;getCurrent, logout&#125; from &#x27;@/api/login&#x27;<br><br>export default &#123;<br>  name: &#x27;Admin&#x27;,<br>  data () &#123;<br>    return &#123;<br>      circleUrl: &#x27;https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png&#x27;<br>    &#125;<br>  &#125;,<br>  mounted() &#123;<br>    this.getCurrent()<br>  &#125;,<br>  methods: &#123;<br>    toDoctor () &#123;<br>      this.$router.push(&#x27;/admin/doctor&#x27;)<br>    &#125;,<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br><br>.title &#123;<br>  height: 100px;<br>  width: 200px;<br>  background-color: #3d504c;<br>  color: white;<br>&#125;<br><br>.main &#123;<br>  height: 100%;<br>  /*border-radius: 30px;*/<br>  background-image: url(&quot;../../assets/background.png&quot;);<br>  background-size: 270px;<br>  background-color: #ebf3f2;<br>  /*text-align: center;*/<br>&#125;<br><br>.scale-enter, .scale-leave-to &#123;<br>  transform: scale(0)<br>&#125;<br>.scale-leave, .scale-enter-to &#123;<br>  transform: scale(1)<br>&#125;<br>.scale-enter-active, .scale-leave-active &#123;<br>  transition: all .5s<br>&#125;<br><br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>vue中所有的页面都需要配置路由，以上述两个页面为例：</p><p>在router中国新建modules文件夹，在modules文件夹中新建admin.js，内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Admin</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/admin/index&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Doctor</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/views/admin/subadmin/Doctor&#x27;</span><br><br><span class="hljs-keyword">const</span> adminRouter = &#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/admin&#x27;</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Admin&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">Admin</span>,<br>  <span class="hljs-attr">meta</span>: &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;管理员界面&#x27;</span>,<br>    <span class="hljs-attr">icon</span>: <span class="hljs-string">&#x27;el-icon-s-help&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;doctor&#x27;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Doctor&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-title class_">Doctor</span>,<br>      <span class="hljs-attr">meta</span>: &#123;<br>        <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;医生信息管理&#x27;</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> adminRouter<br></code></pre></td></tr></table></figure><p>router&#x2F;index.js中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-comment">// 导入vue-router</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-comment">// 导入组件</span><br><span class="hljs-keyword">import</span> adminRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/router/modules/admin&#x27;</span><br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Router</span>)<br><br><span class="hljs-comment">// 导出</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>(&#123;<br>  <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;history&#x27;</span>,<br>  <span class="hljs-attr">routes</span>: [<br>    adminRouter,<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>基本完成，可通过<a href="http://localhost:8080/admin/doctor%E6%9D%A5%E6%9F%A5%E7%9C%8B%E6%95%88%E6%9E%9C">http://localhost:8080/admin/doctor来查看效果</a></p><h3 id="2、登录注册修改密码及获取当前用户"><a href="#2、登录注册修改密码及获取当前用户" class="headerlink" title="2、登录注册修改密码及获取当前用户"></a>2、登录注册修改密码及获取当前用户</h3><p>&#x3D;&#x3D;后端&#x3D;&#x3D;</p><p>resources&#x2F;mybatis&#x2F;mappers&#x2F;UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.xbb.dao.UserMapper&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 注册 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkRegister&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from user_login where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.xbb.entity.User&quot;</span>&gt;</span><br>        insert into user_login(id,password,flag,username) values(#&#123;id&#125;,#&#123;password&#125;,#&#123;flag&#125;,#&#123;username&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>   <span class="hljs-comment">&lt;!-- 登录 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from user_login where id=#&#123;id&#125; and password=#&#123;password&#125; and flag=#&#123;flag&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 修改密码 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUser&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span>&gt;</span><br>        update user_login set password=#&#123;password&#125; where id=#&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>entity&#x2F;User：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.entity;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<span class="hljs-comment">//手机号</span><br>    <span class="hljs-keyword">private</span> String password;<span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> flag;<span class="hljs-comment">//用户身份，0代表管理员，1代表患者，2代表医生，3代表护士</span><br>    <span class="hljs-keyword">private</span> String username;<span class="hljs-comment">//用户名</span><br>&#125;<br></code></pre></td></tr></table></figure><p>dao&#x2F;UserMapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.dao;<br><span class="hljs-keyword">import</span> com.xbb.entity.User;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">checkRegister</span><span class="hljs-params">(String id)</span>;<span class="hljs-comment">//判断id是否已经存在</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<span class="hljs-comment">//添加用户（注册）</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">checkLogin</span><span class="hljs-params">(User user)</span>;<span class="hljs-comment">//判断手机号、密码和flag是否正确</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(String id,String password)</span>;<span class="hljs-comment">//修改密码（用户）</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logout</span><span class="hljs-params">()</span>;<span class="hljs-comment">//登出</span><br>&#125;<br></code></pre></td></tr></table></figure><p>service&#x2F;UserService：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">checkRegister</span><span class="hljs-params">(String id)</span>;<span class="hljs-comment">//判断id是否已经存在</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span>;<span class="hljs-comment">//添加用户（注册）</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">checkLogin</span><span class="hljs-params">(User user)</span>;<span class="hljs-comment">//判断手机号、密码和flag是否正确</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(String id,String password)</span>;<span class="hljs-comment">//修改密码（用户）</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">current</span><span class="hljs-params">()</span>;<span class="hljs-comment">//获取当前的登录信息</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logout</span><span class="hljs-params">()</span>;<span class="hljs-comment">//登出</span><br>&#125;<br></code></pre></td></tr></table></figure><p>UserServiceImpl：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.service.impl;<br><br><span class="hljs-keyword">import</span> com.xbb.dao.UserMapper;<br><span class="hljs-keyword">import</span> com.xbb.entity.User;<br><span class="hljs-keyword">import</span> com.xbb.service.UserService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br>    <span class="hljs-meta">@Autowired</span><br>    HttpServletRequest httpServletRequest;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">checkRegister</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> userMapper.checkRegister(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-keyword">return</span> userMapper.addUser(user);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">checkLogin</span><span class="hljs-params">(User user)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> userMapper.checkLogin(user);<br>        <span class="hljs-keyword">if</span> (res != <span class="hljs-literal">null</span>) httpServletRequest.getSession().setAttribute(<span class="hljs-string">&quot;id&quot;</span>, res.getId());<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(String id,String password)</span> &#123;<br>        <span class="hljs-keyword">return</span> userMapper.updateUser(id,password);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">current</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> (String) httpServletRequest.getSession().getAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>        <span class="hljs-keyword">return</span> userMapper.getById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logout</span><span class="hljs-params">()</span> &#123;<br>        httpServletRequest.getSession().removeAttribute(<span class="hljs-string">&quot;id&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>controller&#x2F;UserController：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.controller;<br><br><span class="hljs-keyword">import</span> com.xbb.entity.User;<br><span class="hljs-keyword">import</span> com.xbb.service.impl.UserServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/user&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserServiceImpl userService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/checkRegister&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">checkRegister</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String id)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.checkRegister(id);<br>    &#125;<br>    <br>    <span class="hljs-meta">@RequestMapping(value= &quot;/addUser&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.addUser(user);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/checkLogin&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">checkLogin</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.checkLogin(user);<br>    &#125;<br>    <br>    <span class="hljs-meta">@RequestMapping(value = &quot;/updateUser&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">updateUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String id,<span class="hljs-meta">@RequestParam</span> String password)</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.updateUser(id,password);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/current&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">current</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.current();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/logout&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">logout</span><span class="hljs-params">()</span>&#123;<br>        userService.logout();<br>    &#125;<br>    <br>    <span class="hljs-meta">@GetMapping(&quot;/current&quot;)</span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">current</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userService.current();<br>    &#125;<br>    <br>    <span class="hljs-meta">@RequestMapping(value = &quot;/addDNUser&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addDNUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String id,<span class="hljs-meta">@RequestParam</span> String password,</span><br><span class="hljs-params">                         <span class="hljs-meta">@RequestParam</span> String username,<span class="hljs-meta">@RequestParam</span> <span class="hljs-type">int</span> flag)</span>&#123;<br>        User user=<span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setId(id);<br>        user.setPassword(password);<br>        user.setUsername(username);<br>        user.setFlag(flag);<br>        <span class="hljs-keyword">return</span> userService.addUser(user);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;前端&#x3D;&#x3D;</p><p>views下新建login文件夹，login文件夹下新建Login.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-form ref=&quot;loginForm&quot; :model=&quot;form&quot; :rules=&quot;rules&quot;<br>             label-width=&quot;80px&quot; class=&quot;login-box&quot;&gt;<br>      &lt;h3 class=&quot;title&quot;&gt;小宝贝看病病&lt;/h3&gt;<br>      &lt;h3 class=&quot;login-title&quot;&gt;欢迎登录&lt;/h3&gt;<br><br>      &lt;el-form-item label=&quot;账号&quot; prop=&quot;id&quot;&gt;<br>        &lt;el-input type=&quot;text&quot; placeholder=&quot;请输入账号&quot; v-model=&quot;form.id&quot;/&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt;<br>         <br>        &lt;el-input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; v-model=&quot;form.password&quot;/&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-radio-group v-model=&quot;form.flag&quot;&gt;<br>        &lt;el-radio :label=&quot;0&quot;&gt;用户&lt;/el-radio&gt;<br>        &lt;el-radio :label=&quot;1&quot;&gt;医生&lt;/el-radio&gt;<br>        &lt;el-radio :label=&quot;2&quot;&gt;护士&lt;/el-radio&gt;<br>        &lt;el-radio :label=&quot;3&quot;&gt;管理员&lt;/el-radio&gt;<br>      &lt;/el-radio-group&gt;<br><br>      &lt;el-form-item class=&quot;buttons&quot; style=&quot;margin-left: -60px&quot;&gt;<br>        &lt;el-button @click=&quot;toRegister()&quot;&gt;跳转注册页&lt;/el-button&gt;<br>        &lt;el-button @click=&quot;toUpdatePassword()&quot;&gt;修改密码&lt;/el-button&gt;<br>        &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit(&#x27;loginForm&#x27;)&quot;&gt;登录&lt;/el-button&gt;<br>      &lt;/el-form-item&gt;<br><br>    &lt;/el-form&gt;<br><br>    &lt;el-dialog<br>      title=&quot;温馨提示&quot;<br>      :visible.sync=&quot;dialogVisible&quot;<br>      width=&quot;30%&quot;&gt;<br>&lt;!--      :before-close=&quot;handleClose&quot;--&gt;<br>      &lt;span&gt;请输入正确的格式&lt;/span&gt;<br>      &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;<br>        &lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = false&quot;&gt;确定&lt;/el-button&gt;<br>      &lt;/span&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;login&#125; from &#x27;@/api/login&#x27;<br>export default &#123;<br>  name: &#x27;Login.vue&#x27;,<br>  data () &#123;<br>    return &#123;<br>      form: &#123;<br>        id: &#x27;&#x27;,<br>        password: &#x27;&#x27;,<br>        flag: &#x27;&#x27;<br>      &#125;,<br>      // 表单验证，需要在el-form-item元素中增加prop属性<br>      rules: &#123;<br>        id: [<br>          &#123;required: true, message: &#x27;账号不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        password: [<br>          &#123;required: true, message: &#x27;密码不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        flag: [<br>          &#123;required: true, message: &#x27;密码不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ]<br>      &#125;,<br>      // 对话框和显示<br>      dialogVisible: false<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    toUpdatePassword() &#123;<br>      this.$router.push(&#x27;/updatepassword&#x27;)<br>    &#125;,<br>    showPwd () &#123;<br>      if (this.passwordType === &#x27;password&#x27;) &#123;<br>        this.passwordType = &#x27;&#x27;<br>      &#125; else &#123;<br>        this.passwordType = &#x27;password&#x27;<br>      &#125;<br>      this.$nextTick(() =&gt; &#123;<br>        this.$refs.password.focus()<br>      &#125;)<br>    &#125;,<br>    onSubmit (formName) &#123;<br>      // 为表单绑定验证功能<br>      this.$refs[formName].validate((vaild) =&gt; &#123;<br>        if (vaild) &#123;<br>          login(this.form).then((res) =&gt; &#123;<br>            console.log(res)<br>            if (res.id !== undefined) &#123;<br>              this.$notify(&#123;<br>                title: &#x27;提示信息&#x27;,<br>                message: &#x27;登录成功&#x27;,<br>                type: &#x27;success&#x27;<br>              &#125;)<br>              // 使用vue-router路由到指定页面，该方式成为编程式导航<br>              if (res.flag === 0)&#123;<br>                this.$router.push(&#x27;/patient&#x27;)<br>              &#125;else if(res.flag === 1)&#123;<br>                this.$router.push(&#x27;/doctor&#x27;)<br>              &#125;else if(res.flag === 2)&#123;<br>                this.$router.push(&#x27;/nurse&#x27;)<br>              &#125;else &#123;<br>                this.$router.push(&#x27;admin&#x27;)<br>              &#125;<br>            &#125; else &#123;<br>              this.$notify(&#123;<br>                title: &#x27;提示信息&#x27;,<br>                message: &#x27;账号或密码错误&#x27;,<br>                type: &#x27;error&#x27;<br>              &#125;)<br>            &#125;<br>          &#125;)<br>          // // 使用vue-router路由到指定页面，该方式成为编程式导航<br>          // this.$router.push(&#x27;/main&#x27;)<br>        &#125; else &#123;<br>          this.dialogVisible = true<br>          return false<br>        &#125;<br>      &#125;)<br>    &#125;,<br>    toRegister () &#123;<br>      this.$router.push(&#x27;/register&#x27;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.title &#123;<br>  margin: 0 auto 30px auto;<br>  text-align: center;<br>  color: #707070;<br>&#125;<br><br>.login-box &#123;<br>  border: 1px green solid;<br>  width: 350px;<br>  margin: 80px auto;<br>  padding: 35px 35px 15px 35px;<br>  border-radius: 5px;<br>  -webkit-border-radius: 5px;<br>  -moz-border-radius: 5px;<br>  box-shadow: 0 0 25px #2c3e90;<br>&#125;<br><br>.login-title &#123;<br>  text-align: center;<br>  margin: 0 auto 40px auto;<br>  color: #af4f7e;<br>&#125;<br><br>.buttons &#123;<br>  //margin: 30px auto;<br>  margin-top: 40px;<br>  margin-left: 25px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>login下新建Register.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-form ref=&quot;registerForm&quot; :model=&quot;form&quot; :rules=&quot;rules&quot;<br>             label-width=&quot;80px&quot; class=&quot;register-box&quot;&gt;<br>      &lt;h3 class=&quot;title&quot;&gt;小宝贝看病病&lt;/h3&gt;<br>      &lt;h3 class=&quot;register-title&quot;&gt;欢迎注册&lt;/h3&gt;<br><br>      &lt;el-form-item label=&quot;用户名&quot; prop=&quot;username&quot;&gt;<br>        &lt;el-input type=&quot;text&quot; placeholder=&quot;请输入用户名&quot; v-model=&quot;form.username&quot;/&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-form-item label=&quot;手机号&quot; prop=&quot;id&quot;&gt;<br>        &lt;el-input type=&quot;text&quot; placeholder=&quot;请输入手机号&quot; v-model=&quot;form.id&quot;/&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-form-item label=&quot;密码&quot; prop=&quot;password&quot;&gt;<br>        &lt;el-input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; v-model=&quot;form.password&quot;/&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-form-item label=&quot;确认密码&quot; prop=&quot;confirmPassword&quot;&gt;<br>        &lt;el-input type=&quot;password&quot; placeholder=&quot;请输入密码&quot; v-model=&quot;form.confirmPassword&quot;/&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-form-item class=&quot;register-button&quot; style=&quot;margin-left: 0px&quot;&gt;<br>        &lt;el-button type=&quot;primary&quot; @click=&quot;onSubmit(&#x27;registerForm&#x27;)&quot;&gt;注册&lt;/el-button&gt;<br>        &lt;el-button @click=&quot;toLogin()&quot;&gt;跳转登录页&lt;/el-button&gt;<br>      &lt;/el-form-item&gt;<br><br>    &lt;/el-form&gt;<br><br>    &lt;el-dialog<br>      title=&quot;温馨提示&quot;<br>      :visible.sync=&quot;dialogVisible&quot;<br>      width=&quot;30%&quot;<br>      &gt;<br>      &lt;span&gt;请重新验证格式&lt;/span&gt;<br>      &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;<br>        &lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = false&quot;&gt;重新输入&lt;/el-button&gt;<br>&lt;!--        &lt;el-button type=&quot;primary&quot; @click=&quot;toLogin()&quot;&gt;回到登录&lt;/el-button&gt;--&gt;<br>      &lt;/span&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;register, checkRegister&#125; from &#x27;@/api/register&#x27;<br>import &#123;<br>  validateContacts,<br>  validatePhone,<br>  validatePsdReg<br>&#125; from &#x27;@/views/login/validation&#x27;<br>import &#123;addPatient&#125; from &#x27;@/api/admin&#x27;<br>export default &#123;<br>  name: &#x27;Register&#x27;,<br>  data () &#123;<br>    return &#123;<br>      form: &#123;<br>        username: &#x27;&#x27;,<br>        id: &#x27;&#x27;,<br>        password: &#x27;&#x27;,<br>        confirmPassword: &#x27;&#x27;,<br>        // flag: &#x27;&#x27;<br>      &#125;,<br>      patientForm: &#123;<br>        telephone: &#x27;&#x27;<br>      &#125;,<br>      // 表单验证，需要在el-form-item元素中增加prop属性<br>      rules: &#123;<br>        username: [<br>          &#123;required: true, message: &#x27;用户名不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;,<br>          &#123; validator: validateContacts, message: validateContacts.callback, trigger: &#x27;blur&#x27; &#125;<br>        ],<br>        id: [<br>          &#123;required: true, message: &#x27;手机号不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;,<br>          &#123; min: 11, max: 11, message: &#x27;手机号格式错误&#x27;, trigger: &#x27;blur&#x27; &#125;,<br>          &#123; validator: validatePhone, message: &#x27;手机号格式错误&#x27;, trigger: &#x27;blur&#x27; &#125;<br>        ],<br>        password: [<br>          &#123;required: true, message: &#x27;密码不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;,<br>          &#123;validator:validatePsdReg, message: validatePsdReg.callback, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        confirmPassword: [<br>          &#123;required: true, message: &#x27;密码不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;,<br>          &#123;<br>            validator:(rule,value,callback)=&gt;&#123;<br>              if(value===&#x27;&#x27;)&#123;<br>                callback(new Error(&#x27;请再次输入密码&#x27;))<br>              &#125;else if(value!==this.form.password)&#123;<br>                callback(new Error(&#x27;两次输入密码不一致&#x27;))<br>              &#125;else&#123;<br>                callback( )<br>              &#125;<br>            &#125;,<br>            trigger:&#x27;blur&#x27;<br>          &#125;<br>        ]<br>      &#125;,<br>      // 对话框和显示<br>      dialogVisible: false<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    toLogin() &#123;<br>      this.dialogVisible = false<br>      this.$router.push(&#x27;/login&#x27;)<br>    &#125;,<br>    onSubmit (formName) &#123;<br>      // 为表单绑定验证功能<br>      this.$refs[formName].validate((vaild) =&gt; &#123;<br>        console.log(this.form.id)<br>        checkRegister(this.form.id).then((res) =&gt; &#123;<br>          console.log(res.id)<br>          if (vaild) &#123;<br>            if (res.id === undefined) &#123;<br>              // 使用vue-router路由到指定页面，该方式成为编程式导航<br>              register(this.form).then((res) =&gt; &#123;<br>                console.log(res)<br>              &#125;)<br>              this.patientForm.telephone = this.form.id<br>              addPatient(this.patientForm)<br>              this.$notify(&#123;<br>                title: &#x27;提示信息&#x27;,<br>                message: &#x27;注册成功&#x27;,<br>                type: &#x27;success&#x27;<br>              &#125;)<br>              this.$router.push(&#x27;/login&#x27;)<br>              return true<br>            &#125; else &#123;<br>              this.$notify(&#123;<br>                title: &#x27;提示信息&#x27;,<br>                message: &#x27;该手机号已注册&#x27;,<br>                type: &#x27;error&#x27;<br>              &#125;)<br>            &#125;<br>          &#125; else &#123;<br>            this.dialogVisible = true<br>            return false<br>          &#125;<br>        &#125;)<br><br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.title &#123;<br>  margin: 0 auto 30px auto;<br>  text-align: center;<br>  color: #707070;<br>&#125;<br>.register-box &#123;<br>  border: 1px green solid;<br>  width: 350px;<br>  margin: 80px auto;<br>  padding: 35px 35px 15px 35px;<br>  border-radius: 5px;<br>  -webkit-border-radius: 5px;<br>  -moz-border-radius: 5px;<br>  box-shadow: 0 0 25px #2c3e90;<br>&#125;<br>.register-title &#123;<br>  text-align: center;<br>  margin: 0 auto 40px auto;<br>  color: #af4f7e;<br>&#125;<br>.register-button &#123;<br>  margin-left: 60px;<br>  margin-top: 30px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>login下新建UpdatePassword.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-form ref=&quot;updatePasswordForm&quot; :model=&quot;form&quot; :rules=&quot;rules&quot;<br>             label-width=&quot;120px&quot; class=&quot;login-box&quot;&gt;<br>      &lt;br&gt;<br>      &lt;h3 class=&quot;title&quot;&gt;小宝贝看病病&lt;/h3&gt;<br>      &lt;h3 class=&quot;login-title&quot;&gt;修改密码&lt;/h3&gt;<br>      &lt;br&gt;<br>      &lt;el-form-item label=&quot;账号&quot; prop=&quot;id&quot;&gt;<br>        &lt;el-input type=&quot;text&quot; placeholder=&quot;请输入账号&quot; v-model=&quot;form.id&quot;/&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-form-item label=&quot;请输入原密码&quot; prop=&quot;password&quot;&gt;<br>        &lt;el-input type=&quot;password&quot; placeholder=&quot;请输入原密码&quot; v-model=&quot;form.password&quot;/&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;br&gt;<br>      &lt;el-form-item label=&quot;请输入新密码&quot; prop=&quot;newPassword&quot;&gt;<br>        &lt;el-input type=&quot;password&quot; placeholder=&quot;请输入新密码&quot; v-model=&quot;form.newPassword&quot;/&gt;<br>      &lt;/el-form-item&gt;<br>      &lt;br&gt;<br>      &lt;el-form-item label=&quot;请确认新密码&quot; prop=&quot;confirmPassword&quot;&gt;<br>        &lt;el-input type=&quot;password&quot; placeholder=&quot;请确认新密码&quot; v-model=&quot;form.confirmPassword&quot;/&gt;<br>      &lt;/el-form-item&gt;<br><br>      &lt;el-form-item class=&quot;buttons&quot; style=&quot;margin-left: -100px&quot;&gt;<br>        &lt;el-button @click=&quot;toRegister()&quot;&gt;跳转注册页&lt;/el-button&gt;<br>        &lt;el-button @click=&quot;toLogin()&quot;&gt;跳转登录页&lt;/el-button&gt;<br>        &lt;el-button type=&quot;primary&quot; @click=&quot;updatePassword(&#x27;updatePasswordForm&#x27;)&quot;&gt;确认修改密码&lt;/el-button&gt;<br>      &lt;/el-form-item&gt;<br><br>    &lt;/el-form&gt;<br><br>    &lt;el-dialog<br>      title=&quot;温馨提示&quot;<br>      :visible.sync=&quot;dialogVisible&quot;<br>      width=&quot;30%&quot;&gt;<br>      &lt;!--      :before-close=&quot;handleClose&quot;--&gt;<br>      &lt;span&gt;请输入账号和密码&lt;/span&gt;<br>      &lt;span slot=&quot;footer&quot; class=&quot;dialog-footer&quot;&gt;<br>        &lt;el-button type=&quot;primary&quot; @click=&quot;dialogVisible = false&quot;&gt;确定&lt;/el-button&gt;<br>      &lt;/span&gt;<br>    &lt;/el-dialog&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;checkPassword, login, updatePassword&#125; from &#x27;@/api/login&#x27;<br>import &#123;validatePsdReg&#125; from &#x27;@/views/login/validation&#x27;<br>export default &#123;<br>  name: &#x27;Login.vue&#x27;,<br>  data () &#123;<br>    return &#123;<br>      form: &#123;<br>        id: &#x27;&#x27;,<br>        password: &#x27;&#x27;,<br>        newPassword: &#x27;&#x27;,<br>        confirmPassword: &#x27;&#x27;,<br>        flag: &#x27;&#x27;<br>      &#125;,<br>      // 表单验证，需要在el-form-item元素中增加prop属性<br>      rules: &#123;<br>        id: [<br>          &#123;required: true, message: &#x27;账号不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;<br>        ],<br>        password: [<br>          &#123;required: true, message: &#x27;原密码不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;,<br>          &#123;<br>            validator: validatePsdReg,<br>            message: validatePsdReg.callback,<br>            trigger: &#x27;blur&#x27;<br>          &#125;<br>        ],<br>        newPassword: [<br>          &#123;required: true, message: &#x27;新密码不可为空&#x27;, trigger: &#x27;blur&#x27;&#125;,<br>          &#123;<br>            validator: validatePsdReg,<br>            message: validatePsdReg.callback,<br>            trigger: &#x27;blur&#x27;<br>          &#125;<br>        ],<br>        confirmPassword: [<br>          &#123;required: true, message: &#x27;请再次输入新密码&#x27;, trigger: &#x27;blur&#x27;&#125;,<br>          &#123;<br>            validator:(rule,value,callback)=&gt;&#123;<br>              if(value===&#x27;&#x27;)&#123;<br>                callback(new Error(&#x27;请再次输入密码&#x27;))<br>              &#125;else if(value!==this.form.password)&#123;<br>                callback(new Error(&#x27;两次输入密码不一致&#x27;))<br>              &#125;else&#123;<br>                callback( )<br>              &#125;<br>            &#125;,<br>            trigger:&#x27;blur&#x27;<br>          &#125;<br>        ]<br>      &#125;,<br>      // 对话框和显示<br>      dialogVisible: false<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    updatePassword(formName) &#123;<br>      console.log(&#x27;start&#x27;)<br>      this.$refs[formName].validate((vaild) =&gt; &#123;<br>        if (vaild) &#123;<br>          checkPassword(this.form.id,this.form.password).then((res) =&gt; &#123;<br>            if(res.id !== undefined)&#123;<br>              updatePassword(this.form.id, this.form.newPassword)<br>              this.$notify(&#123;<br>                title: &#x27;提示信息&#x27;,<br>                message: &#x27;更改密码成功&#x27;,<br>                type: &#x27;success&#x27;<br>              &#125;)<br>            &#125;else &#123;<br>              this.$notify(&#123;<br>                title: &#x27;提示信息&#x27;,<br>                message: &#x27;密码与账号不匹配&#x27;,<br>                type: &#x27;error&#x27;<br>              &#125;)<br>            &#125;<br>          &#125;)<br>        &#125; else &#123;<br>          this.dialogVisible = true<br>          return false<br>        &#125;<br>      &#125;)<br>    &#125;,<br>    toLogin()&#123;<br>      this.$router.push(&#x27;/login&#x27;)<br>    &#125;,<br>    showPwd () &#123;<br>      if (this.passwordType === &#x27;password&#x27;) &#123;<br>        this.passwordType = &#x27;&#x27;<br>      &#125; else &#123;<br>        this.passwordType = &#x27;password&#x27;<br>      &#125;<br>      this.$nextTick(() =&gt; &#123;<br>        this.$refs.password.focus()<br>      &#125;)<br>    &#125;,<br>    toRegister () &#123;<br>      this.$router.push(&#x27;/register&#x27;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style lang=&quot;scss&quot; scoped&gt;<br>.title &#123;<br>  margin: 0 auto 30px auto;<br>  text-align: center;<br>  color: #707070;<br>&#125;<br><br>.login-box &#123;<br>  border: 1px green solid;<br>  width: 420px;<br>  margin: 80px auto;<br>  padding: 35px 35px 15px 35px;<br>  border-radius: 5px;<br>  -webkit-border-radius: 5px;<br>  -moz-border-radius: 5px;<br>  box-shadow: 0 0 25px #2c3e90;<br>&#125;<br><br>.login-title &#123;<br>  text-align: center;<br>  margin: 0 auto 40px auto;<br>  color: #af4f7e;<br>&#125;<br><br>.buttons &#123;<br>  //margin: 30px auto;<br>  margin-top: 40px;<br>  margin-left: 25px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>login文件夹下新建validation.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 是否电话号码</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">validatePhone</span>(<span class="hljs-params">rule, value,callback</span>) &#123;<br>  <span class="hljs-keyword">const</span> reg =<span class="hljs-regexp">/^[1][3-9][0-9]&#123;9&#125;$/</span>;<br>  <span class="hljs-keyword">if</span>(value==<span class="hljs-string">&#x27;&#x27;</span>||value==<span class="hljs-literal">undefined</span>||value==<span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((!reg.<span class="hljs-title function_">test</span>(value)) &amp;&amp; value != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>      <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请输入正确的电话号码&#x27;</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">callback</span>();<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//是否邮箱号</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">validateEMail</span>(<span class="hljs-params">rule, value,callback</span>) &#123;<br>  <span class="hljs-keyword">const</span> reg =<span class="hljs-regexp">/^([a-zA-Z0-9]+[-_\.]?)+@[a-zA-Z0-9]+\.[a-z]+$/</span>;<br>  <span class="hljs-keyword">if</span>(value==<span class="hljs-string">&#x27;&#x27;</span>||value==<span class="hljs-literal">undefined</span>||value==<span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span> (!reg.<span class="hljs-title function_">test</span>(value))&#123;<br>      <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请输入正确的邮箱&#x27;</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">callback</span>();<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">//是否身份证号</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">validateIdNo</span>(<span class="hljs-params">rule, value,callback</span>) &#123;<br>  <span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>;<br>  <span class="hljs-keyword">if</span>(value==<span class="hljs-string">&#x27;&#x27;</span>||value==<span class="hljs-literal">undefined</span>||value==<span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-title function_">callback</span>();<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((!reg.<span class="hljs-title function_">test</span>(value)) &amp;&amp; value != <span class="hljs-string">&#x27;&#x27;</span>) &#123;<br>      <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请输入正确的身份证号码&#x27;</span>));<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">callback</span>();<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 检查密码格式</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">validatePsdReg</span> = (<span class="hljs-params">rule, value, callback</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!value) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请输入密码&#x27;</span>))<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^(?![\d]+$)(?![a-zA-Z]+$)(?![^\da-zA-Z]+$)([^\u4e00-\u9fa5\s])&#123;6,20&#125;$/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>    <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请输入6-20位英文字母、数字或者符号（除空格），且字母、数字和标点符号至少包含两种&#x27;</span>))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">callback</span>()<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 检查是否为中文</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">validateContacts</span> = (<span class="hljs-params">rule, value, callback</span>) =&gt; &#123;<br>  <span class="hljs-keyword">if</span> (!value) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;请输入中文&#x27;</span>))<br>  &#125;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-regexp">/^[\u0391-\uFFE5A-Za-z]+$/</span>.<span class="hljs-title function_">test</span>(value)) &#123;<br>    <span class="hljs-title function_">callback</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;不可输入特殊字符&#x27;</span>))<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_">callback</span>()<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置路由类似上个部分，不再复述。</p><h3 id="3、Echarts图"><a href="#3、Echarts图" class="headerlink" title="3、Echarts图"></a>3、Echarts图</h3><p>&#x3D;&#x3D;后端&#x3D;&#x3D;</p><p>主要是算数据给数据</p><p>OrderMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countAge&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select count(*) from order_info where patient_age<span class="hljs-symbol">&amp;gt;</span>=#&#123;age1&#125; and patient_age<span class="hljs-symbol">&amp;lt;</span>#&#123;age2&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countDepartment&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select count(*) from order_info where department=#&#123;department&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countOrderByDoctorName&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select count(*) from order_info where doctor_name=#&#123;doctorName&#125; and order_day &gt;= date(now()) - interval 7 day group by order_day ORDER BY order_day<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;countOrder&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;java.lang.Integer&quot;</span>&gt;</span><br>    select count(*) from order_info where order_day &gt;= date(now()) - interval 7 day group by order_day ORDER BY order_day;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>dao&#x2F;OrderMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.dao;<br><span class="hljs-keyword">import</span> com.xbb.entity.Order;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderMapper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age1,<span class="hljs-type">int</span> age2)</span>;<span class="hljs-comment">//查询就诊年龄段对应的记录条数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countDepartment</span><span class="hljs-params">(String department)</span>;<span class="hljs-comment">//查询所挂科室的记录数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countOrder();<span class="hljs-comment">//查询未来一周预约人数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countOrderByDoctorName(String name);<span class="hljs-comment">//根据医生名查询未来一周预约人数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>OrderService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.service;<br><span class="hljs-keyword">import</span> com.xbb.entity.Order;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age1,<span class="hljs-type">int</span> age2)</span>;<span class="hljs-comment">//查询就诊年龄段对应的记录条数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countDepartment</span><span class="hljs-params">(String department)</span>;<span class="hljs-comment">//查询所挂科室的记录数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countOrder();<span class="hljs-comment">//查询未来一周预约人数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countOrderByDoctorName(String name);<span class="hljs-comment">//根据医生名查询未来一周预约人数</span><br>&#125;<br></code></pre></td></tr></table></figure><p>OrderServiceImpl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.service.impl;<br><span class="hljs-keyword">import</span> com.xbb.dao.OrderMapper;<br><span class="hljs-keyword">import</span> com.xbb.entity.Order;<br><span class="hljs-keyword">import</span> com.xbb.service.OrderService;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age1, <span class="hljs-type">int</span> age2)</span> &#123;<br>        <span class="hljs-keyword">return</span> orderMapper.countAge(age1,age2);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">countDepartment</span><span class="hljs-params">(String department)</span> &#123;<br>        <span class="hljs-keyword">return</span> orderMapper.countDepartment(department);<br>    &#125;<br>    <br>        <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countOrder() &#123;<br>        <span class="hljs-keyword">return</span> orderMapper.countOrder();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countOrderByDoctorName(String name) &#123;<br>        <span class="hljs-keyword">return</span> orderMapper.countOrderByDoctorName(name);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>OrderController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.controller;<br><br><span class="hljs-keyword">import</span> com.xbb.entity.MedicalRecord;<br><span class="hljs-keyword">import</span> com.xbb.entity.Order;<br><span class="hljs-keyword">import</span> com.xbb.service.impl.MedicalRecordServiceImpl;<br><span class="hljs-keyword">import</span> com.xbb.service.impl.OrderServiceImpl;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.propertyeditors.CustomDateEditor;<br><span class="hljs-keyword">import</span> org.springframework.beans.propertyeditors.CustomNumberEditor;<br><span class="hljs-keyword">import</span> org.springframework.beans.propertyeditors.StringTrimmerEditor;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.WebDataBinder;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> java.text.DateFormat;<br><span class="hljs-keyword">import</span> java.text.SimpleDateFormat;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderServiceImpl orderService;<br>    <span class="hljs-keyword">private</span> MedicalRecordServiceImpl medicalRecordService;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/countAge&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countAge()&#123;<br>        <span class="hljs-type">int</span>[] countAge=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">11</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">11</span>;i++)&#123;<br>            countAge[i]=orderService.countAge(i*<span class="hljs-number">10</span>,(i+<span class="hljs-number">1</span>)*<span class="hljs-number">10</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> countAge;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/countDepartment&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countDepartment()&#123;<br>        <span class="hljs-type">int</span>[] count=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">12</span>];<br>        count[<span class="hljs-number">0</span>]=orderService.countDepartment(<span class="hljs-string">&quot;神经内科&quot;</span>);<br>        count[<span class="hljs-number">1</span>]=orderService.countDepartment(<span class="hljs-string">&quot;内科&quot;</span>);<br>        count[<span class="hljs-number">2</span>]=orderService.countDepartment(<span class="hljs-string">&quot;外科&quot;</span>);<br>        count[<span class="hljs-number">3</span>]=orderService.countDepartment(<span class="hljs-string">&quot;妇产科&quot;</span>);<br>        count[<span class="hljs-number">4</span>]=orderService.countDepartment(<span class="hljs-string">&quot;儿科&quot;</span>);<br>        count[<span class="hljs-number">5</span>]=orderService.countDepartment(<span class="hljs-string">&quot;眼科&quot;</span>);<br>        count[<span class="hljs-number">6</span>]=orderService.countDepartment(<span class="hljs-string">&quot;耳鼻咽喉科&quot;</span>);<br>        count[<span class="hljs-number">7</span>]=orderService.countDepartment(<span class="hljs-string">&quot;口腔科&quot;</span>);<br>        count[<span class="hljs-number">8</span>]=orderService.countDepartment(<span class="hljs-string">&quot;皮肤科&quot;</span>);<br>        count[<span class="hljs-number">9</span>]=orderService.countDepartment(<span class="hljs-string">&quot;肿瘤科&quot;</span>);<br>        count[<span class="hljs-number">10</span>]=orderService.countDepartment(<span class="hljs-string">&quot;中医科&quot;</span>);<br>        count[<span class="hljs-number">11</span>]=orderService.countDepartment(<span class="hljs-string">&quot;体检中心&quot;</span>);<br>        <span class="hljs-keyword">return</span> count;<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/countOrderByDoctorName&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countOrderByDoctorName(<span class="hljs-meta">@RequestParam</span> String name)&#123;<br>        <span class="hljs-keyword">return</span> orderService.countOrderByDoctorName(name);<br>    &#125;<br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/countOrder&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] countOrder()&#123;<br>        <span class="hljs-keyword">return</span> orderService.countOrder();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;前端&#x3D;&#x3D;</p><p>前端是根据从后端拿到的数据绘图，写法参考<a href="https://echarts.apache.org/handbook/zh/get-started/">https://echarts.apache.org/handbook/zh/get-started/</a></p><p>我们的写法如下：</p><p>admin.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../utils/request&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getOrderCount</span> () &#123;<br>  <span class="hljs-keyword">return</span> request (&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/order/count&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">getAgeCount</span> () &#123;<br>  <span class="hljs-keyword">return</span> request (&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/order/countAge&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span><br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">countOrder</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> request (&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/order/countOrder&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>  &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">countOrderByDoctorName</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/order/countOrderByDoctorName&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>    <span class="hljs-attr">params</span>: &#123;<br>      <span class="hljs-attr">name</span>: name<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>给参数的写法很容易错，报错一般是xxx is not present</p><p>稍微总结：</p><p>1、传多个参数拿到的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">method</span>:<span class="hljs-string">&#x27;get&#x27;</span>,<br><span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">val</span>:val,<br>    <span class="hljs-attr">current</span>: current<br>&#125;<br></code></pre></td></tr></table></figure><p>2、传一个表单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>data <span class="hljs-comment">//或写为 params: data</span><br><span class="hljs-comment">// 后端需要多个参数时，前端可以作为表单提交</span><br><span class="hljs-comment">// 定义方式例：</span><br><span class="hljs-attr">page</span>: &#123;<br>    <span class="hljs-attr">current</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">size</span>: <span class="hljs-number">10</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>3、不传参：直接不写</p></blockquote><p>接下来选择比较复杂的OrderEchartsByDoctor为例，效果是拿到从当天起及后六天共七天的单个医生的被预约数，然后展示，因为后端只拿到了数据数组，所以前端还写了获取近七天日期的方法与后端数据对应，另外这里本来想的是从父组件拿医生名，结果貌似子组件先加载所以拿不到，最后放弃了组件间传值，直接在这个子组件获取。</p><p>在components里新建OrderEchartsByDoctor.vue：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;div id=&quot;orderEchartsByDoctor&quot; :style=&quot;&#123;width: &#x27;400px&#x27;, height: &#x27;400px&#x27;&#125;&quot; class=&quot;chart&quot;&gt;&lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;countOrder, getOrderCount&#125; from &#x27;@/api/admin&#x27;<br>import &#123;countOrderByDoctorName&#125; from &#x27;@/api/doctor&#x27;<br>import &#123;getCurrent&#125; from &#x27;@/api/login&#x27;<br><br>export default &#123;<br>  name: &#x27;OrderEchartsByDoctor&#x27;,<br>  props: [&#x27;name&#x27;],<br>  created()&#123;<br>    console.log(&quot;页面初次进来时，是否存在：&quot;, this.nameNow)<br>    this.getDate();<br>    this.countOrder();<br>  &#125;,<br>  data () &#123;<br>    return &#123;<br>      count: [],<br>      same_week: [],<br>      same_day: &#x27;&#x27;,<br>      singleDate: [],<br>      nameNow:&#x27;&#x27;<br>    &#125;<br>  &#125;,<br>  methods: &#123;<br>    countOrder()&#123;<br>      getCurrent().then((res) =&gt; &#123;<br>        this.nameNow = res.username<br>        console.log(res)<br>        countOrderByDoctorName(this.nameNow).then((res) =&gt; &#123;<br>          this.count = res;<br>          this.drawLine()<br>        &#125;)<br>      &#125;)<br><br>    &#125;,<br><br>    getDate()&#123;<br>      // 默认显示当天前一周的数据<br>      let data = [];<br>      for (let i = 6; i &gt;= 0; i--) &#123;<br>        data.push(this.getDay(+i)) // 后<br>      &#125;<br>      console.log(data)<br>      // let date = data.reverse(); //得出一周的日期进行排序<br>      let date = data;<br>      let pkc = []; /* 用于存储展示的日期数据 */<br>      let weekday = [<br>        &#x27;星期日&#x27;,<br>        &#x27;星期一&#x27;,<br>        &#x27;星期二&#x27;,<br>        &#x27;星期三&#x27;,<br>        &#x27;星期四&#x27;,<br>        &#x27;星期五&#x27;,<br>        &#x27;星期六&#x27;,<br>      ];<br>      date.forEach((item, index) =&gt; &#123;<br>        //循坏日期<br>        let f = new Date(item);<br>        let week = f.getDay(); //计算出星期几<br>        let str1 = item.split(&#x27;-&#x27;);<br>        let strs = str1[0] + &#x27;-&#x27; + str1[1] + &#x27;-&#x27; + str1[2];<br><br>        let weeks = weekday[week]; /* 将计算出来的时间带入数字得出中文 */<br>        let time = Math.round(new Date(item) / 1000); //时间戳转换<br>        let s = &#123;&#125;; //用于存储每个日期对象<br>        s.date = item;<br>        s.name = strs;<br>        s.week = weeks;<br>        s.times = time;<br>        pkc.push(s);<br>      &#125;);<br>      this.same_week = pkc;<br>      //pkc存储着今天的年月日星期几，时间戳等<br>      this.same_day = pkc[0].date; //今天的数据<br>      for (let i = 0; i &lt; this.same_week.length; i++) &#123;<br>        this.singleDate = this.singleDate.concat(this.same_week[i].date)<br>      &#125;<br>    &#125;,<br>    getDay(day) &#123;<br>      let today = new Date();<br>      let targetday_milliseconds = today.getTime() + 1000 * 60 * 60 * 24 * day;<br>      today.setTime(targetday_milliseconds); //注意，这行是关键代码<br>      let tYear = today.getFullYear();<br>      let tMonth = today.getMonth();<br>      let tDate = today.getDate();<br>      tMonth = this.doHandleMonth(tMonth + 1);<br>      tDate = this.doHandleMonth(tDate);<br>      // return tYear + &#x27;-&#x27; + tMonth + &#x27;-&#x27; + tDate;<br>      return tMonth + &#x27;-&#x27; + tDate;<br>    &#125;,<br>    doHandleMonth(month) &#123;<br>      let m = month;<br>      if (month.toString().length == 1) &#123;<br>        m = month;<br>      &#125;<br>      return m;<br>    &#125;,<br><br>    drawLine()&#123;<br>      // 基于准备好的dom，初始化echarts实例<br>      let orderChart = this.$echarts.init(document.getElementById(&#x27;orderEchartsByDoctor&#x27;))<br>      // 绘制图表<br>      orderChart.setOption(&#123;<br>        title: &#123;<br>          text: &#x27;最近七天-我的预约&#x27;,<br>          subtext: &#x27;单位（个）&#x27;<br>        &#125;,<br>        tooltip: &#123;&#125;,<br>        yAxis: &#123;<br>          type: &#x27;category&#x27;,<br>          // data: [&quot;Mon&quot;,&quot;Tue&quot;,&quot;Wed&quot;,&quot;Thu&quot;,&quot;Fri&quot;,&quot;Sat&quot;,&quot;Sun&quot;]<br>          data: this.singleDate<br>        &#125;,<br>        xAxis: &#123;<br><br>        &#125;,<br>        series: [&#123;<br>          name: &#x27;挂号&#x27;,<br>          type: &#x27;bar&#x27;,<br>          color: &#x27;#86a185&#x27;,<br>          // data: [&quot;0&quot;,&quot;8&quot;,&quot;7&quot;,&quot;4&quot;,&quot;2&quot;,&quot;4&quot;,&quot;4&quot;]<br>          data: this.count.reverse()<br>        &#125;]<br>      &#125;);<br>    &#125;,<br>  &#125;<br>&#125;<br><br>&lt;/script&gt;<br><br>&lt;style&gt;<br>.chart&#123;<br>  margin-left: 100px;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>然后在view&#x2F;doctor&#x2F;subdoctor&#x2F;AddPatient里使用组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;div&gt;<br>&lt;el-card&gt;<br>  &lt;order-echarts-by-doctor<br>    id=&quot;orderEchartsByDoctor&quot;<br>    :style=&quot;&#123;width: &#x27;400px&#x27;, height: &#x27;400px&#x27;&#125;&quot;<br>    :name=&quot;name&quot;<br>  &gt;&lt;/order-echarts-by-doctor&gt;<br>&lt;/el-card&gt;<br>    &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import OrderEchartsByDoctor from &#x27;@/components/OrderEchartsByDoctor&#x27;<br>export default &#123;<br>  name: &#x27;addPatient&#x27;,<br>  components: &#123; OrderEchartsByDoctor &#125;,<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.demo-draw__content &#123;<br>  text-align: left;<br>&#125;<br>.button &#123;<br>  text-align: center;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>这里再把前端获取当前时间单拉出来：</p><p>法一：</p><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#123; nowDate &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br></code></pre></td></tr></table></figure><p>定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">nowDate</span>: <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-comment">// 当前日期</span><br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">currentTime</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-built_in">setInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">formatDate</span>, <span class="hljs-number">500</span>);<br>    &#125;,<br>    <span class="hljs-title function_">formatDate</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">let</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>      <span class="hljs-keyword">let</span> year = date.<span class="hljs-title function_">getFullYear</span>(); <span class="hljs-comment">// 年</span><br>      <span class="hljs-keyword">let</span> month = date.<span class="hljs-title function_">getMonth</span>() + <span class="hljs-number">1</span>; <span class="hljs-comment">// 月</span><br>      <span class="hljs-keyword">let</span> day = date.<span class="hljs-title function_">getDate</span>(); <span class="hljs-comment">// 日</span><br>      <span class="hljs-keyword">let</span> week = date.<span class="hljs-title function_">getDay</span>(); <span class="hljs-comment">// 星期</span><br>      <span class="hljs-keyword">let</span> weekArr = [ <span class="hljs-string">&quot;星期日&quot;</span>, <span class="hljs-string">&quot;星期一&quot;</span>, <span class="hljs-string">&quot;星期二&quot;</span>, <span class="hljs-string">&quot;星期三&quot;</span>, <span class="hljs-string">&quot;星期四&quot;</span>, <span class="hljs-string">&quot;星期五&quot;</span>, <span class="hljs-string">&quot;星期六&quot;</span> ];<br>      <span class="hljs-keyword">let</span> hour = date.<span class="hljs-title function_">getHours</span>(); <span class="hljs-comment">// 时</span><br>      hour = hour &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + hour : hour; <span class="hljs-comment">// 如果只有一位，则前面补零</span><br>      <span class="hljs-keyword">let</span> minute = date.<span class="hljs-title function_">getMinutes</span>(); <span class="hljs-comment">// 分</span><br>      minute = minute &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + minute : minute; <span class="hljs-comment">// 如果只有一位，则前面补零</span><br>      <span class="hljs-keyword">let</span> second = date.<span class="hljs-title function_">getSeconds</span>(); <span class="hljs-comment">// 秒</span><br>      second = second &lt; <span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span> + second : second; <span class="hljs-comment">// 如果只有一位，则前面补零</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">nowDate</span> = <span class="hljs-string">`<span class="hljs-subst">$&#123;year&#125;</span>/<span class="hljs-subst">$&#123;month&#125;</span>/<span class="hljs-subst">$&#123;day&#125;</span> <span class="hljs-subst">$&#123;hour&#125;</span>:<span class="hljs-subst">$&#123;minute&#125;</span>:<span class="hljs-subst">$&#123;second&#125;</span> <span class="hljs-subst">$&#123;weekArr[week]&#125;</span>`</span>;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">currentTime</span>();<br>  &#125;,<br>  <span class="hljs-comment">// 销毁定时器</span><br>  <span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">formatDate</span>) &#123;<br>      <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">formatDate</span>); <span class="hljs-comment">// 在Vue实例销毁前，清除时间定时器</span><br>    &#125;<br>  &#125;<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>法二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span>&#123;<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">return</span>&#123;<br>        <span class="hljs-attr">date</span>:<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()<br>      &#125;<br>    &#125;,<br>    <span class="hljs-attr">methods</span>:&#123;<br>      <span class="hljs-title function_">dateFormat</span>(<span class="hljs-params">time</span>) &#123;<br>          <span class="hljs-keyword">var</span> date=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>          <span class="hljs-keyword">var</span> year=date.<span class="hljs-title function_">getFullYear</span>();<br>          <span class="hljs-comment">/* 在日期格式中，月份是从0开始的，因此要加0</span><br><span class="hljs-comment">          * 使用三元表达式在小于10的前面加0，以达到格式统一  如 09:11:05</span><br><span class="hljs-comment">          * */</span><br>          <span class="hljs-keyword">var</span> month= date.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-number">1</span>&lt;<span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span>+(date.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-number">1</span>) : date.<span class="hljs-title function_">getMonth</span>()+<span class="hljs-number">1</span>;<br>          <span class="hljs-keyword">var</span> day=date.<span class="hljs-title function_">getDate</span>()&lt;<span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span>+date.<span class="hljs-title function_">getDate</span>() : date.<span class="hljs-title function_">getDate</span>();<br>          <span class="hljs-keyword">var</span> hours=date.<span class="hljs-title function_">getHours</span>()&lt;<span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span>+date.<span class="hljs-title function_">getHours</span>() : date.<span class="hljs-title function_">getHours</span>();<br>          <span class="hljs-keyword">var</span> minutes=date.<span class="hljs-title function_">getMinutes</span>()&lt;<span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span>+date.<span class="hljs-title function_">getMinutes</span>() : date.<span class="hljs-title function_">getMinutes</span>();<br>          <span class="hljs-keyword">var</span> seconds=date.<span class="hljs-title function_">getSeconds</span>()&lt;<span class="hljs-number">10</span> ? <span class="hljs-string">&quot;0&quot;</span>+date.<span class="hljs-title function_">getSeconds</span>() : date.<span class="hljs-title function_">getSeconds</span>();<br>          <span class="hljs-comment">// 拼接</span><br>          <span class="hljs-keyword">return</span> year+<span class="hljs-string">&quot;-&quot;</span>+month+<span class="hljs-string">&quot;-&quot;</span>+day+<span class="hljs-string">&quot; &quot;</span>+hours+<span class="hljs-string">&quot;:&quot;</span>+minutes+<span class="hljs-string">&quot;:&quot;</span>+seconds;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>          <span class="hljs-comment">//显示当前日期时间</span><br>          <span class="hljs-keyword">let</span> _this = <span class="hljs-variable language_">this</span><span class="hljs-comment">// 声明一个变量指向Vue实例this，保证作用域一致</span><br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>           _this.<span class="hljs-property">date</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <span class="hljs-comment">// 修改数据date</span><br>           &#125;, <span class="hljs-number">1000</span>)<br>       &#125;,<br>      <span class="hljs-title function_">beforeDestroy</span>(<span class="hljs-params"></span>) &#123;<br>       <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>) &#123;<br>        <span class="hljs-built_in">clearInterval</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span>); <span class="hljs-comment">// 在Vue实例销毁前，清除我们的定时器</span><br>      &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;div&gt;&#123;&#123;<span class="hljs-title function_">dateFormat</span>(date)&#125;&#125;&lt;/div&gt;<br></code></pre></td></tr></table></figure><p><strong>天气</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getWeather</span>();<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">timer</span> = <span class="hljs-built_in">setInterval</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getWeather</span>();<br>  &#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>)<br>&#125;,<br><span class="hljs-attr">methods</span>: &#123;<br>  <span class="hljs-title function_">getWeather</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 第三方天气api接口</span><br>    axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://www.tianqiapi.com/api/&#x27;</span>, &#123;<br>      <span class="hljs-attr">params</span>: &#123;<br>        <span class="hljs-attr">appid</span>: <span class="hljs-string">&#x27;26148275&#x27;</span>,<br>        <span class="hljs-attr">appsecret</span>: <span class="hljs-string">&#x27;2id6H48Y&#x27;</span>,<br>        <span class="hljs-attr">version</span>: <span class="hljs-string">&#x27;v6&#x27;</span><br>      &#125;<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>) &#123;<br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">wea_img</span> == <span class="hljs-string">&#x27;xue&#x27;</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgSrc</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../assets/img/brand/xue.png&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">wea_img</span> == <span class="hljs-string">&#x27;yin&#x27;</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgSrc</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../assets/img/brand/yin.png&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">wea_img</span> == <span class="hljs-string">&#x27;yu&#x27;</span> || res.<span class="hljs-property">data</span>.<span class="hljs-property">wea_img</span> == <span class="hljs-string">&#x27;bingbao&#x27;</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgSrc</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../assets/img/brand/yu.png&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">wea_img</span> == <span class="hljs-string">&#x27;yun&#x27;</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgSrc</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../assets/img/brand/yun.png&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">wea_img</span> == <span class="hljs-string">&#x27;wu&#x27;</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgSrc</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../assets/img/brand/wu.png&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">wea_img</span> == <span class="hljs-string">&#x27;shachen&#x27;</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgSrc</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../assets/img/brand/shachen.png&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.<span class="hljs-property">data</span>.<span class="hljs-property">wea_img</span> == <span class="hljs-string">&#x27;lei&#x27;</span>) &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgSrc</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../assets/img/brand/lei.png&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">imgSrc</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../assets/img/brand/qing.png&#x27;</span>);<br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">weatcherData</span> = res.<span class="hljs-property">data</span>;<br>      &#125;<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4、下拉框的选项触发事件"><a href="#4、下拉框的选项触发事件" class="headerlink" title="4、下拉框的选项触发事件"></a>4、下拉框的选项触发事件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;el-form-item&gt;<br>    &lt;span&gt;病&amp;nbsp;&amp;nbsp;房&amp;nbsp;&amp;nbsp;号&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>    &lt;el-select v-model=&quot;patientForm.wardId&quot; placeholder=&quot;请选择&quot;&gt;<br>        &lt;el-option<br>                   v-for=&quot;item in bedInfo&quot;<br>                   :key=&quot;item&quot;<br>                   :label=&quot;item&quot;<br>                   :value=&quot;item&quot;<br>                   @click.native=&quot;getBedList()&quot;<br>                   &gt;<br>        &lt;/el-option&gt;<br>    &lt;/el-select&gt;<br>&lt;/el-form-item&gt;<br></code></pre></td></tr></table></figure><blockquote><p> 给vue组件绑定事件时候，必须加上native ，否则会认为监听的是来自Item组件自定义的事件。</p><p> 例子：如果使用router-link标签，加上@click事件，绑定的事件会无效因为：router-link的作用是单纯的路由跳转，会阻止click事件，你可以试试只用click不用native,事件是不会触发的。此时加上.native，才会触发事件。</p><p> &#x3D;&#x3D;这里也用到了用v-for动态生成&#x3D;&#x3D;</p></blockquote><h3 id="5、显示已有值，但可以修改"><a href="#5、显示已有值，但可以修改" class="headerlink" title="5、显示已有值，但可以修改"></a>5、显示已有值，但可以修改</h3><blockquote><p>之前在别的组件里试过很多次，为了让用户每次提交时不用修改所有值，但发现el-input这个东西会让v-model失效所以不行，但后来在写个人信息修改的时候又成了，记录在这里：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div&gt;<br>    &lt;el-card class=&quot;box-card&quot;&gt;<br>      &lt;el-form ref=&quot;personalForm&quot; :model=&quot;personalForm&quot;&gt;<br>        &lt;el-form-item&gt;<br>          &lt;span&gt;姓&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;名&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>          &lt;el-input v-model=&quot;personalForm.name&quot; style=&quot;width: 50%;&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;span&gt;性&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;别&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>          &lt;el-radio-group v-model=&quot;personalForm.sex&quot;&gt;<br>            &lt;el-radio label=&quot;男&quot;&gt;&lt;/el-radio&gt;<br>            &lt;el-radio label=&quot;女&quot;&gt;&lt;/el-radio&gt;<br>          &lt;/el-radio-group&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;span&gt;身份证号&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>          &lt;el-input v-model=&quot;personalForm.idCard&quot; style=&quot;width: 50%;&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;span&gt;年&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;龄&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>          &lt;el-input-number v-model=&quot;personalForm.age&quot; @change=&quot;handleChange&quot; :min=&quot;1&quot; :max=&quot;110&quot; label=&quot;描述文字&quot;&gt;&lt;/el-input-number&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;span&gt;生&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;日&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>          &lt;el-date-picker v-model=&quot;personalForm.birth&quot; type=&quot;date&quot; placeholder=&quot;选择日期&quot;&gt;&lt;/el-date-picker&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;span&gt;婚&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;姻&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>          &lt;el-radio-group v-model=&quot;personalForm.marriage&quot;&gt;<br>            &lt;el-radio label=&quot;未婚&quot;&gt;&lt;/el-radio&gt;<br>            &lt;el-radio label=&quot;已婚&quot;&gt;&lt;/el-radio&gt;<br>          &lt;/el-radio-group&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-form-item&gt;<br>          &lt;span&gt;家庭住址&lt;/span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;<br>          &lt;el-input v-model=&quot;personalForm.address&quot; style=&quot;width: 50%;&quot;&gt;&lt;/el-input&gt;<br>        &lt;/el-form-item&gt;<br>        &lt;el-button type=&quot;primary&quot; @click=&quot;updatePatient()&quot; class=&quot;button&quot;&gt;提交&lt;/el-button&gt;<br>      &lt;/el-form&gt;<br>    &lt;/el-card&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>import &#123;getPatientInfo, updatePatient&#125; from &#x27;@/api/patient&#x27;<br>import &#123;getCurrent&#125; from &#x27;@/api/login&#x27;<br><br>export default &#123;<br>  name: &#x27;PersonalInfo&#x27;,<br>  data()&#123;<br>    return&#123;<br>      updateInfo:[],<br>      personalForm: &#123;<br>        name: &#x27;&#x27;,<br>        sex: &#x27;&#x27;,<br>        idCard: &#x27;&#x27;,<br>        age: &#x27;&#x27;,<br>        birth: &#x27;&#x27;,<br>        telephone: &#x27;&#x27;,<br>        marriage: &#x27;&#x27;,<br>        address: &#x27;&#x27;<br>      &#125;,<br>      username: &#x27;&#x27;,<br>      id: &#x27;&#x27;,<br>    &#125;<br>  &#125;,<br>  mounted() &#123;<br>    this.getCurrent()<br>  &#125;,<br>  methods: &#123;<br>    handleChange(value) &#123;<br>      console.log(value);<br>    &#125;,<br>    getCurrent() &#123;<br>      getCurrent().then((res) =&gt; &#123;<br>        this.username = res.username<br>        getPatientInfo(res.id).then((res) =&gt; &#123;<br>          this.personalForm = res<br>        &#125;)<br>      &#125;)<br>    &#125;,<br>    updatePatient() &#123;<br>      console.log(&#x27;start&#x27;)<br>      getCurrent().then((res) =&gt; &#123;<br>        this.personalForm.telephone = res.id<br>        updatePatient(this.personalForm)<br>        this.$notify(&#123;<br>          title: &#x27;提示信息&#x27;,<br>          message: &#x27;更新成功&#x27;,<br>          type: &#x27;success&#x27;<br>        &#125;)<br>      &#125;)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br><br>&lt;style scoped&gt;<br>.box-card&#123;<br>  width: 60%;<br>  margin-left: 10%;<br>  margin-top: 5%;<br>&#125;<br>.button&#123;<br>  margin-left: 22%;<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><h3 id="6、过滤重复值"><a href="#6、过滤重复值" class="headerlink" title="6、过滤重复值"></a>6、过滤重复值</h3><p>这个如果在sql语句里写只需要一句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;selectAllInIdle&quot; resultType<span class="hljs-operator">=</span>&quot;java.lang.Integer&quot;<span class="hljs-operator">&gt;</span><br>    <span class="hljs-keyword">select</span> <span class="hljs-keyword">DISTINCT</span> bed_info.wardId <span class="hljs-keyword">from</span> bed_info <span class="hljs-keyword">where</span> flag<span class="hljs-operator">=</span>&quot;空闲&quot;<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>前端也能做：</p><p>1、数组的当前项和下一项比较，如果两者相同，删除其一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">arr.<span class="hljs-title function_">sort</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(arr[i] == arr[i+<span class="hljs-number">1</span>])&#123;<br>        arr.<span class="hljs-title function_">splice</span>(i,<span class="hljs-number">1</span>)<br>        i--<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr)<br></code></pre></td></tr></table></figure><p>2、利用对象的key是唯一的进行操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> json = &#123;&#125;;<br><span class="hljs-keyword">var</span> newArr = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(!json[arr[i]])&#123;<br>        json[arr[i]] = <span class="hljs-literal">true</span>;<br>        newArr.<span class="hljs-title function_">push</span>(arr[i]);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br></code></pre></td></tr></table></figure><p>3、利用indexOf操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> newArr = [];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(newArr.<span class="hljs-title function_">indexOf</span>(arr[i]) == -<span class="hljs-number">1</span>)&#123;<br>        newArr.<span class="hljs-title function_">push</span>(arr[i]);<br>    &#125;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr);<br></code></pre></td></tr></table></figure><p>另附：&#x3D;&#x3D;vue处理数组的几种方法&#x3D;&#x3D;</p><p><strong>数组追加</strong></p><p>项目里的写法是：<code>arr = arr.cancat(res[i])</code></p><p>写法二：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">push</span>(element1[, ...[, elementN]])<br><span class="hljs-keyword">const</span> array = []<br><br>array.<span class="hljs-title function_">push</span>(<span class="hljs-number">1</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array) <span class="hljs-comment">//=&gt; [1]</span><br><br>array.<span class="hljs-title function_">push</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array) <span class="hljs-comment">//=&gt; [1, 2, 3]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array.<span class="hljs-property">length</span>) <span class="hljs-comment">//=&gt; 3</span><br></code></pre></td></tr></table></figure><p><strong>首端添加</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">unshift</span>(element1[, ...[, elementN]])<br><span class="hljs-keyword">const</span> array = [ <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ]<br><br>array.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array) <span class="hljs-comment">//=&gt; [3, 4, 5]</span><br><br>array.<span class="hljs-title function_">unshift</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array) <span class="hljs-comment">//=&gt; [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><p><strong>插入到中间某位置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">splice</span>(start, deleteCount, element1[, ...[, elementN]])<br><span class="hljs-string">`第二个参数是删除若干个元素，设置0为不删除任何元素`</span><br><span class="hljs-keyword">const</span> array = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span> ]<br><br>array.<span class="hljs-title function_">splice</span>(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array) <span class="hljs-comment">//=&gt; [1, 2, 3, 6, 7]</span><br><br>array.<span class="hljs-title function_">splice</span>(<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array) <span class="hljs-comment">//=&gt; [1, 2, 3, 4, 5, 6, 7]</span><br></code></pre></td></tr></table></figure><p><strong>删除某位置元素</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">splice</span>(start, deleteCount, element1[, ...[, elementN]])<br><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br>array.<span class="hljs-title function_">splice</span>(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array) <span class="hljs-comment">//=&gt; [1, 2, 3, 4, 5]</span><br></code></pre></td></tr></table></figure><p><strong>替换数组某元素</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-number">1.</span><br><span class="hljs-keyword">const</span> array = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ]<br><br>array[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array) <span class="hljs-comment">//=&gt; [10, 2, 3, 4, 5]</span><br><br><span class="hljs-number">2.</span><br><span class="hljs-keyword">const</span> array = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ]<br>array.<span class="hljs-title function_">splice</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(array) <span class="hljs-comment">//=&gt; [ 1, 6, 3, 4, 5 ]</span><br><br><span class="hljs-comment">//splice(inde,howmany,item)参数 描述</span><br><span class="hljs-comment">//index   必需。规定从何处添加/删除元素。该参数是开始插入和（或）删除的数组元素的下标，必须是数字。</span><br><span class="hljs-comment">//howmany 必需。规定应该删除多少元素。必须是数字，但可以是 &quot;0&quot;。如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。</span><br><span class="hljs-comment">//item，要添加到数组的新元素</span><br></code></pre></td></tr></table></figure><p><strong>过滤器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">array.<span class="hljs-title function_">filter</span>(fn)<br><span class="hljs-keyword">const</span> array = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span> ]<br><span class="hljs-keyword">const</span> evenNumbers = array.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span><br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(evenNumbers) <span class="hljs-comment">//=&gt; [2, 4, 6, 8]</span><br></code></pre></td></tr></table></figure><p><strong>数据转换</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ]<br><br><span class="hljs-keyword">const</span> addedArray = array.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>) &#123;<br>  <span class="hljs-keyword">return</span> x + <span class="hljs-number">2</span><br>&#125;)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(addedArray) <span class="hljs-comment">//=&gt; [3,4,5,6,7]</span><br></code></pre></td></tr></table></figure><p><strong>聚合函数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> array = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]<br><br><span class="hljs-number">1.</span><br>array.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">left,right</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> left + right<br>&#125;)<br><br><span class="hljs-string">`针对每次所需要用到的聚合情况做些封装`</span><br><span class="hljs-keyword">const</span> arrayUtils = &#123;<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">array</span>) &#123;<br>    <span class="hljs-keyword">return</span>  array.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">left,right</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> letf + right<br>    &#125;)<br>  &#125;<br><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">multi</span>(<span class="hljs-params">array</span>) &#123;<br>    <span class="hljs-keyword">return</span> array.<span class="hljs-title function_">reduce</span>(<span class="hljs-function">(<span class="hljs-params">left,right</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> left * right<br>    &#125;)<br>  &#125;<br>&#125; <br><br><span class="hljs-string">`或者更为抽象的方式，涉及一些函数式编程的概念`</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">reduceFn</span>(<span class="hljs-params">fn</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">array</span>) &#123;<br>    <span class="hljs-keyword">return</span> array.<span class="hljs-title function_">reduce</span>(fn)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>判断两个数组中一个是否完全包含另一个</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">isInclude (aa, bb) &#123;<br>            <span class="hljs-keyword">return</span> aa.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">return</span> bb.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">sub</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">return</span> sub === item;<br>                &#125;);<br>            &#125;);<br>        &#125;,<br></code></pre></td></tr></table></figure><p><strong>数组去重，返回新数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">isInclude (aa, bb) &#123;<br>            <span class="hljs-keyword">return</span> aa.<span class="hljs-title function_">every</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>                <span class="hljs-keyword">return</span> bb.<span class="hljs-title function_">some</span>(<span class="hljs-function">(<span class="hljs-params">sub</span>) =&gt;</span> &#123;<br>                    <span class="hljs-keyword">return</span> sub === item;<br>                &#125;);<br>            &#125;);<br>        &#125;,<br></code></pre></td></tr></table></figure><h3 id="7、根据身份证号计算年龄sql"><a href="#7、根据身份证号计算年龄sql" class="headerlink" title="7、根据身份证号计算年龄sql"></a>7、根据身份证号计算年龄sql</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id,<br>idCard,<br>(<span class="hljs-built_in">substring</span>(now(),<span class="hljs-number">1</span>,<span class="hljs-number">4</span>)<span class="hljs-operator">-</span><span class="hljs-built_in">substring</span>(idCard,<span class="hljs-number">7</span>,<span class="hljs-number">4</span>))<span class="hljs-operator">-</span>(<span class="hljs-built_in">substring</span>(idCard,<span class="hljs-number">11</span>,<span class="hljs-number">4</span>)<span class="hljs-operator">-</span>date_format(now(),<span class="hljs-string">&#x27;%m%d&#x27;</span>)<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> age<br><span class="hljs-keyword">from</span> patient_info<br></code></pre></td></tr></table></figure><h3 id="8、给提示信息"><a href="#8、给提示信息" class="headerlink" title="8、给提示信息"></a>8、给提示信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.$notify(&#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;提示信息&#x27;</span>,<br>                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;账号或密码错误&#x27;</span>,<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;error&#x27;</span><br>              &#125;)<br><br><span class="hljs-variable language_">this</span>.$notify(&#123;<br>                <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;提示信息&#x27;</span>,<br>                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span>,<br>                <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;success&#x27;</span><br>              &#125;)<br></code></pre></td></tr></table></figure><h3 id="9、input框的一些属性"><a href="#9、input框的一些属性" class="headerlink" title="9、input框的一些属性"></a>9、input框的一些属性</h3><p>9.1 使用value可设置默认值</p><p>9.2 使用<code>@keyup.enter.native=&quot;search&quot;</code>可以敲回车调用方法</p><p>9.3 你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。<code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p><p>9.4 <code>placeholder=&quot;输入关键字搜索&quot;</code>默认值</p><h3 id="10、前端日期传给后端出现json格式错误"><a href="#10、前端日期传给后端出现json格式错误" class="headerlink" title="10、前端日期传给后端出现json格式错误"></a>10、前端日期传给后端出现json格式错误</h3><p>在实体类里加注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.xbb.entity;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.springframework.format.annotation.DateTimeFormat;<br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> Long id;<span class="hljs-comment">//自增主键</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;, timezone = &quot;GMT+8&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<span class="hljs-comment">//订单创建时间</span><br>    <span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;, timezone = &quot;GMT+8&quot;)</span><br>    <span class="hljs-keyword">private</span> Date orderDay;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>大致就想到这些，可能再有就是一些小细节，想说完全不太可能，总的来说还是收获颇丰的。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
      <tag>springboot</tag>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法设计</title>
    <link href="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/"/>
    <url>/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h1><p><strong>教学内容</strong></p><ul><li><p>NP难问题的近似算法：NP难问题没有多项式时间精确算法，除非P&#x3D;NP，如何在多项式时间内寻找近似最优解。</p></li><li><p>在线算法：输入缺乏先验，随着时间的推移分别在线到达。如何设计算法，使性能和事先拥有全部信息的算法相近。</p></li><li><p>流式算法：解决在严重存储限制下的大型数据集上的问题，例如在高速网络环境中，</p></li><li><p>博弈论算法：输入由许多不同利益不同的参与者控制，</p></li></ul><p><strong>课程目标</strong></p><ul><li><p>巩固利用计算思维求解复杂问题的能力，掌握定量的问题分析、设计和程序实现的方法。</p></li><li><p>掌握基本的算法实现技能，进一步学习掌握算法开发方法。</p></li><li><p>掌握从具体问题出发独立查阅各种途径的资料来分析解决问题的能力。</p></li><li><p>掌握分析和建立计算机领域的问题模型的能力， 提高按照规范编写程序，培养良好的程序设计习惯。</p></li></ul><p><strong>科学范式</strong></p><ul><li>实验归纳：人类早期的科学实践，以记录描述自然现象为主要特征，称为“实验科学”（第一范式） </li><li>模型推演：科学家尝试简化模型，去掉干扰，留下关键因素，通过演算进行归纳总结（第二范式） </li><li>仿真模拟：随着计算机仿真越来越多成熟，可以逐渐取代实验，成为科研的常规方法（第三范式） </li><li>数据密集型科学发现：随着数据的爆炸性增长，计算机将不仅仅能做模拟仿真，还能进行分析总结，得到理论（第四范式）</li></ul><h3 id="1、三柱-x2F-四柱汉诺塔-x2F-动态规划"><a href="#1、三柱-x2F-四柱汉诺塔-x2F-动态规划" class="headerlink" title="1、三柱&#x2F;四柱汉诺塔&#x2F;动态规划"></a>1、三柱&#x2F;四柱汉诺塔&#x2F;动态规划</h3><h4 id="递归分析"><a href="#递归分析" class="headerlink" title="递归分析"></a>递归分析</h4><p>用递归树可视化递归过程</p><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/2022-04-14_204251.png" alt="2022-04-14_204251"></p><p>分治算法的主定理：$T(n) &#x3D; aT(\frac n b +cn^k)$</p><ul><li>若$a &gt; b^k$，则$T(n)&#x3D;O(n^{log_ba})$</li><li>若$a &#x3D; b^k$，则$T(n) &#x3D; O(n^klog_bn)$</li><li>若$a &lt; b^k$，则$T(n) &#x3D; O(n^k)$</li></ul><h4 id="Tower-of-Hanoi"><a href="#Tower-of-Hanoi" class="headerlink" title="Tower of Hanoi"></a>Tower of Hanoi</h4><p>1883年由爱德华·卢卡斯提出</p><p>问题描述：由三个木桩和一组n个直径不同的圆盘组成，这些圆盘可以堆叠在木桩上。初始情况是圆盘按大小顺序堆放在一个木桩上，最大的在底部。规则为允许圆盘一次从一个木桩移动到另一个，大盘不能放在小盘的顶部。目标是以最少的移动次数将所有圆盘转移到另一个目标木桩上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输出移动方式，用num存储移动次数，暴力解</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hanoi3</span>(<span class="hljs-params">n,A,B,C</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    三柱汉诺塔</span><br><span class="hljs-string">    A:初始柱 B:过渡柱 C:目标柱</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">global</span> num<br>    num += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;disk[<span class="hljs-subst">&#123;n&#125;</span>]: from <span class="hljs-subst">&#123;A&#125;</span> to <span class="hljs-subst">&#123;C&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        hanoi3(n-<span class="hljs-number">1</span>, A, C, B)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;disk[<span class="hljs-subst">&#123;n&#125;</span>]: from <span class="hljs-subst">&#123;A&#125;</span> to <span class="hljs-subst">&#123;B&#125;</span>&#x27;</span>)<br>        hanoi3(n-<span class="hljs-number">1</span>, B, A, C)<br><br><span class="hljs-comment">#测试</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-string">&#x27;主程序&#x27;</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># num = 0</span><br>        n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入盘数：&#x27;</span>))  <span class="hljs-comment"># 盘数</span><br>        hanoi3(n, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>)<br>        <span class="hljs-built_in">print</span>(num)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; ---END--- &#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="四柱汉诺塔"><a href="#四柱汉诺塔" class="headerlink" title="四柱汉诺塔"></a>四柱汉诺塔</h4><p>当我们有大于3根柱子的时候，如何移动才能最优？</p><p>Frame-Stewart算法</p><ul><li>使用4根柱子将最上面的k个盘片移到一个临时柱子</li><li>使用剩余的3根柱子将剩余的盘片移到目标柱子</li><li>使用4根柱子将k个盘片从临时柱子移到目标柱子</li></ul><p>优化问题：如何选择最优的k？</p><ul><li>动态规划：存在重叠子问题</li><li>是否存在解析解？</li></ul><h3 id="2、四柱汉诺塔的最优解法-x2F-高楼扔鸡蛋"><a href="#2、四柱汉诺塔的最优解法-x2F-高楼扔鸡蛋" class="headerlink" title="2、四柱汉诺塔的最优解法&#x2F;高楼扔鸡蛋"></a>2、四柱汉诺塔的最优解法&#x2F;高楼扔鸡蛋</h3><h4 id="解四柱汉诺塔"><a href="#解四柱汉诺塔" class="headerlink" title="解四柱汉诺塔"></a>解四柱汉诺塔</h4><p>公式：$M_4(n)&#x3D;2M_4(n-k)+M_3(k)$</p><p>初始条件：$M_4(1)&#x3D;1$ and $M_3(k)&#x3D;2^k-1$</p><blockquote><p>解释：先用四柱的方式将上<code>n-k</code>个盘子放在某过渡柱上，再用三柱的方式将下<code>k</code>个盘子放在目标柱上，再用四柱的方式将过渡柱上的<code>n-k</code>个盘子放在目标柱上</p><p>$M_4(n)$：以四柱的方式放n个盘子最少需要多少次</p><p><code>n</code>：需要放的盘子总数</p><p><code>k</code>：以三柱的方式放多少个盘子</p></blockquote><p>引出问题：<code>k</code>如何取值？</p><p>暴力：对于输入k，遍历k&#x3D;1…n的结果，取遍历出的最小值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hanoi4</span>(<span class="hljs-params">n</span>):<br>    m = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>        tmp = <span class="hljs-number">2</span>*hanoi4(n-i) + math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,i)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> tmp &lt; m:<br>            m = tmp<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(m)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-string">&#x27;主程序&#x27;</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入盘数：&#x27;</span>))  <span class="hljs-comment"># 盘数</span><br>        <span class="hljs-built_in">print</span>(hanoi4(n))<br></code></pre></td></tr></table></figure><p>优化方式：用一个数组来存储计算过的$M_4(n-k)$的值，遍历时优先查表</p><table><thead><tr><th>$n$</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th></tr></thead><tbody><tr><td>$M_3$</td><td>1</td><td>3</td><td>7</td><td>15</td><td>31</td><td>63</td><td>127</td><td>255</td><td>511</td><td>1023</td></tr><tr><td>$M_4$</td><td>1</td><td>3</td><td>5</td><td>9</td><td>13</td><td>17</td><td>25</td><td>33</td><td>41</td><td>49</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 带备忘录的解法</span><br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hanoi4_memo</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">global</span> memo<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> memo[n] != <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>): <span class="hljs-keyword">return</span> memo[n]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>        tmp = <span class="hljs-number">2</span>*hanoi4_memo(n-i) + math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,i) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> tmp &lt; memo[n]:<br>            memo[n] = <span class="hljs-built_in">int</span>(tmp)<br>    <span class="hljs-keyword">return</span> memo[n]<br><br><span class="hljs-comment"># 测试</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入盘数：&#x27;</span>))  <span class="hljs-comment"># 盘数</span><br>        memo = [<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>)]*(n+<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(hanoi4_memo(n))<br></code></pre></td></tr></table></figure><p>最优解：</p><p>三角形数：$t_k &#x3D; \frac{k(k+1)}{2}$ 也即<code>1,3,6,10,15,21</code></p><table><thead><tr><th>$k$</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>$t_k$</td><td>1</td><td>3</td><td>6</td><td>10</td><td>15</td><td>21</td><td>28</td></tr></tbody></table><p>令$M(t_k) &#x3D; 2M(t_{k-1}) + 2^k-1$ ，初始条件$M(1)&#x3D;1$</p><blockquote><p>Frame和Stewart证明：</p><p>若$n&#x3D;t_k$，最优选择就是k；</p><p>当$t_{k-1} &lt; n &lt; t_k$时，<code>k-1</code>和<code>k</code>都是最优解。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># dp数组的迭代解法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hanoi4_dp</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-comment"># 得到三柱汉诺塔的最少次数列表</span><br>    hanoi3 = [<span class="hljs-number">0</span>]*n<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        hanoi3[i] = <span class="hljs-built_in">int</span>(math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,i)-<span class="hljs-number">1</span>)<br>    dp = [<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 计算四柱汉诺塔</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 得到使用三柱方法的柱数k</span><br>        k=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,i):<br>            <span class="hljs-keyword">if</span> i &lt;= j*(j+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>: <br>                k = j<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 算四柱的dp数组</span><br>        dp[i]=<span class="hljs-number">2</span>*dp[i-k]+hanoi3[k]<br>    <span class="hljs-keyword">return</span> dp[n]<br></code></pre></td></tr></table></figure><h4 id="高楼扔鸡蛋"><a href="#高楼扔鸡蛋" class="headerlink" title="高楼扔鸡蛋"></a>高楼扔鸡蛋</h4><p>问题描述：n层楼，k个鸡蛋，算最少的尝试次数，找到鸡蛋恰好摔碎的那层楼（以下都不碎，以上都会碎）</p><p>注：n,k至少为1，最坏情况：鸡蛋破碎一定发生在搜索空间穷尽时</p><p>条件：n层楼、k个鸡蛋</p><p>选择：去哪层楼扔</p><p>条件发生变化：在第i层扔下鸡蛋后</p><p>鸡蛋碎了：<code>k=k-1</code>，搜索区间<code>[1,i-1]</code>共<code>i-1</code>层</p><p>鸡蛋没碎：<code>k</code>不变，搜索区间<code>[i+1,n]</code>共<code>n-i</code>层</p><p>分别遍历两种可能，然后选择次数更多的一个（较差的情况下），加上初始扔的一次，就是初始在i层楼扔下鸡蛋需要的尝试次数。</p><p>用i遍历n，找出初始在每层楼需要的尝试次数，取最小值，即为所求次数。</p><blockquote><p>解题思路：</p><p>1、定义F(n,k)：n层楼，k个鸡蛋时，至少要扔几次鸡蛋</p><p>2、状态转移方程： $F(n,k)&#x3D;min_{1\le i\le n}(max(F(n-i,k),F(i-1,k-1))+1)$</p><p>3、base case： $F(0,x)&#x3D;0,F(x,1)&#x3D;x$</p></blockquote><p>暴力解法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># n:楼层数，k:鸡蛋数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">eggDrop</span>(<span class="hljs-params">n,k</span>):<br>    res = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>    <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> k==<span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> n<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        tmp = <span class="hljs-built_in">max</span>(eggDrop(n-i,k),eggDrop(i-<span class="hljs-number">1</span>,k-<span class="hljs-number">1</span>))+<span class="hljs-number">1</span><br>        res = <span class="hljs-built_in">min</span>(res,tmp)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-comment"># 测试</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        n,k=<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入楼层数和鸡蛋数，用逗号隔开：&quot;</span>))<br>        <span class="hljs-built_in">print</span>(eggDrop(n,k))<br></code></pre></td></tr></table></figure><p>优化：添加备忘录消除重叠子问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># n:楼层数，k:鸡蛋数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">superEggDrop</span>(<span class="hljs-params">n,k</span>):<br>    memo = <span class="hljs-built_in">dict</span>()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">n,k</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        <span class="hljs-comment"># base case</span><br>        <span class="hljs-keyword">if</span> k==<span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> n<br>        <span class="hljs-keyword">if</span> n==<span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 避免重复计算</span><br>        <span class="hljs-keyword">if</span> (n,k) <span class="hljs-keyword">in</span> memo:<br>            <span class="hljs-keyword">return</span> memo[(n,k)]<br>        res = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>        <span class="hljs-comment"># 穷举所有的可能</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>            res = <span class="hljs-built_in">min</span>(res, <span class="hljs-built_in">max</span>(dp(n-i,k),dp(i-<span class="hljs-number">1</span>,k-<span class="hljs-number">1</span>)) + <span class="hljs-number">1</span>)<br>        memo[(n,k)] = res<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">return</span> dp(n,k)<br></code></pre></td></tr></table></figure><p>优化：二分搜索代替线性搜索优化for循环</p><p>思路：<code>dp(n,k)</code>这个函数，当<code>k</code>固定时，是关于<code>n</code>单调递增的（鸡蛋数量固定时，楼层越多，需要的尝试次数越多），于是将<code>dp(n-i,k)</code>和<code>dp(i-1,k-1)</code>看做关于<code>i</code>的函数，所以<code>dp(n-i,k)</code>是关于<code>i</code>单调递减，<code>dp(i-1,k-1)</code>是关于<code>i</code>单调递增。</p><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/d2253affeade7b0d8c4128c5e193ab0.jpg" alt="d2253affeade7b0d8c4128c5e193ab0"></p><p>于是，问题便成了求二者的交点，可以用二分查找来寻找这个点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">superEggDrop2</span>(<span class="hljs-params">n,k</span>):<br>    memo = <span class="hljs-built_in">dict</span>()<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dp</span>(<span class="hljs-params">n,k</span>):<br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">1</span>: <span class="hljs-keyword">return</span> n<br>        <span class="hljs-keyword">if</span> (n,k) <span class="hljs-keyword">in</span> memo:<br>            <span class="hljs-keyword">return</span> memo[(n,k)]<br>        res = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>        <span class="hljs-comment"># 用二分代替线性搜索</span><br>        low, high = <span class="hljs-number">1</span>, n<br>        <span class="hljs-keyword">while</span> low &lt;= high:<br>            mid = (low + high) // <span class="hljs-number">2</span><br>            broken = dp(mid-<span class="hljs-number">1</span>,k-<span class="hljs-number">1</span>) <span class="hljs-comment"># 碎</span><br>            non_broken = dp(n-mid,k) <span class="hljs-comment"># 没碎</span><br>            <span class="hljs-comment"># res = min(max(碎，没碎) +1)</span><br>            <span class="hljs-keyword">if</span> broken &gt; non_broken:<br>                high = mid-<span class="hljs-number">1</span><br>                res = <span class="hljs-built_in">min</span>(res,broken+<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">else</span>:<br>                low = mid+<span class="hljs-number">1</span><br>                res = <span class="hljs-built_in">min</span>(res, non_broken+<span class="hljs-number">1</span>)<br>        memo[(n,k)] = res<br>        <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">return</span> dp(n,k)<br></code></pre></td></tr></table></figure><p>优化：重新定义状态转移</p><p>定义：k：鸡蛋数，m：最少扔鸡蛋次数，dp(k,m)：最高楼层数</p><p>鸡蛋碎了：测楼下</p><p>鸡蛋没碎：测楼上</p><p>总的楼层数 &#x3D; 楼上的楼层数 + 楼下的楼层数 + 1（当前这层楼）</p><p>状态转移方程：<code>dp[k][m] = dp[k][m-1] + dp[k-1][m-1] + 1</code></p><p><code>dp[k][m-1]</code>：楼上的楼层数</p><p><code>dp[k-1][m-1]</code>：楼下的楼层数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重新定义状态转移方程</span><br><span class="hljs-comment"># k:鸡蛋数 m:最少扔鸡蛋次数</span><br><span class="hljs-comment"># 函数返回结果: 最高楼层数</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">superEggDrop3</span>(<span class="hljs-params">k,m</span>):<br>    dp = np.zeros((k+<span class="hljs-number">1</span>, m+<span class="hljs-number">1</span>), dtype=<span class="hljs-built_in">int</span>)<br>    n = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> dp[k][m] &lt; m:<br>        n+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,k+<span class="hljs-number">1</span>):<br>            dp[i][n] = dp[i][n-<span class="hljs-number">1</span>] + dp[i-<span class="hljs-number">1</span>][n-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> dp[k][m]<br><br><span class="hljs-comment"># 测试</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        k,m=<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入鸡蛋数和最少扔鸡蛋次数，用逗号隔开：&quot;</span>))<br>        <span class="hljs-built_in">print</span>(superEggDrop3(k,m))<br>        <br><span class="hljs-comment"># 该方程一个10*9的dp数组如下</span><br>[[   <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>    <span class="hljs-number">0</span>]<br> [   <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">2</span>    <span class="hljs-number">3</span>    <span class="hljs-number">4</span>    <span class="hljs-number">5</span>    <span class="hljs-number">6</span>    <span class="hljs-number">7</span>    <span class="hljs-number">8</span>    <span class="hljs-number">9</span>   <span class="hljs-number">10</span>]<br> [   <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">6</span>   <span class="hljs-number">10</span>   <span class="hljs-number">15</span>   <span class="hljs-number">21</span>   <span class="hljs-number">28</span>   <span class="hljs-number">36</span>   <span class="hljs-number">45</span>   <span class="hljs-number">55</span>]<br> [   <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">7</span>   <span class="hljs-number">14</span>   <span class="hljs-number">25</span>   <span class="hljs-number">41</span>   <span class="hljs-number">63</span>   <span class="hljs-number">92</span>  <span class="hljs-number">129</span>  <span class="hljs-number">175</span>]<br> [   <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">7</span>   <span class="hljs-number">15</span>   <span class="hljs-number">30</span>   <span class="hljs-number">56</span>   <span class="hljs-number">98</span>  <span class="hljs-number">162</span>  <span class="hljs-number">255</span>  <span class="hljs-number">385</span>]<br> [   <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">7</span>   <span class="hljs-number">15</span>   <span class="hljs-number">31</span>   <span class="hljs-number">62</span>  <span class="hljs-number">119</span>  <span class="hljs-number">218</span>  <span class="hljs-number">381</span>  <span class="hljs-number">637</span>]<br> [   <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">7</span>   <span class="hljs-number">15</span>   <span class="hljs-number">31</span>   <span class="hljs-number">63</span>  <span class="hljs-number">126</span>  <span class="hljs-number">246</span>  <span class="hljs-number">465</span>  <span class="hljs-number">847</span>]<br> [   <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">7</span>   <span class="hljs-number">15</span>   <span class="hljs-number">31</span>   <span class="hljs-number">63</span>  <span class="hljs-number">127</span>  <span class="hljs-number">254</span>  <span class="hljs-number">501</span>  <span class="hljs-number">967</span>]<br> [   <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">7</span>   <span class="hljs-number">15</span>   <span class="hljs-number">31</span>   <span class="hljs-number">63</span>  <span class="hljs-number">127</span>  <span class="hljs-number">255</span>  <span class="hljs-number">510</span> <span class="hljs-number">1012</span>]<br> [   <span class="hljs-number">0</span>    <span class="hljs-number">1</span>    <span class="hljs-number">3</span>    <span class="hljs-number">7</span>   <span class="hljs-number">15</span>   <span class="hljs-number">31</span>   <span class="hljs-number">63</span>  <span class="hljs-number">127</span>  <span class="hljs-number">255</span>  <span class="hljs-number">511</span> <span class="hljs-number">1022</span>]]<br></code></pre></td></tr></table></figure><h4 id="思考题：最长上升子序列"><a href="#思考题：最长上升子序列" class="headerlink" title="思考题：最长上升子序列"></a>思考题：最长上升子序列</h4><p>问题描述：给定一个无序的整数数组，找到其中最长的上升子序列（不一定连续）的长度。</p><p>定义dp数组：<code>dp[i]</code>表示以<code>nums[i]</code>这个数结尾的最长递增子序列的长度。</p><p>根据这个定义，最终结果应为dp数组中的最大值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLIS</span>(<span class="hljs-params">nums</span>):<br>    dp = [<span class="hljs-number">1</span>] * <span class="hljs-built_in">len</span>(nums)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>            <span class="hljs-keyword">if</span> nums[i] &gt; nums[j]:<br>                dp[i] = <span class="hljs-built_in">max</span>(dp[i],dp[j]+<span class="hljs-number">1</span>)<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(dp)):<br>        res = <span class="hljs-built_in">max</span>(res,dp[i])<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-comment"># 测试</span><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        nums=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入序列：&quot;</span>)<br>        <span class="hljs-built_in">print</span>(lengthOfLIS(nums))<br></code></pre></td></tr></table></figure><h4 id="思考题：背包问题（组合优化）"><a href="#思考题：背包问题（组合优化）" class="headerlink" title="思考题：背包问题（组合优化）"></a>思考题：背包问题（组合优化）</h4><p>0-1背包</p><h3 id="3、马尔科夫链-x2F-最长上升子序列-x2F-背包问题-x2F-贪婪算法"><a href="#3、马尔科夫链-x2F-最长上升子序列-x2F-背包问题-x2F-贪婪算法" class="headerlink" title="3、马尔科夫链&#x2F;最长上升子序列&#x2F;背包问题&#x2F;贪婪算法"></a>3、马尔科夫链&#x2F;最长上升子序列&#x2F;背包问题&#x2F;贪婪算法</h3><h4 id="马尔科夫链"><a href="#马尔科夫链" class="headerlink" title="马尔科夫链"></a>马尔科夫链</h4><ul><li>以一维可数集为索引的离散随机变量：$X&#x3D;\left{X_n|n&gt;0\right}$</li><li>随机变量的取值为一个可数集（状态空间）的元素：$X &#x3D; s_i,s_i\in s$</li><li>满足马尔科夫性质：$p(X_{t+1} | X_t,…X_1) &#x3D; p(X_{t+1} | X_t)$</li></ul><h4 id="隐马尔科夫模型（HMM）"><a href="#隐马尔科夫模型（HMM）" class="headerlink" title="隐马尔科夫模型（HMM）"></a>隐马尔科夫模型（HMM）</h4><ul><li>状态不能直接观察，但是可以生成一个可以测量的输出对象</li><li>输出是一个依赖于状态的随机变量</li><li>应用：语音识别、自然语言处理</li><li>关键问题与算法<ul><li>评估问题：前向算法（给观测序列<code>O</code>，）</li><li>解码问题：Viterbi算法</li><li>学习问题：向前向后算法</li></ul></li></ul><p><strong>模型表达：2个状态集合和3个概率矩阵</strong></p><ol><li>隐含状态 $S$</li><li>可观测状态 $O$</li><li>初始状态概率矩阵 $\pi$</li><li>隐含状态转移概率矩阵 $A$</li><li>观测状态转移概率矩阵 $B$</li></ol><p>总结：一般的，可以用 $\lambda &#x3D; (A,B,\pi)$ 三元组来简洁的表示一个隐马尔科夫模型。 隐马尔可夫模型实际上是标准马尔可夫模型的扩展，添加了可观测状态集合和这些状态与隐含状态之间的概率关系。</p><blockquote><p>例：盒子模球实验</p><p>有三个盒子，编号分别为1号、2号和3号，每个盒子里有个数不等的黑球和白球：</p><ul><li>1号：黑球2个，白球8个</li><li>2号：黑球6个，白球4个</li><li>3号：黑球4个，白球6个</li></ul><p>据此可得<strong>观测概率矩阵</strong>：$$B&#x3D;\begin{pmatrix} 0.2 &amp; 0.8 \ 0.6 &amp; 0.4 \ 0.4 &amp; 0.6 \end{pmatrix}$$</p><p>实验过程：</p><p>每次随机出现一个盒子，然后从随机出现的盒子中随机摸一个球，记录下求得颜色，然后把球放回盒子。重复以上。</p><p>试验过程中，我们只能在每次摸出球后看到被摸出的球的颜色（可观测状态），但无法知道每次随机出现的盒子的编号（隐含状态）。</p><p>记录<strong>可观测状态</strong>：$O&#x3D;\left{黑，黑，白，白，白，黑，黑\right}$</p><p>假定第一次个盒子出现的概率分布为：1号0.3，2号0.5，3号0.2</p><p>可得<strong>初始状态概率矩阵：</strong> $\pi &#x3D; (0.3,0.5,0.2)^T$</p><p>提炼<strong>隐含状态转移概率矩阵：</strong> $ A &#x3D; \begin{bmatrix} 0.4 &amp; 0.4 &amp; 0.2 \ 0.3 &amp; 0.2 &amp; 0.5 \ 0.2 &amp; 0.6 &amp; 0.2 \end{bmatrix}$</p><blockquote><p>李姐状态转移矩阵：第一行：随机到1号后，再次随机，1号出现的概率是0.4，2号出现的概率是0.4，3号出现的概率是0.2。以此类推。</p></blockquote><p>参考：<a href="https://www.zhihu.com/question/19633865/answer/1635328825">https://www.zhihu.com/question/19633865/answer/1635328825</a></p></blockquote><p><strong>主要关注：viterbi算法</strong></p><ul><li>最大似然解码：给定观察到的信道输出，找到最有可能的输入。</li><li>广泛应用于通信系统中，用于解码由有限状态过程编码的数据序列</li><li>求解：$maxP(1|0,\theta)$</li></ul><h4 id="动态规划的要素"><a href="#动态规划的要素" class="headerlink" title="动态规划的要素"></a>动态规划的要素</h4><p>状态：需要保留的信息是什么？</p><p>状态转移：信息交换与更新的过程</p><p>权重与损失函数：局部评价指标、最终目标</p><p>优化过程：寻找最优解</p><h4 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h4><p>暴力：共$2^n$个子序列</p><p>老师讲的解法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">lengthOfLIS2</span>(<span class="hljs-params">nums</span>):<br>    dp = [<span class="hljs-number">1</span>] * <span class="hljs-built_in">len</span>(nums)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> nums[j] &gt; nums[i] <span class="hljs-keyword">and</span> dp[j] &lt; dp[i]+<span class="hljs-number">1</span>:<br>                dp[j] = dp[i] + <span class="hljs-number">1</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(dp)):<br>        <span class="hljs-keyword">if</span> dp[i] &gt; res:<br>            res = dp[i]<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><h4 id="背包问题：组合优化"><a href="#背包问题：组合优化" class="headerlink" title="背包问题：组合优化"></a>背包问题：组合优化</h4><p>问题描述：容量重量有限，求价值最大的方案</p><blockquote><p>Knapsack Problem是NP难问题，没有多项式时间解</p></blockquote><p><strong>0-1背包问题</strong></p><p><strong>问题描述：</strong></p><p>N件物品可放入背包，第i件物品的重量为w[i]，价值为v[i]。要求在总重量不超过上限W的情况下，装入背包的物品价值最大。</p><p>0-1决策：装或者不装</p><p>确定目标函数，指示函数d(i) &#x3D; {0,1}</p><p>$max_d \sum_{i&#x3D;1}^N d(i)V(i)$, subject to $\sum d(i)W(i) \leq W$</p><p>假设W，W(i)离散</p><p>已知条件：装了多少件物品，还可以装多重的东西</p><p>考虑的依据：不超过重量限制时，选择下一件物品使总价值最大</p><p><strong>解题思路：</strong></p><p>构建一个二维表<code>V[i][j]</code>：在重量限制<code>j</code>时，选择了<code>&#123;1,2，...，i&#125;</code>件物品的最大价值</p><p>表的上限<code>V[N][W]</code>：装<code>N</code>件物品，重量<code>W</code></p><p>分析状态转移：第<code>i</code>件物品要么装入背包，要么不装入背包</p><p>装入背包：<code>V[i][j] = V[i-1][j-W[i]] + v[i]</code></p><p>不装入背包：<code>V[i][j] = V[i-1][j]</code></p><p>决策依据：$V[i][j] &#x3D; max(V[i-1][j], V[i-1][j-W[i]] + v[i])$</p><p><strong>背包问题解的优化：</strong></p><p>伪多项式时间<code>O(NW)</code></p><p>进一步分析，不需要显式表示物品序号，可简化为一维表：</p><p><code>i</code>为不同的重量限制，<code>j</code>遍历每个物品</p><p>$V[i] &#x3D; max_j(V[i], V[i-w[j]]+v[j])$，其中，$V[W] &#x3D; 0$</p><blockquote><p><strong>一种解法（二维数组）</strong></p><p>&#x3D;&#x3D;step1：明确【状态】和【选择】&#x3D;&#x3D;</p><p>状态：【背包的容量】、【可选择的物品】</p><p>选择：【装进背包】、【不装进背包】</p><p>套框架：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;<span class="hljs-keyword">for</span> 状态<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> 状态<span class="hljs-number">1</span>的所有取值:<br>&gt;<span class="hljs-keyword">for</span> 状态<span class="hljs-number">2</span> <span class="hljs-keyword">in</span> 状态<span class="hljs-number">2</span>的所有取值:<br>&gt;<span class="hljs-keyword">for</span> ...<br>dp[状态<span class="hljs-number">1</span>][状态<span class="hljs-number">2</span>][...] = 择优(选择<span class="hljs-number">1</span>,选择<span class="hljs-number">2</span>,...)<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;step2：明确dp数组的定义&#x3D;&#x3D;</p><p>dp数组即描述问题局面的一个数组，上节明确了本题有两个状态，也就是说需要一个二维的dp数组，一维是可选择的物品，一维是背包的容量。</p><p>于是对dp数组定义：对于前<code>i</code>个物品，当前背包的容量为<code>w</code>，这种情况下可以装的最大价值是<code>dp[i][w]</code>。</p><p>根据这个定义，我们最终想求的答案就是<code>dp[N][W]</code>，base case为<code>dp[0][...] = dp[...][0] = 0</code>，因为没有物品或者背包没有空间时，能装的最大价值就是0。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;<span class="hljs-comment"># 细化框架</span><br>&gt;dp = np.zeros((N+<span class="hljs-number">1</span>, W+<span class="hljs-number">1</span>), dtype=<span class="hljs-built_in">int</span><br>&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1.</span>.N]:<br>&gt;<span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> [<span class="hljs-number">1.</span>.W]:<br>&gt;dp[i][w] = <span class="hljs-built_in">max</span>(<br> 把物品 i 装进背包,<br> 不把物品 i 装进背包<br>&gt;)<br>&gt;<span class="hljs-keyword">return</span> dp[N][W]<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;step3：根据【选择】，思考状态转移的逻辑&#x3D;&#x3D;</p><p>装入背包：<code>dp[i][W] = V[i-1][j-W[i-1]] + v[i-1]</code></p><p>不装入背包：<code>dp[i][W] = V[i-1][w]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;<span class="hljs-comment"># 细化代码</span><br>&gt;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1.</span>.N]:<br>&gt;<span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> [<span class="hljs-number">1.</span>.W]:<br>&gt;dp[i][w] = <span class="hljs-built_in">max</span>(<br> dp[i-<span class="hljs-number">1</span>][w],<br> dp[i-<span class="hljs-number">1</span>][w - wt[i-<span class="hljs-number">1</span>]] + val[i-<span class="hljs-number">1</span>]<br>&gt;)<br>&gt;<span class="hljs-keyword">return</span> dp[N][W]<br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;step4：写成代码，处理边界情况&#x3D;&#x3D;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;<span class="hljs-keyword">def</span> <span class="hljs-title function_">knapsack2</span>(<span class="hljs-params">W,N,weight,value</span>):<br>&gt;<span class="hljs-comment"># 初始化全为0</span><br>&gt;dp = np.zeros((N+<span class="hljs-number">1</span>,W+<span class="hljs-number">1</span>), dtype=<span class="hljs-built_in">int</span>)<br>&gt;<span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,N+<span class="hljs-number">1</span>):<br>  <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,W+<span class="hljs-number">1</span>):<br>      <span class="hljs-keyword">if</span> w &lt; weight[n-<span class="hljs-number">1</span>]:<br>          <span class="hljs-comment"># 装不下</span><br>          dp[n][w] = dp[n-<span class="hljs-number">1</span>][w]<br>      <span class="hljs-keyword">else</span>:<br>          <span class="hljs-comment"># 择优：装/不装</span><br>          dp[n][w] = <span class="hljs-built_in">max</span>(dp[n-<span class="hljs-number">1</span>][w-weight[n-<span class="hljs-number">1</span>]]+value[n-<span class="hljs-number">1</span>],dp[n-<span class="hljs-number">1</span>][w])<br>&gt;<span class="hljs-keyword">return</span> dp[N][W]<br></code></pre></td></tr></table></figure></blockquote><p>优化为一维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># W:背包能承受的重量 N:物品的数量 weight:每个物品的重量 value:每个物品的价值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">knapsack3</span>(<span class="hljs-params">W,N,weight,value</span>):<br>    dp = [<span class="hljs-number">0</span>]*(W+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,W+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(weight)):<br>            <span class="hljs-keyword">if</span> w &gt;= weight[i]:<br>                dp[w] = <span class="hljs-built_in">max</span>(dp[w],dp[w-weight[i]]+value[i])<br>        <span class="hljs-built_in">print</span>(dp)<br>    <span class="hljs-keyword">return</span> dp<br></code></pre></td></tr></table></figure><blockquote><p>写个小坑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 简化为一维数组</span><br><span class="hljs-comment"># W:背包能承受的重量 N:物品的数量 weight:每个物品的重量 value:每个物品的价值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">knapsack3</span>(<span class="hljs-params">W,N,weight,value</span>):<br> dp = [<span class="hljs-number">0</span>]*(W+<span class="hljs-number">1</span>)<br> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N):<br>     <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,W+<span class="hljs-number">1</span>):<br>         <span class="hljs-keyword">if</span> w &gt;= weight[i]:<br>             dp[w] = <span class="hljs-built_in">max</span>(dp[w],dp[w-weight[i]]+value[i])<br>     <span class="hljs-built_in">print</span>(dp)<br> <span class="hljs-keyword">return</span> dp<br><br> <span class="hljs-comment"># 另一种遍历</span><br> <span class="hljs-comment"># for w in range(1,W+1):</span><br>     <span class="hljs-comment"># for i in range(N):</span><br>     <span class="hljs-comment">#     if w &gt;= weight[i]:</span><br>     <span class="hljs-comment">#         dp[w] = max(dp[w],dp[w-weight[i]]+value[i])</span><br>     <span class="hljs-comment"># print(dp)</span><br><br><span class="hljs-comment"># 输入：10,6,[2,2,3,1,5,2],[2,3,1,5,4,3]</span><br><span class="hljs-comment"># 输出：[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]</span><br></code></pre></td></tr></table></figure><p>这里也是尝试写成一维数组，与上面方法不同的是从正向遍历，导致<code>dp[w-weight[i]]</code>拿到的数据可能包含了第<code>i</code>个物品，导致了重复。尝试了加flag之类的，但似乎正向遍历的方法没法做。</p></blockquote><h5 id="背包问题的变体"><a href="#背包问题的变体" class="headerlink" title="背包问题的变体"></a>背包问题的变体</h5><h6 id="子集背包问题"><a href="#子集背包问题" class="headerlink" title="子集背包问题"></a>子集背包问题</h6><p>例：<a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/">https://leetcode-cn.com/problems/partition-equal-subset-sum/</a></p><p>分割等和子集：给定一个只包含正整数的非空数组，是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>问题转换：</strong></p><p><code>sum</code>为物品总重量，给一个可装载重量为<code>sum/2</code>的背包和<code>N</code>个物品，每个物品重量为<code>weight[i]</code>，是否存在一种装法，能够恰好将背包装满。</p><p>1、明确【状态】和【选择】：</p><p>状态：【背包的容量】、【可选择的物品】</p><p>选择：【装进背包】、【不装进背包】</p><p>2、明确dp数组定义：</p><p><code>dp[i][j]</code>表示对于前<code>i</code>个物品，当前背包的容量为<code>j</code>时，若<code>x</code>为<code>True</code>，则说明可以恰好将背包装满，若<code>x</code>为<code>False</code>，则说明不能恰好将背包装满。</p><p>根据这个定义，我们想求的最终答案即为<code>dp[N][sum/2]</code>。</p><p>base case为<code>dp[...][0] = True</code>和<code>dp[0][...]=False</code></p><blockquote><p>背包没有空间：装满了</p><p>没有物品可选：无法装满</p></blockquote><p>3、根据【选择】，思考状态转移的逻辑</p><p>判断是否可装入：<code>weight[i-1] &lt;= j</code></p><p>装入背包：<code>dp[i][j] = dp[i-1][j-weight[i-1]]</code></p><p>不装入背包：<code>dp[i][j] = dp[i-1][j]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">knapsack_divide</span>(<span class="hljs-params">weight</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> weight: <span class="hljs-built_in">sum</span> += w<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sum</span>%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>): <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">sum</span>/<span class="hljs-number">2</span>)<br>    dp = np.full((<span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(weight)+<span class="hljs-number">1</span>),<span class="hljs-built_in">sum</span>+<span class="hljs-number">1</span>),<span class="hljs-literal">False</span>,dtype=<span class="hljs-built_in">bool</span>)<br>    <span class="hljs-comment"># base case</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(weight)):<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 状态转换</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(weight)+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">sum</span>+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> j-weight[i-<span class="hljs-number">1</span>]&lt;<span class="hljs-number">0</span>:<br>                <span class="hljs-comment"># 背包容量不足</span><br>                dp[i][j] = dp[i-<span class="hljs-number">1</span>][j]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 选择装入或不装入</span><br>                dp[i][j] = dp[i-<span class="hljs-number">1</span>][j] | dp[i-<span class="hljs-number">1</span>][j-weight[i-<span class="hljs-number">1</span>]]<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-built_in">len</span>(weight)][<span class="hljs-built_in">sum</span>]<br></code></pre></td></tr></table></figure><p>4、优化：状态压缩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 状态压缩</span><br><span class="hljs-comment"># weight: 物品重量数组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">knapsack_divide2</span>(<span class="hljs-params">weight</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> weight: <span class="hljs-built_in">sum</span> += w<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sum</span>%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>): <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">sum</span>/<span class="hljs-number">2</span>)<br>    dp = [<span class="hljs-literal">False</span>] * (<span class="hljs-built_in">sum</span>+<span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 状态转换</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(weight)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">sum</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> j &gt;= weight[i]:<br>                dp[j] = dp[j] | dp[j-weight[i]]<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-built_in">sum</span>]<br></code></pre></td></tr></table></figure><blockquote><p>如上题，<code>j</code>应从后往前反向遍历，因为每个物品（或者说数字）只能用一次，以免之前的结果影响了其他的结果。</p></blockquote><p>至此，子集切割的问题就完全解决了，时间复杂度 O(n*sum)，空间复杂度 O(sum)。 </p><h6 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h6><p>例：<a href="https://leetcode-cn.com/problems/coin-change-2/">https://leetcode-cn.com/problems/coin-change-2/</a></p><p>零钱兑换2：给定不同面额的硬币和一个总金额，写出函数来计算可以凑成总金额的硬币组合数，假设每一种面额的硬币有无限个<strong>。</strong></p><p><strong>问题转换：</strong></p><p>有一个背包，最大容量为<code>W</code>，有一系列物品<code>weight</code>，每个物品的重量为<code>weight[i]</code>，每个物品的数量无限，请问有多少种方法，能够把背包恰好装满。</p><p>1、明确【状态】和【选择】：</p><p>状态：【背包的容量】、【可选择的物品】</p><p>选择：【装进背包】、【不装进背包】</p><p>2、明确<code>dp</code>数组的定义：</p><p>若只使用前<code>i</code>个物品，当背包容量为<code>j</code>时，有<code>dp[i][j]</code>种方法可以装满背包。</p><p>所求的答案即为<code>dp[N][W]</code>，<code>N</code>为<code>weight</code>数组的大小。</p><p>base case：<code>dp[0][...]=0</code>和<code>dp[...][0]=1</code></p><p>3、根据【选择】，思考状态转移的逻辑：</p><p>条件：<code>j &gt;= weight[i-1]</code></p><p>装入背包：<code>dp[i][j-weight[i-1]]</code>&#x3D;&#x3D;(可以重复，所以是<code>i</code>而不是<code>i-1</code>)&#x3D;&#x3D;</p><p>不装入背包：<code>dp[i-1][j]</code></p><p>共有<code>dp[i][j] = dp[i][j-weight[i-1]] + dp[i-1][j]</code>种凑法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 完全背包</span><br><span class="hljs-comment"># weight: 物品重量数组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">knapsack_complete</span>(<span class="hljs-params">W,weight</span>):<br>    dp = np.zeros((<span class="hljs-built_in">len</span>(weight)+<span class="hljs-number">1</span>,W+<span class="hljs-number">1</span>),dtype=<span class="hljs-built_in">int</span>)<br>    <span class="hljs-comment"># base case</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(weight)+<span class="hljs-number">1</span>):<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(weight)+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,W+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> j &gt;= weight[i-<span class="hljs-number">1</span>]:<br>                dp[i][j] = dp[i-<span class="hljs-number">1</span>][j] + dp[i][j - weight[i-<span class="hljs-number">1</span>]]<br>            <span class="hljs-keyword">else</span>:<br>                dp[i][j] = dp[i-<span class="hljs-number">1</span>][j]<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-built_in">len</span>(weight)][W]<br></code></pre></td></tr></table></figure><p>4、优化：降低空间复杂度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 状态压缩</span><br><span class="hljs-comment"># W: 背包承重 weight: 物品重量数组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">knapsack_complete2</span>(<span class="hljs-params">W,weight</span>):<br>    dp = [<span class="hljs-number">0</span>]*(W+<span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># base case</span><br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(weight)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, W+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> j &gt;= weight[i]:<br>                dp[j] = dp[j] + dp[j-weight[i]]<br>    <span class="hljs-keyword">return</span> dp<br></code></pre></td></tr></table></figure><p>时间复杂度<code> O(len(weight)*W)</code>，空间复杂度<code>O(W)</code>。</p><h4 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h4><ul><li>通过做出一系列短视的决策来解决问题</li><li>每个决策本身都能最优地解决某些子问题</li><li>但这些子问题对整个问题来说未必最优</li><li>设计的关键：找到一种合适的方法，把问题分解成几个小的部分，然后把他们组合在一起</li><li>例：作业调度、Dijkstra算法、最小生成树</li></ul><blockquote><p>每一步都做出一个局部最优的选择，最终的结果就是全局最优。</p><p>注：部分问题具有这个性质</p></blockquote><h5 id="区间调度问题"><a href="#区间调度问题" class="headerlink" title="区间调度问题"></a>区间调度问题</h5><p>给出多个形如[start,end]的闭区间，算出这些区间中最多有几个互不相交的区间。</p><blockquote><p>例：intvs &#x3D; [[1,3],[2,4],[3,6]]，应返回2，即最多有两个区间互不相交</p></blockquote><p>解题思路：</p><p>1、从区间结合intvs中选择一个区间x，这个x是在当前所有区间中结束最早的（end最小）</p><p>2、把所有与x相交的区间从区间集合intvs中删除</p><p>3、重复步骤1和步骤2，直到intvs为空，之前选出的x就是最大不相交子集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 区间调度</span><br><span class="hljs-comment"># intvs: 区间集合</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">key_function</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> x[<span class="hljs-number">1</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">interval_schedule</span>(<span class="hljs-params">intvs</span>):<br>    <span class="hljs-keyword">if</span> intvs == []:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 按end排序</span><br>    intvs.sort(key=key_function)<br>    <span class="hljs-comment"># 至少有一个区间不相交</span><br>    count = <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 排序后，第一个区间就是x</span><br>    x_end = intvs[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> intv <span class="hljs-keyword">in</span> intvs:<br>        start = intv[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> start &gt;= x_end:<br>            count += <span class="hljs-number">1</span><br>            x_end = intv[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> count<br><br><span class="hljs-comment"># 测试</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    intvs = [[<span class="hljs-number">1</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">2</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">9</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]]<br>    <span class="hljs-built_in">print</span>(interval_schedule(intvs))<br></code></pre></td></tr></table></figure><h5 id="作业调度"><a href="#作业调度" class="headerlink" title="作业调度"></a>作业调度</h5><p><strong>问题描述：</strong></p><p>给定：n个作业和一台机器，作业<code>i</code>有一个开始时间$s_i$和一个完成时间$f_i \geq s_i$</p><p>目标：以非重叠的方式找到可以在机器上调度的最大作业子集</p><p>对于任意两个计划作业<code>i</code>和<code>j</code>，$f_i \le s_j$ 或 $f_j \le s_i$ （不能同时进行）</p><p>贪婪方法：持续作业调度，确保没有新作业与现有的作业重叠。关键在于调度作业的顺序。</p><p><strong>贪婪策略：</strong></p><p>有几种可能的方法可以做到这一点，每种方法都试图尽量减少每个连续作业可能导致的潜在重叠次数</p><ul><li>最短作业优先</li><li>最早到达优先</li><li>冲突最少优先</li><li>最早完成时间优先</li></ul><p><strong>最早完成时间优先：</strong></p><p>考虑任何不少于<code>k</code>个作业的解决方案<code>S</code>。对<code>k</code>归纳证明，贪婪算法<code>G</code>调度至少<code>k</code>个作业时，前<code>k</code>个作业不晚于所选解中的前<code>k</code>个作业完成。这一结论意味着贪婪算法调度的作业数至少与最优解相同。</p><p>基本情况：<code>k=0</code>，假设归纳假设适用于<code>k-1</code></p><p>令$S_k$为<code>S</code>中的第<code>k</code>个作业，$G_k$是贪婪调度的第<code>k</code>个作业。显然，$s_{S_K} \ge f_{S_K-1} \ge f_{G_{K-1}}$。也就是说，$S_k$在$G_{k-1}$完成之后开始。另外，在贪婪中调度$G_{k-1}$时，$S_k$尚未被考虑。因此贪婪算法可以通过增加作业$S_k$来扩充其调度。因此，它会找到一个候选者来扩充它的解决方案，特别是选择一个不晚于$S_k$的解决方案。</p><p><strong>贪婪算法的特点：</strong>分步骤来构造一个优化问题的解，每一步需满足特定要求。</p><ul><li>可行：不违反约束条件</li><li>局部最优：当前步骤最优的局部解</li><li>不可撤销：一旦做出选择，后续步骤中无法改变（与动态规划的区别，动态规划考虑全局，可以撤销，贪婪考虑局部）</li></ul><h5 id="最佳股票交易时间"><a href="#最佳股票交易时间" class="headerlink" title="最佳股票交易时间"></a>最佳股票交易时间</h5><p>问题描述：整形数组中的元素表示当天股票的价格；根据需要买入卖出，完成尽可能多的交易；不得同时进行多笔交易，必须在再次购买之前卖出股票；设计算法找出最大利润。</p><p><strong>股票买卖问题：</strong></p><p>问题描述：给定一个数组，它的第<code>i</code>个元素时一支给定的股票在第<code>i</code>天的价格，设计一个算法来计算你能获取的最大利益。你最多可以完成<code>k</code>笔交易，且不能同时参与多笔交易。</p><p>示例：</p><blockquote><p>输入：[2,4,1], k&#x3D;2</p><p>输出：2（最大利益）</p><p>输入：[3,2,6,5,0,3], k&#x3D;2</p><p>输出：7（最大利益）</p></blockquote><p>1、明确【状态】和【选择】</p><p>状态：【天数】、【允许交易的最大次数】、【当前的持有状态】(1持有0没有持有)</p><p>选择：【买入】、【卖出】、【无操作】</p><p>尝试穷举：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">dp[i][k][<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>]<br><span class="hljs-number">0</span> &lt;= i &lt;= n-<span class="hljs-number">1</span>, <span class="hljs-number">1</span> &lt;= k &lt;= K<br><span class="hljs-comment"># n为天数，K为最多交易数</span><br><span class="hljs-comment"># 此问题共n*K*2种状态，可尝试穷举</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,K+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125;:<br>            dp[i][k][s] = <span class="hljs-built_in">max</span>(buy,sell,rest)<br><span class="hljs-keyword">return</span> dp[n-<span class="hljs-number">1</span>][K][<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>2、状态转移框架</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># base case:</span><br><span class="hljs-comment"># i=-1(没开始) k=0(不允许交易) 利润为0</span><br>dp[-<span class="hljs-number">1</span>][k][<span class="hljs-number">0</span>] = dp[i][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br><span class="hljs-comment"># i=-1 s=1(没开始时持有股票) k=0 s=1(不允许交易持有股票) 负无穷表不可能</span><br>dp[-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>] = dp[i][<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = -<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>)<br><br><span class="hljs-comment"># 状态转移方程：</span><br>dp[i][k][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">0</span>],dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>] + prices[i])<br>dp[i][k][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>],dp[i-<span class="hljs-number">1</span>][k-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] - prices[i])<br></code></pre></td></tr></table></figure><p>3、运用到不同类型的题目</p><ul><li>k&#x3D;1</li></ul><p>此时<code>k</code>均为1，不会改变，<code>k</code>对于状态转移已经没有影响了，可以简化<code>k</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># k=1的情况</span><br><span class="hljs-comment"># prices: 股票价格列表</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profit2</span>(<span class="hljs-params">prices</span>):<br>    n = <span class="hljs-built_in">len</span>(prices)<br>    dp = np.zeros((n,<span class="hljs-number">2</span>),dtype=<span class="hljs-built_in">int</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">if</span> i-<span class="hljs-number">1</span>==-<span class="hljs-number">1</span>: <br>            dp[i][<span class="hljs-number">0</span>]=<span class="hljs-number">0</span><br>            dp[i][<span class="hljs-number">1</span>]=-prices[i]<br>            <span class="hljs-keyword">continue</span><br>        dp[i][<span class="hljs-number">0</span>]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]+prices[i])<br>        dp[i][<span class="hljs-number">1</span>]=<span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],-prices[i])<br>    <span class="hljs-keyword">return</span> dp[n-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>优化：降低空间复杂度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 改进：dp数组-&gt;一个变量</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profit3</span>(<span class="hljs-params">prices</span>):<br>    n = <span class="hljs-built_in">len</span>(prices)<br>    <span class="hljs-comment"># base case</span><br>    dp0,dp1 = <span class="hljs-number">0</span>,-<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        dp0 = <span class="hljs-built_in">max</span>(dp0,dp1+prices[i])<br>        dp1 = <span class="hljs-built_in">max</span>(dp1,-prices[i])<br>    <span class="hljs-keyword">return</span> dp0<br></code></pre></td></tr></table></figure><ul><li>k&#x3D;正无穷</li></ul><p>此时<code>k=k-1</code>，依然不需要<code>k</code>来记录状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># k= 正无穷</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profit4</span>(<span class="hljs-params">prices</span>):<br>    n=<span class="hljs-built_in">len</span>(prices)<br>    dp0,dp1 = <span class="hljs-number">0</span>,-<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        tmp=dp0<br>        dp0=<span class="hljs-built_in">max</span>(dp0,dp1+prices[i])<br>        dp1=<span class="hljs-built_in">max</span>(dp1,tmp-prices[i])<br>    <span class="hljs-keyword">return</span> dp0<br></code></pre></td></tr></table></figure><ul><li>k&#x3D;正无穷+冷却一天</li></ul><p>每次sell后，要等一天才能交易</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># k=正无穷+cooldown</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profit5</span>(<span class="hljs-params">prices</span>):<br>    n=<span class="hljs-built_in">len</span>(prices)<br>    dp0,dp1 = <span class="hljs-number">0</span>,-<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>    dp_pre0 = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> price <span class="hljs-keyword">in</span> prices:<br>        tmp=dp0<br>        dp0 = <span class="hljs-built_in">max</span>(dp0,dp1+price)<br>        dp1 = <span class="hljs-built_in">max</span>(dp1,dp_pre0-price)<br>        dp_pre0=tmp<br>    <span class="hljs-keyword">return</span> dp0<br></code></pre></td></tr></table></figure><ul><li>k&#x3D;正无穷+fee</li></ul><p>把手续费从利润中减去</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># k=正无穷+fee</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profit6</span>(<span class="hljs-params">prices,fee</span>):<br>    n=<span class="hljs-built_in">len</span>(prices)<br>    dp0,dp1=<span class="hljs-number">0</span>,-<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;INF&#x27;</span>)<br>    <span class="hljs-keyword">for</span> price <span class="hljs-keyword">in</span> prices:<br>        tmp = dp0<br>        dp0 = <span class="hljs-built_in">max</span>(dp0,dp1+price)<br>        dp1 = <span class="hljs-built_in">max</span>(dp1,tmp-price-fee)<br>    <span class="hljs-keyword">return</span> dp0<br></code></pre></td></tr></table></figure><ul><li>k&#x3D;2</li></ul><p>没有消掉<code>k</code>的影响，所以必须对<code>k</code>进行穷举</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># k=2</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profit7</span>(<span class="hljs-params">prices</span>):<br>    K=<span class="hljs-number">2</span><br>    n=<span class="hljs-built_in">len</span>(prices)<br>    <span class="hljs-comment"># 创建三维表</span><br>    dp = np.zeros((n,K+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),dtype=<span class="hljs-built_in">float</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(K,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> i-<span class="hljs-number">1</span>==-<span class="hljs-number">1</span>:<br>                dp[i][k][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>                dp[i][k][<span class="hljs-number">1</span>] = -prices[i]<br>                <span class="hljs-keyword">continue</span><br>            dp[i][k][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">0</span>],dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>]+prices[i])<br>            dp[i][k][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>],dp[i-<span class="hljs-number">1</span>][k-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-prices[i])<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(dp[n-<span class="hljs-number">1</span>][K][<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><ul><li>k&#x3D;any integer</li></ul><p>K非常大时，可使用k&#x3D;正无穷的解法，减少遍历。</p><p>此外可类似k&#x3D;2的写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># k=any integer</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profit8</span>(<span class="hljs-params">prices,K</span>):<br>    n=<span class="hljs-built_in">len</span>(prices)<br>    <span class="hljs-keyword">if</span> K &gt; n/<span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> profit4(prices)<br>    <span class="hljs-comment"># 创建三维表</span><br>    dp = np.zeros((n,K+<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),dtype=<span class="hljs-built_in">float</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(K,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> i-<span class="hljs-number">1</span>==-<span class="hljs-number">1</span>:<br>                dp[i][k][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br>                dp[i][k][<span class="hljs-number">1</span>] = -prices[i]<br>                <span class="hljs-keyword">continue</span><br>            dp[i][k][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">0</span>],dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>]+prices[i])<br>            dp[i][k][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i-<span class="hljs-number">1</span>][k][<span class="hljs-number">1</span>],dp[i-<span class="hljs-number">1</span>][k-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]-prices[i])<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(dp[n-<span class="hljs-number">1</span>][K][<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><p>总结：用数组存储所有的状态，从base case开始状态转移，至解。</p><h5 id="圆和弦（卡特兰数）"><a href="#圆和弦（卡特兰数）" class="headerlink" title="圆和弦（卡特兰数）"></a>圆和弦（卡特兰数）</h5><p>问题描述：圆上有<code>2n</code>个点，可以连成<code>n</code>个不相交的弦，不同的连接方式有多少？</p><p>解题思路：</p><p>0、定义函数<code>f(2n)</code>：为所求答案</p><p>1、连接任意两个点，可以用一根弦将整个圆分成两部分，例如对于有<code>2n</code>个点的圆，可以分成<code>2</code>和<code>n-4</code>两部分，于是这个情况有<code>f(2)*f(n-4)</code>种连接方式。</p><p>2、因为划分要做到两边都是偶数，才能保证连接出<code>n</code>个弦不相交，所以从单个点出发，有<code>n/2</code>种划分。</p><p>3、最终答案就是把每种划分的所有连接方式相加。</p><p>实际是算卡特兰数，也即：<code>f(n)=f(0)*f(n-1)+f(1)*f(n-2)+...+f(n-1)*f(0)</code></p><p>例：<code>[1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796] </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 圆和弦</span><br><span class="hljs-comment"># 圆上有2n个点，可以连成n个不相交的弦，不同的连接方式有多少？</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Catalan</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    dp = [<span class="hljs-number">0</span>]*<span class="hljs-built_in">int</span>(n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)<br>    dp[<span class="hljs-number">0</span>]=dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">int</span>(n/<span class="hljs-number">2</span>)+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>            dp[i] += dp[j]*dp[i-j-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-built_in">int</span>(n/<span class="hljs-number">2</span>)]<br></code></pre></td></tr></table></figure><blockquote><p>同样是求卡特兰数的问题：</p><ul><li>出栈问题：已知进展顺序<code>abcd</code>，可能的出栈顺序多少种？<code>f(4)=14</code>。</li><li>n个符号分别依次入栈</li><li>归结为已知问题：在n*n的方格中，入栈&#x3D;向上，出栈&#x3D;向右，起点（0,0），终点（n,n）</li><li>满二叉树问题：求个(n+1)个叶子的满二叉树的个数（这里的满二叉树（full binary tree）是指除根节点外的节点要么有2个要么有0个节点）。<code>f(3)=5</code>即4个叶子的满二叉树个数。</li><li>购票问题：电影票每50张元，如果有个人排队买票，其中个n人各持有100元面值的钞票张，另外个m人各持有50元面值的钞票张，而票房没有预备找零．有多少种方法可以将这个人排成一列，顺序购票？<code>m=n时，即为Catalan数</code>。</li><li>凸多边形的剖分：求凸（n+2）边形用其(n-1)条对角线分割为互不重叠的三角形的分法总数。<code>f(4)=14</code>凸6边形用3条对角线的分法总数。</li></ul></blockquote><h6 id="卡特兰计数问题"><a href="#卡特兰计数问题" class="headerlink" title="卡特兰计数问题"></a>卡特兰计数问题</h6><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/2022-04-21_133416.png" alt="2022-04-21_133416"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 动态规划的解法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Catalan4</span>(<span class="hljs-params">m,n</span>):<br>    dp = np.zeros((m+<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>), dtype=<span class="hljs-built_in">int</span>)<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,j+<span class="hljs-number">1</span>):<br>            dp[i][j] = dp[i-<span class="hljs-number">1</span>][j] + dp[i][j-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> dp[m][n]<br></code></pre></td></tr></table></figure><h6 id="二叉树数量"><a href="#二叉树数量" class="headerlink" title="二叉树数量"></a>二叉树数量</h6><ul><li>给定二叉树的中序遍历结果，有多少种二叉树满足这种遍历。</li><li>观察视角：根节点在哪里？</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 二叉树数量的递归</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Catalan6</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span>  <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-built_in">sum</span> += Catalan6(i) * Catalan6(n-i-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br></code></pre></td></tr></table></figure><h5 id="作业：熟悉掌握Viterbi算法"><a href="#作业：熟悉掌握Viterbi算法" class="headerlink" title="作业：熟悉掌握Viterbi算法"></a>作业：熟悉掌握Viterbi算法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">viterbi_decode</span>(<span class="hljs-params">score, transition</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;解码TensorFlow之外得分最高的标签序列</span><br><span class="hljs-string">    参数:</span><br><span class="hljs-string">        score: 预测概率矩阵</span><br><span class="hljs-string">        transition: 转移矩阵</span><br><span class="hljs-string">    返回:</span><br><span class="hljs-string">        viterbi: 最高得分标签的整数列表</span><br><span class="hljs-string">        viterbi_score: viterbi分数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 用于存储累计分数的数组</span><br>    <span class="hljs-comment"># np.zeros_like返回一个新矩阵，其维度与矩阵score一致，并为其初始化为全0；</span><br>    trellis = np.zeros_like(score)<br>    <span class="hljs-comment"># 用于存储最优路径索引的数组</span><br>    backpointers = np.zeros_like(score, dtype=np.int32)<br>    <span class="hljs-comment"># 第一个时刻的累计分数</span><br>    trellis[<span class="hljs-number">0</span>] = score[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># shape: 行，列</span><br>    <span class="hljs-comment"># 循环score的行，从1开始</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, score.shape[<span class="hljs-number">0</span>]):<br>        <span class="hljs-comment"># 各个状态截止到上个时刻的累计分数 + 转移分数</span><br>        <span class="hljs-comment"># 把trellis的第一行扩展为三行（第一列的数形成第一行），与transision相加</span><br>        v = np.expand_dims(trellis[t - <span class="hljs-number">1</span>], <span class="hljs-number">1</span>) + transition<br>        <span class="hljs-comment"># max（各个状态截止到上个时刻的累计分数 + 转移分数）+ 选择当前状态的分数</span><br>        <span class="hljs-comment"># axis=0 代表行（对每列，选出最大行） , axis=1 代表列</span><br>        trellis[t] = score[t] + np.<span class="hljs-built_in">max</span>(v, <span class="hljs-number">0</span>)<br>        <span class="hljs-comment"># 记录累计分数最大的索引</span><br>        backpointers[t] = np.argmax(v, <span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment"># 最优路径的结果</span><br>    <span class="hljs-comment"># trellis数组最后一行最大值的索引以数组的形式返回</span><br>    viterbi = [np.argmax(trellis[-<span class="hljs-number">1</span>])]<br>    <span class="hljs-comment"># 反向遍历每个时刻，得到最优路径</span><br>    <span class="hljs-keyword">for</span> bp <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(backpointers[<span class="hljs-number">1</span>:]):<br>        viterbi.append(bp[viterbi[-<span class="hljs-number">1</span>]])<br>    viterbi.reverse()<br><br>    viterbi_score = np.<span class="hljs-built_in">max</span>(trellis[-<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> viterbi, viterbi_score<br><br><span class="hljs-comment"># 测试</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    score = np.array([[<span class="hljs-number">0.8</span>,<span class="hljs-number">0.1</span>,<span class="hljs-number">0.1</span>],[<span class="hljs-number">0.1</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">0.4</span>],[<span class="hljs-number">0.2</span>,<span class="hljs-number">0.6</span>,<span class="hljs-number">0.2</span>]])<br>    transition = np.array([[<span class="hljs-number">0.5</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.3</span>],[<span class="hljs-number">0.3</span>,<span class="hljs-number">0.5</span>,<span class="hljs-number">0.2</span>],[<span class="hljs-number">0.2</span>,<span class="hljs-number">0.3</span>,<span class="hljs-number">0.5</span>]])<br>    <span class="hljs-built_in">print</span>(viterbi_decode(score, transition))<br></code></pre></td></tr></table></figure><h3 id="4、Catalan-x2F-动态时间拉伸-x2F-Dijkstra"><a href="#4、Catalan-x2F-动态时间拉伸-x2F-Dijkstra" class="headerlink" title="4、Catalan&#x2F;动态时间拉伸&#x2F;Dijkstra"></a>4、Catalan&#x2F;动态时间拉伸&#x2F;Dijkstra</h3><h5 id="股票交易时间"><a href="#股票交易时间" class="headerlink" title="股票交易时间"></a>股票交易时间</h5><p>一趟扫描：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># a:股票价格数组</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profit</span>(<span class="hljs-params">a</span>):<br>    tmp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(a)):<br>        <span class="hljs-keyword">if</span> a[i] &gt; a[i-<span class="hljs-number">1</span>]:<br>            tmp += a[i] - a[i-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> tmp<br></code></pre></td></tr></table></figure><p>这是老师给的解答，相当于把所有相邻的前小后大全部相加，拿到了全局最优。</p><p>证明不详，但经测试与动态规划解法<code>profit4(prices)</code>能得出一样的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 比较测试</span><br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>        random_int_list = []<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>            random_int_list.append(random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>))<br>        <span class="hljs-built_in">print</span>(profit(random_int_list))<br>        <span class="hljs-built_in">print</span>(profit4(random_int_list))<br></code></pre></td></tr></table></figure><h5 id="男生（100）女生（50）买票"><a href="#男生（100）女生（50）买票" class="headerlink" title="男生（100）女生（50）买票"></a>男生（100）女生（50）买票</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 半区网路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Catalan3</span>(<span class="hljs-params">i,j</span>):<br>    <span class="hljs-comment"># base case</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> == i <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> == j: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> i &lt; j <span class="hljs-keyword">and</span> i &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> j &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> Catalan3(i-<span class="hljs-number">1</span>, j) + Catalan3(i, j-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> i == j: <span class="hljs-keyword">return</span> Catalan3(i-<span class="hljs-number">1</span>, j)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> == i: <span class="hljs-keyword">return</span> Catalan3(i, j-<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;should have not reached here&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h5 id="圆和弦"><a href="#圆和弦" class="headerlink" title="圆和弦"></a>圆和弦</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 求Catalan递归的写法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Catalan2</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n%<span class="hljs-number">2</span> != <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">2</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        tmp = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,n,<span class="hljs-number">2</span>):<br>            tmp += Catalan2(i)*Catalan2(n-i-<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">return</span> tmp<br></code></pre></td></tr></table></figure><h4 id="动态时间拉伸"><a href="#动态时间拉伸" class="headerlink" title="动态时间拉伸"></a>动态时间拉伸</h4><ul><li><p>多普勒效应：波在波源移向观察者时接收频率变高，而在波源远离观察者时接收频率变低。</p></li><li><p>模板匹配</p></li><li><p>时间序列对准</p></li><li><p>序列相似度度量</p></li></ul><p>两个有限长度的序列$X&#x3D;\left{x_1,\dots,x_m\right}$和$Y&#x3D;\left{y_1,\dots,y_n\right}$</p><p>非负代价函数$d(x_i,y_j)$</p><p>如何发现$X$和$Y$的最佳对应关系？</p><p><strong>动态规划求解：</strong></p><ul><li>转化为从(0,0)到(m,n)的最短路径问题</li><li>已知D(0,0)，求D(m,n)</li><li>递推过程：<code>D(i,j) = d(i,j) + min&#123;D(i,j-1),D(i-1,j-1),D(i-1,j)&#125;</code></li></ul><h5 id="Dijkstra最短路径算法（贪婪算法）"><a href="#Dijkstra最短路径算法（贪婪算法）" class="headerlink" title="Dijkstra最短路径算法（贪婪算法）"></a>Dijkstra最短路径算法（贪婪算法）</h5><ul><li>Dijkstra算法贪婪地探索从<code>s</code>开始的路径，每次移动到下一个最近的节点。这种方式实际构造了从<code>s</code>到图中每个其他节点的最短路径。</li><li>给定：带权图以及特殊节点<code>s</code>和<code>t</code></li><li>目标：找到<code>s</code>和<code>t</code>之间的最短路径</li></ul><p>算法描述：</p><ul><li><p>初始化<code>K=&#123;s&#125;</code>，令<code>Path(s)= ∅ </code>，<code>d(s) = 0</code></p></li><li><p>对不在<code>K</code>中的每一个节点<code>v</code>，计算距离 $d(v) &#x3D; \min_{u \in K}\left{ d(u) + w(u,v) \right}$</p></li><li><p>令$v^*$为$v^* &#x3D; \arg \min_{v \notin K}d(v)$，<code>e=(u,v)</code>为对应边</p></li><li><p>令$K&#x3D;K \cup \left{ v^* \right}$，$Path(v^*) &#x3D; Path(u)\cup\left{e^<em>\right}$，$d(v^</em>) &#x3D; d(u) + w(e^*)$</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> heapq <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dijkstra</span>(<span class="hljs-params">graph, start</span>):<br>    vnum = <span class="hljs-built_in">len</span>(graph) <span class="hljs-comment"># 顶点个数</span><br>    paths = &#123;&#125;<br>    cands = [(<span class="hljs-number">0</span>,start,start)]<br>    heapify(cands) <span class="hljs-comment"># 转化为小顶堆，便于找到权重最小的边</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> count &lt; vnum <span class="hljs-keyword">and</span> cands <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        plen,u,vmin=heappop(cands) <span class="hljs-comment"># 选出累计路径最短的边</span><br>        <span class="hljs-keyword">if</span> paths.get(vmin) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>: <span class="hljs-comment"># 如果已经找到到vmin的最短路径就跳过</span><br>            <span class="hljs-keyword">continue</span><br>        paths[vmin] = plen <span class="hljs-comment"># 存入最短路径</span><br>        <span class="hljs-keyword">for</span> next_edge <span class="hljs-keyword">in</span> graph[vmin]:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> paths.get(next_edge[<span class="hljs-number">2</span>]):<br>                heappush(cands, (plen+next_edge[<span class="hljs-number">0</span>],u,next_edge[<span class="hljs-number">2</span>]))<br>        count += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> paths<br>graph = &#123;<span class="hljs-string">&#x27;A&#x27;</span>: [(<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>), (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>)], <br>         <span class="hljs-string">&#x27;C&#x27;</span>: [(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>), (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>)], <br>         <span class="hljs-string">&#x27;B&#x27;</span>: [(<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>), (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>), (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>), (<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>)], <br>         <span class="hljs-string">&#x27;E&#x27;</span>: [(<span class="hljs-number">7</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>), (<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>), (<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>), (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>), (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>)], <br>         <span class="hljs-string">&#x27;D&#x27;</span>: [(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>), (<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>), (<span class="hljs-number">15</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>), (<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>)], <br>         <span class="hljs-string">&#x27;G&#x27;</span>: [(<span class="hljs-number">9</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>), (<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>)], <br>         <span class="hljs-string">&#x27;F&#x27;</span>: [(<span class="hljs-number">6</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>), (<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>), (<span class="hljs-number">11</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>)]&#125;      <br><span class="hljs-built_in">print</span>(dijkstra(graph, <span class="hljs-string">&#x27;A&#x27;</span>))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 法二：</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">startwith</span>(<span class="hljs-params">start: <span class="hljs-built_in">int</span>, mgraph: <span class="hljs-built_in">list</span></span>) -&gt; <span class="hljs-built_in">list</span>:<br>    passed = [start]<br>    nopass = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(mgraph)) <span class="hljs-keyword">if</span> x != start]<br>    dis = mgraph[start]<br>    <br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(nopass):<br>        idx = nopass[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nopass:<br>            <span class="hljs-keyword">if</span> dis[i] &lt; dis[idx]: idx = i<br><br>        nopass.remove(idx)<br>        passed.append(idx)<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nopass:<br>            <span class="hljs-keyword">if</span> dis[idx] + mgraph[idx][i] &lt; dis[i]: <br>                dis[i] = dis[idx] + mgraph[idx][i]<br>    <span class="hljs-keyword">return</span> dis<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    inf = <span class="hljs-number">10086</span><br>    mgraph = [[<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">12</span>, inf, inf, inf],<br>              [inf, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">3</span>, inf, inf],<br>              [inf, inf, <span class="hljs-number">0</span>, inf, <span class="hljs-number">5</span>, inf],<br>              [inf, inf, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>],<br>              [inf, inf, inf ,inf, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>],<br>              [inf, inf, inf, inf ,inf, <span class="hljs-number">0</span>]]<br><br>    <span class="hljs-built_in">print</span>(startwith(<span class="hljs-number">0</span>, mgraph))<br></code></pre></td></tr></table></figure><p><strong>Dijkstra算法的最优性：</strong></p><p>通过对$K$的大小的归纳来证明这个结论。</p><p>$|K| &#x3D; 1$的基本情况是平凡的：在这种情况下$K$只包含$s$和路径$Path(s) &#x3D; \varnothing$。</p><p>假设结论一直保持到步骤$k-1$仍然成立，并考虑第$k$步把点$v$添加到集合$K$，且$e&#x3D;(u,v)$为对应边。</p><p>为了造成矛盾，假设路径$Path(v)$并非$s$到$v$的最短路径，而$Path^*(v)$为相应的最短路径。设$x$为$Path^*(v)$上集合$K$中最后一个结点，$x’$是$Path^*(v)$上紧随$x$之后的结点。</p><p>由定义可知$d(x)+w(x,x’)$不超过为$Path^*(v)$的长度。</p><p>但是，通过构造，&#x3D;&#x3D;$d(u) + w(u,v) \leq d(x) + w(x,x’)$（不是很理解）&#x3D;&#x3D;，且$d(v) &#x3D; d(u) + w(u,v)$，意味着$d(v)$不超过$Path^*(v)$的长度。</p><p>于是导出矛盾。</p><h5 id="作业：kruskal算法、prime算法"><a href="#作业：kruskal算法、prime算法" class="headerlink" title="作业：kruskal算法、prime算法"></a>作业：kruskal算法、prime算法</h5><h3 id="5、Catalan计数-x2F-最小生成树问题"><a href="#5、Catalan计数-x2F-最小生成树问题" class="headerlink" title="5、Catalan计数&#x2F;最小生成树问题"></a>5、Catalan计数&#x2F;最小生成树问题</h3><p>Catalan计数见前文</p><h4 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h4><ul><li>$G&#x3D;(V,E)$是一个无向连通图，代价函数<code>w</code>将边映射为正实数</li><li>生成树是一颗连接<code>G</code>的所有顶点的无向树</li><li>生成树的代价等于树中所有边的代价之和</li><li>最小生成树的代价为<code>G</code>的所有可能生成树的最小代价的一颗生成树</li><li>一个图可以有许多具有代价的<code>MST</code></li><li>构建<code>MST</code>的两个主要算法：<code>Kruskal</code>和<code>Prim</code>，都是贪婪算法</li></ul><p><strong>安全边</strong></p><ul><li>图的割：对结点集合<code>V</code>的一个划分</li><li>穿过割的边：一条边的两个端点分别在割的两边</li><li>轻边：穿过割的边中权重最小的一条边</li><li>结论：假设$A\subset E$，且包含在一些<code>MST</code>中，如果$(s,v_s)$ 是一个关于$A$的割，$(u,v)$是一条穿过割$(s,v_s)$的轻边，则$(u,v)$对$A$来说是安全的。</li></ul><p>贪婪算法：独特</p><h5 id="Kruskal算法"><a href="#Kruskal算法" class="headerlink" title="Kruskal算法"></a>Kruskal算法</h5><ul><li>集合<code>A</code>初始时只包括孤立的结点</li><li>对<code>E</code>的边按权重大小升序排序</li><li>顺序考虑边：如果这条边连接两个不同部分，则添加该边</li><li>无向图$G&#x3D;(V,E)$的<code>MST</code>可以在时间复杂度$O(|V|log|V| + |E|log|E|)$完成</li></ul><h5 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h5><ul><li>Prim算法与Dijkstra算法的单源最短路径算法非常像，具有相同的复杂度</li><li>在算法的任何阶段，集合<code>A</code>都会形成一棵树，而不是像Kruskal那样由连接的组件组成的森林</li><li>每个阶段中，都会向树添加一条轻边，将<code>A</code>连接到$V_A$中的顶点</li><li>用边的权重组成一个优先队列负责查找轻边</li></ul><h4 id="P和NP"><a href="#P和NP" class="headerlink" title="P和NP"></a>P和NP</h4><ul><li>在分析算法的复杂性时，可以把问题转化为一个决策问题：答案为是&#x2F;否的可计算问题</li><li>例如，把在一种语言中生成字符串的问题转化为验证给定字符串在一种语言中的成员身份的问题</li><li>P指的是一类语言，它的隶属度问题可以用输入字符串大小的时间多项式来确定</li><li>对于某些语言，则没有多项式时间的成员算法。但是，我们可以用另一个“见证”字符串在多项式时间内验证该字符串是否使用这一语言</li><li>NP是一类语言，给定一个多项式长度的见证字符串，其成员资格可以在多项式时间内进行验证</li></ul><p><strong>P-时间可约性</strong></p><ul><li>可约性的概念允许我们在多项式时间内将一个问题转化为另一个问题</li><li>如果我们能解决后者，那么我们也能解决前者的问题；相反，如果前者是NP难问题，后者也是NP难问题</li><li>在讨论决策问题时，如果存在一个多项式时间算法，该算法将问题A的一个实例作为输入，并输出一个保证与问题A的实例具有相同结果的问题B的实例，这种归约成为Cook归约</li><li>就是说，如果问题B存在一个有效算法，那么问题A可以通过将其实例转换为问题B的实例，并对其应用有效算法来解决</li></ul><p><strong>P&#x3D;NP?</strong></p><ul><li>P和NP是否相等是计算机科学中最突出、最重要的开放性问题之一。考虑这个问题的有效工具：一个问题对于一个类来说是完全的概念</li><li>可以说，NP中最难的问题称为NP-Hard，是NP中的每一个问题都可以被多项式时间归约到的问题</li><li>因此，任何一个问题的多项式时间算法都意味着NP中的每一个问题都可以在多项式时间内求解，即$NP \subseteq P$</li><li>我们已经知道$P \subseteq NP$，因为每个P算法都可以被看作是一个NP算法</li><li>P&#x3D;NP if 存在一个决定任何一个NP完全问题的多项式时间算法</li></ul><p><strong>SAT问题</strong></p><ul><li>第一个被证明是NP完全的问题是Boolean-SAT：给定一个布尔表达式，是否有一组变量可以使整个表达式的值为真？显然，存在一些不可满足的布尔表达式</li><li>可满足性：给定共轭范式的布尔表达式，寻找变量的值使该表达式为TRUE</li><li>Cook和Levin独立地证明了SAT的NP完全性，称为Cook-Levin定理。Cook-Levin定理证明了SAT是NP完全的，证明了对于NP中的任何问题SAT都存在一个约简</li></ul><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/2022-04-30_103017.png" alt="2022-04-30_103017"></p><p><strong>顶点覆盖问题</strong></p><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/2022-04-30_103309.png" alt="2022-04-30_103309"></p><p>问题描述：给定一个N个点M条边的无向图G（点的编号从1至N），问是否存在一个不超过K个点的集合S，使得G中的每条边都至少有一个点在集合S中。</p><p><strong>SAT问题定义</strong></p><p>布尔可满足性：给定一个CNF（共轭范式）中的布尔公式$\phi$，该公式可以满足吗？换句话说，我们给出了一个带有n个变量的$x_1,x_2,\dots,x_n$的布尔公式$\phi &#x3D; C_1\wedge C_2\wedge \dots \wedge C_k$，其中每个$C_i$是一个形式为$(l_{i1} \vee l_{i2} \vee \dots \vee l_{il})$的子句，每个$l_{ij}$是从集合$\left{ x_1,x_2,\dots,x_n;\overline{x_1},\overline{x_2},\dots,\overline{x_n} \right}$里抽取的文字。我们需要决定是否存在一些变量的设置使得$\phi$得到满足</p><p><strong>2-CNF和3-CNF</strong></p><ul><li>重要性：NP-完全问题是一类任何NP问题可以以多项式时间转化的问题。任一NP完全问题可以多项式时间求解，则所有NP-完全问题都变成了P问题</li><li>2-CNF：子句包含1或2个变量的满足性决策问题</li><li>3-CNF：子句可以包含3个变量</li><li>2-CNF是P问题，而3-CNF属于NPC</li></ul><p><strong>SAT的NP完全性质</strong></p><p>要证明SAT问题是NP完全的，只需证明NP中的任何问题都可以在多项式时间内归约为SAT问题</p><ul><li>首先把问题限制为决策问题：把原始问题转化为一个成员问题，即给定的输入是否属于某种语言。那么，P表示可以在多项式时间内确定成员隶属的语言类，而NP代表存在一个可以在多项式时间内验证其成员隶属的语言类。</li><li>其次，需要将一个问题规约为另一个问题。问题A可以规约到问题B，则如果得到B的一个解，可以多项式时间内调用这个解还原性为A的解。</li></ul><p>Cook-Levin定理表名，对于NP中的任何问题，都存在到SAT的一种规约，从而证明SAT是NP完全的</p><p><strong>Cook-Levin定理</strong></p><blockquote><p>SAT is NP-complete</p></blockquote><p>假设L是一个NP问题，根据定义，则L具有一个多项式时间的验证算法V：</p><ul><li>If $x\in L$，$\exist$见证者y，V(x,y) &#x3D; 1</li><li>If $x \notin L$，$\exist$见证者y，V(x,y) &#x3D; 0</li></ul><p>可以为V构造一个多项式大小的电路，由AND、OR、NOT组成。改电路包含|x|+|y|个输入，其中|x|对应x的每一位的值，|y|代表可变变量</p><p><strong>Cook-Levin定理证明思路</strong></p><p>要求解问题L，只需要找到输入中的|y|个变量中的一种设置使电路的输出为1。这样就把问题L归结为决定电路是否能输出1的问题。接下来证明满足电路的问题可被归为SAT的一个实例。电路中的每一个门可以表示称一个3CNF（三元CNF，每个子句金包含三项）</p><p>例如：</p><ul><li><p>或门OR是一个输入a和b以及输出$Z_i$的函数，表示为$(a \vee b \vee \bar Z_i) \wedge (Z_i \vee \bar a) \wedge (Z_i \vee \bar b) $</p><blockquote><p>a,b&#x3D;true&#x2F;false</p></blockquote></li><li><p>非门NOT是一个输入a且输出$Z_i$的函数，表示为$(a \vee \bar Z_i) \wedge (\bar a \vee Z_i)$</p><blockquote><p>a&#x3D;true&#x2F;false</p></blockquote></li></ul><p>即使有些子句只包含少于3项，可以通过填充独立文字来构造3CNF。独立文字的值不影响从句的布尔量。</p><p><strong>Cook-Levin定理证明</strong></p><p>假设V中共有q个门，记为$Z_i,Z_2,\dots,Z_q$，其中$Z_q$是V的最后输出。</p><p>这些门要么直接使用输入，要么使用中间结果$Z_i$为输入。</p><p>因此，整个电路可以表示为CNF形式的公式：$\phi &#x3D; C_1\wedge C_2\wedge \dots \wedge C_q \wedge Z_q$，其中每个$C_i&#x3D;(t_i \vee t_2 \vee t_3)$，$t_1,t_2,t_3 \in \left{ x,y,Z_1,Z_2,\dots,Z_q,\bar Z_1,\bar Z_2,\dots,\bar Z_q \right}$。</p><p>如前所述，即使最后一个子句只含一项$Z_q$，也可等价转换为3-CNF。因此，该电路被归结为$\phi$，3-CNF形式的公式。</p><p>$\phi$被满足当且仅当原电路输出1。</p><p>所以，$L \le_p SAT$，SAT是NP完全问题</p><h4 id="接雨水（贪婪）"><a href="#接雨水（贪婪）" class="headerlink" title="接雨水（贪婪）"></a>接雨水（贪婪）</h4><p>问题描述：给定一个长度为n的整形数组，元素均大于0，以其中任意两个作为隔板，且位置不变，如何使容纳水的容积最大？</p><p>解题思路：选择短板算容量并淘汰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">water</span>(<span class="hljs-params">a</span>):<br>    n = <span class="hljs-built_in">len</span>(a)<br>    i,j = <span class="hljs-number">0</span>,n-<span class="hljs-number">1</span><br>    m = tmp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; j:<br>        <span class="hljs-keyword">if</span> a[i] &lt; a[j]:<br>            tmp = a[i]*(j-i+<span class="hljs-number">1</span>)<br>            i+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            tmp = a[j]*(j-i-<span class="hljs-number">1</span>)<br>            j-=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> tmp &gt; m:<br>            m = tmp<br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    a = [<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]<br>    <span class="hljs-built_in">print</span>(water(a))<br></code></pre></td></tr></table></figure><h3 id="6、P和NP-x2F-接雨水-x2F-网络流算法-x2F-排队"><a href="#6、P和NP-x2F-接雨水-x2F-网络流算法-x2F-排队" class="headerlink" title="6、P和NP&#x2F;接雨水&#x2F;网络流算法&#x2F;排队"></a>6、P和NP&#x2F;接雨水&#x2F;网络流算法&#x2F;排队</h3><h4 id="NP问题"><a href="#NP问题" class="headerlink" title="NP问题"></a>NP问题</h4><p><strong>求解与验证</strong></p><ul><li>求解问题看起来比验证答案要难（更加耗时）</li><li>例如：数独，给定初始位置，一般情况下求解数独比验证填好的数字是否满足数独的规则要更加困难</li><li>但是，如果需要验证的解的数量非常大，即使单个答案可以很快验证，总体上也要花费很长时间</li><li>NP是nondetermintstic polynomial time的缩写，指在非确定性图灵机上可以以多项式时间精确求解的问题</li><li>有些问题似乎相似，实际分属P和NP：欧拉旅行问题（访问所有边），汉密尔顿环（一次性访问所有节点）</li></ul><p><strong>CNF</strong></p><p><strong>2-CNF和3-CNF</strong></p><p><strong>Cook-Levin定理</strong></p><h4 id="网络流算法"><a href="#网络流算法" class="headerlink" title="网络流算法"></a>网络流算法</h4><ul><li>假设有一个管道网络，每个管道都有一定的横截面，网络有一个入口和一个出口</li><li>目标是将水通过管道从入口以尽可能大的速率输送到出口</li><li>两个主要限制：通过管道的速度不能超过管道的横截面（容量约束）；在管网的任何连接处，流入的水量必须正好等于流出的水量（流量守恒约束）</li><li>最大流问题要求在给定的有容量图中找到一个最大可能的可行流</li></ul><p><strong>假设</strong></p><ul><li>图G不包含自循环（不含形为(u,u)的边）</li><li>图G不包含多重边，如果$e_1$，$e_2$是从u到v的两条边，容量分别是$c_1$，$c_2$，则可以用一条边容量为$c_1+c_2$的边e表示</li><li>图G有方向性。如果图包含一条无向边(u,v)，可以用两条有向边u-&gt;v和v-&gt;u来代替，每条边的容量都等于c(u,v)</li></ul><p><strong>贪婪算法</strong></p><p>重复下列操作直至所有s~t路径都达到饱和</p><ul><li>寻找带有剩余容量的s~t路径</li><li>让该路径达到饱和</li><li>重复直到没有这种路径存在</li></ul><p>贪婪算法无法保证最优解：单一步骤具有不可撤销的特点</p><p><strong>Ford-Fulkerson算法</strong></p><ul><li>算法的总体思想类似贪婪算法：在每一步通过图选择一条s~t路径，并对其进行饱和</li><li>在剩余图中找到路径，该图明确允许沿先前使用的边反向流动</li><li>给定一个可行流$f$，剩余图$G_f&#x3D;(V_f,E_f)$，容量函数$c_f$按下列方式定义：<ul><li>$V_f&#x3D;V$</li><li>$E_f&#x3D;\left{(u,v)|u,v \in V \wedge (c(u,v) &gt; f(u,v))\right} \cup \left{ (u,v) | u,v \in V \wedge (f(v,u) &gt; 0) \right}$ </li><li>$c_f(u,v)&#x3D;c(u,v)-f(u,v)+f(v,u)$</li></ul></li></ul><p><strong>网络流与割集</strong></p><ul><li>s-t割集是一组边C，使得图$G’&#x3D;(V,E \backslash C)$不包含s~t路径。割集的容量为$cap(C)&#x3D;\sum _{e\in C}c(e)$</li><li>记F为所有可行的流的集合，则对于任意s~t割集C，$cap(C) \ge \max _{f\in F}|f|$</li><li>设$C^*$为G的最小s~t割集，$f^*$是G的最大s-t流，则$cap(C^*) \ge |f^*|$</li></ul><p><strong>主要结论</strong></p><ul><li>如果容量是整数值，Ford-Fulkerson算法可以发现最大流</li><li>最大流量的大小等于最小割集的容量</li><li>算法的运行时间：迭代中的每一步最多需要$O(m)$时间，其中m是边的数目，因为在每次迭代中，流的大小至少增加1，迭代次数的一个简单上界是F，最大流的大小。这是一个$O(mF)$的界。运行时间是一个伪多项式时间。</li></ul><h4 id="排队问题"><a href="#排队问题" class="headerlink" title="排队问题"></a>排队问题</h4><p>问题描述：假设有打乱顺序的一群人站成一个队列，数组people表示队列中一些人的属性（不一定按顺序）。每个$people[i] &#x3D; [h_i,k_i]$表示第$i$个人的身高为$h_i$，前面正好有$k_i$个身高大于或等于$h_i$的人。请重新构造并返回数组people所表示的队列。返回的队列应该格式化为数组queue，其中$queue[j] &#x3D; [h_j,k_j]$是队列中第$j$个人的属性（queue[0]是排在队列前面的人）</p><blockquote><p>示例：输入：people&#x3D;[[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]</p><p>输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]</p></blockquote><h4 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h4><p>随机算法</p><p>在线算法</p><p>经典分治算法应用FFT</p><h3 id="7、排队-x2F-np-x2F-顶点覆盖问题-x2F-二部图匹配（线性规划）"><a href="#7、排队-x2F-np-x2F-顶点覆盖问题-x2F-二部图匹配（线性规划）" class="headerlink" title="7、排队&#x2F;np&#x2F;顶点覆盖问题&#x2F;二部图匹配（线性规划）"></a>7、排队&#x2F;np&#x2F;顶点覆盖问题&#x2F;二部图匹配（线性规划）</h3><h4 id="顶点覆盖问题"><a href="#顶点覆盖问题" class="headerlink" title="顶点覆盖问题"></a>顶点覆盖问题</h4><p><strong>顶点覆盖问题的NP完全性</strong></p><ul><li>Vertex Covering Problem属于NP问题</li><li>任何一个NP完全问题可以规约为顶点覆盖问题</li></ul><p><strong>顶点覆盖问题属于NP</strong></p><ul><li>设计一个多项式时间的验证算法，检验：<ul><li>给定的顶点集合是原图顶点的一个子集</li><li>该顶点集合覆盖了所有的边</li></ul></li><li>上述步骤都可以在多项式时间完成。如果每一步回答都是YES，则返回YES，否则返回NO</li></ul><p><strong>SAT规约为顶点覆盖问题</strong></p><ul><li><p>给定一个3-CNF：</p><p>$\phi &#x3D; (x_1 \vee x_1 \vee x_2) \wedge (\bar x_1 \vee \bar x_2 \vee \bar x_2) \wedge (\bar x_1 \vee x_2 \vee x_2)$</p></li><li><p>设计一个顶点覆盖问题与之等价</p></li></ul><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/2022-04-30_112712.png" alt="2022-04-30_112712"></p><h4 id="二部图匹配"><a href="#二部图匹配" class="headerlink" title="二部图匹配"></a>二部图匹配</h4><p><strong>问题描述</strong></p><ul><li>二部图G&#x3D;(V,E)是顶点集V可分为两个不相交的子集X和Y的图，使得每个边$e \in E$有一个端点在X中，另一个端点在Y中</li><li>一个匹配$M \subseteq E$是边的子集，使得V中的每个节点最多出现在M中的一条边上</li><li>Maximal Matching(极大匹配)是指在不将一个节点的度增加到2的情况下，不能再添加任何边的匹配，是一个局部最大值</li><li>Maximum Matching(最大匹配)是具有尽可能多的匹配，它是全局最优的</li></ul><p><strong>二部图与最大流</strong></p><ul><li>目标：在图中找到最大匹配</li><li>可以容易地找到最大匹配：只需在匹配中添加边，直到无法添加更多的边为止</li><li>可以证明，对于任何极大匹配(maximal matching) $M$，$|M| \ge \frac 1 2|M^*|$，其中$M^*$是最大匹配(maximum matching)</li><li>最大匹配问题可以归结为最大流问题</li></ul><p><strong>二部图匹配与最大流</strong></p><ul><li>在$G&#x3D;(V,E)$基础上构造$G’ &#x3D; (V’,E’)$，其中$V’$除$V$中的节点外还包含源s和汇t，$E’$除E中的边外还包含s到X和Y到t的边</li><li>所有边具有单位容量</li><li>对于大小为k的流，X中的点最多带有一条带流量的出边，Y中3的点最多有一条带流量的入边，X到Y有流量的边的个数是k</li><li>解决最大流问题就解决了最大匹配，时间复杂度$O((m+n)n)$</li></ul><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/2022-04-30_115228.png" alt="2022-04-30_115228"></p><p><strong>完全匹配</strong></p><ul><li><p>完全匹配是指每个节点上正好有一条边的匹配</p></li><li><p>确定给定二部图是否具有完全匹配的一种方法可以先找到最大匹配，再检查匹配的大小是否等于每个部分中的节点数</p></li><li><p>另一种方法利用了霍尔定理</p><blockquote><p>二部图G(V,E)具有完全匹配当且仅当对每个子集$S \sube X$或$S \sube Y$，S的邻域的大小至少和S一样大，即$|\gamma (S)| \ge |S|$</p></blockquote></li></ul><p><strong>调度问题</strong></p><ul><li>假设$J&#x3D;\left{J_1,J_2,\dots,J_n\right}$是一组作业，$T&#x3D;\left{ T_1,T_2,\dots,T_k \right}$为可执行这些作业的机器上的可用时隙</li><li>每个作业$J$都有一组有效的时隙$S_j \in T$，可以对其进行调度；限制条件是不能同时调度两个作业</li><li>问题是如何找到可以调度的最大作业集</li><li>这一问题可以归结为二部匹配：对于每个作业，在$X$中创建一个节点，对于每个时隙，在$Y$中创建一个节点；对于$S_j$中的每个时隙，在$X$和$Y$之间创建一条边。二部图的最大匹配就是可以调度的最大作业集</li></ul><p><strong>调度问题举例</strong></p><ul><li>某家医院有n名医生，每个医生都有一组休假日。有k个假期段供选择，每个假期段连续跨越几天。设$D_j$为第$j$个假期中包含的天数</li><li>在限制条件下，需要最大限度地将医生分配到天，每天一名医生</li><li>限制：每个医生都有一个容量$c_i$，是可以安排的最大总天数，每个假期段，任何一个医生最多安排一次</li></ul><p><strong>转化为最大流问题</strong></p><ul><li>为每个医生$i$创建一个节点$u_i$，为每个休假日$j$创建一个节点$v_j$；从起始节点s添加一条边到$u_i$，从$v_j$加入一条边到汇点$t$</li><li>医生的容量表示为从$s$到$u_i$的边的容量</li><li>从节点$v_j$到$t$的边的容量都设置为1，表示每个假期选择一个医生</li><li>为了防止医生在休假期间被安排多次，引入中间节点：对于任何医生$i$和假期$j$，创建一个中间节点$w_{ij}$并创建一个从$u_i$到$w_{ij}$的单位容量的边。对于休假期间医生有空的每一天，创建一条从$w_{ij}$到该天节点的单位容量边</li></ul><p><strong>加入中间节点</strong></p><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/2022-05-04_102711.png" alt="2022-05-04_102711"></p><p><strong>线性规划</strong></p><ul><li>把最大流可以归结为线性规划问题</li><li>首先考虑最大流问题的一个例子，$G&#x3D;(V,E)$，边$e \in E$的容量为$c_e$</li><li>设变量$f_e$为边$e$上的流量，下面的线性规划可用于最大流问题</li></ul><p>$ max \sum_{v:(s,v) \in E} $ </p><p>subject to $\sum_{u:(u,v) \in E}f(u,v) &#x3D; \sum_{u:(v,u) \in E}f(v,u) $ $\forall v \in V,v \ne s,$ </p><p>$0 \le f_e &lt; c_e $ ，$\forall e \in E$</p><p><strong>线性规划形式</strong></p><p>$min \sum_i c_ix_i$</p><p>subject to $\sum_i A_{ij}x_i \ge b_j$  $\forall j$</p><p>$ x_i \ge 0$  $\forall i$ </p><p><strong>线性规划举例</strong></p><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/90cf3102072a47d92eec4727d52285b.jpg" alt="90cf3102072a47d92eec4727d52285b"></p><h3 id="8、线性代数解法-x2F-随机化算法-x2F-knuth-shuffle-x2F-扩展计数范围-x2F-负载均衡问题-x2F-球和桶-x2F-遗传算法"><a href="#8、线性代数解法-x2F-随机化算法-x2F-knuth-shuffle-x2F-扩展计数范围-x2F-负载均衡问题-x2F-球和桶-x2F-遗传算法" class="headerlink" title="8、线性代数解法&#x2F;随机化算法&#x2F;knuth shuffle&#x2F;扩展计数范围&#x2F;负载均衡问题&#x2F;球和桶&#x2F;遗传算法"></a>8、线性代数解法&#x2F;随机化算法&#x2F;knuth shuffle&#x2F;扩展计数范围&#x2F;负载均衡问题&#x2F;球和桶&#x2F;遗传算法</h3><h4 id="线性代数解法练习"><a href="#线性代数解法练习" class="headerlink" title="线性代数解法练习"></a>线性代数解法练习</h4><p><img src="https://raw.githubusercontent.com/Yoonalis/img/master/2022-05-04_135935.png" alt="2022-05-04_135935"></p><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/09ec96aa4d19bf976ce665f5b08067d.jpg" alt="09ec96aa4d19bf976ce665f5b08067d"></p><h4 id="随机化算法（拉斯维加斯和蒙特卡洛）"><a href="#随机化算法（拉斯维加斯和蒙特卡洛）" class="headerlink" title="随机化算法（拉斯维加斯和蒙特卡洛）"></a>随机化算法（拉斯维加斯和蒙特卡洛）</h4><ul><li><p>随机化算法是一种类似于可以投掷硬币并根据投掷结果采取不同行动的算法，将讨论两种随机算法：</p></li><li><p>Las Vegas：随机化算法总是能给出正确答案，但在某些情况下可能花费更长的时间。它们的“预期”运行时间是输入大小的多项式，意味着所有可能投币的平均运行时间是多项式。</p><ul><li><p>在最坏的情况下，拉斯维加斯算法可能需要指数级的时间。</p></li><li><p>拉斯维加斯算法的一个例子是快速排序：它根据投币量做出一些决策，总是产生正确的结果，其预期运行时间和最坏情况下的运行时间分别是$nlogn$和$n^2$</p></li></ul></li><li><p>Monte Carlo算法：这些是指有时会得出一个错误的答案的随机算法。</p><ul><li>像拉斯维加斯算法一样，它们的预期运行时间是多项式的，但在最坏情况下可能是指数的。</li><li>通常可以通过多次运行Monte Carlo算法，将得到正确答案的概率“提升”到我们喜欢的最小值。</li><li>例如，如果一个特定的蒙特卡洛算法产生一个概率为$\frac 1 4$的错误结果，并且我们有能力洁厕到一个错误的结果，那么在t次独立运行之后，没有得到正确答案的概率是$(\frac 1 4)^t$。</li><li>在某些优化问题中，我们没有能力检测错误的答案，但可以比较不同的答案，并选择最好的一个。</li></ul></li></ul><blockquote><p>拉斯维加斯算法：采样越多，越有机会找到最优解（试钥匙）</p><p>蒙特卡罗算法：采样越多，越近似最优解（挑最大的苹果）</p></blockquote><p><strong>随机化的优势</strong></p><p>随机算法相比确定型算法具有几个有点：</p><ul><li>简单性。对于相同的任务，随机算法往往比确定型算法简单。例如，快速排序枢纽元的选择。</li><li>效率。对于某些问题，随机算法比确定型算法具有更好的渐近运行时间：对某些问题，确定型算法是以指数时间运行的，而随机算法是已知多项式时间的。</li><li>当算法面临信息不足时，随机化是非常有用的。</li></ul><h4 id="Karger随机化算法"><a href="#Karger随机化算法" class="headerlink" title="Karger随机化算法"></a>Karger随机化算法</h4><h4 id="knuth-shuffle"><a href="#knuth-shuffle" class="headerlink" title="knuth shuffle"></a>knuth shuffle</h4><p>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shuffle</span>(<span class="hljs-params">a,n</span>):<br>    tmp = a[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">1</span> &gt;= n: <span class="hljs-keyword">return</span> a<br>    i = random.randint(<span class="hljs-number">1</span>,n-<span class="hljs-number">1</span>)<br>    a[<span class="hljs-number">0</span>] = a[i]<br>    a[i] = tmp<br>    shuffle(a[<span class="hljs-number">1</span>:],n-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> a<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    a = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]<br>    n = <span class="hljs-built_in">len</span>(a)<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-built_in">print</span>(shuffle(a,n))<br></code></pre></td></tr></table></figure><blockquote><p>可能因为依赖的<code>random.randint()</code>这个函数，感觉在短时间内的随机性不是很好</p></blockquote><h4 id="扩展计数范围"><a href="#扩展计数范围" class="headerlink" title="扩展计数范围"></a>扩展计数范围</h4><p>问题描述：给一个能在1-7中取随机的<code>rand7()</code>，设计一个能在1-10中取随机的<code>rand10()</code>，要求取到每个数的概率相等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rand7</span>():<br>    <span class="hljs-keyword">return</span> random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rand10</span>():<br>    x=-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> x == -<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> x &gt; <span class="hljs-number">40</span>:<br>        x = (rand7() - <span class="hljs-number">1</span>) * <span class="hljs-number">7</span> + rand7()<br>    x = x%<span class="hljs-number">10</span>+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-built_in">print</span>(rand10())<br></code></pre></td></tr></table></figure><h4 id="负载均衡问题"><a href="#负载均衡问题" class="headerlink" title="负载均衡问题"></a>负载均衡问题</h4><ul><li>在多个资源之间分配任务</li><li>例如，Nginx一种支持反向代理的开源Web服务器，可以用于高性能的负载均衡</li><li>在网络服务器之间合理分配请求，使每个服务器的工作量基本相同</li><li>简单的方法就是把任务以均匀分布方式分发给服务器</li></ul><p><strong>Nginx负载均衡方法</strong></p><ul><li>Round-Robin：对应用服务器的请求按照轮转方式分配</li><li>最少连接数：将下一条请求分配给活跃连接数最少的服务器</li><li>IP-hash：基于客户端的IP地址，使用哈希函数来决定为下一条请求分配哪一个服务器</li></ul><h4 id="球和桶"><a href="#球和桶" class="headerlink" title="球和桶"></a>球和桶</h4><ul><li>考虑把m个球扔进n个桶的过程</li><li>每一个球都以$\frac 1 n$的概率进入不同的桶，独立于其他的球</li><li>碰撞：两个球扔进同一个桶</li></ul><p><strong>基本结论</strong></p><ul><li><p>两球碰撞的概率是多少？</p></li><li><p>使用贝叶斯定理，再计算边际概率</p></li><li><p>把球i进入桶j的事件记作$B_i^j$</p><p>$Pr[Col_{12}] &#x3D; \sum^2_{i&#x3D;1}Pr[B^i_2|B^i_1]Pr[B^i_1] &#x3D; \sum^n_{i&#x3D;1} \frac 1 n Pr[B^i_1] &#x3D; \frac 1 n$</p></li><li><p>m个球进入n个桶相撞次数的期望值是：$\sum_{i \ne j}Pr[Col_{ij}]&#x3D;\frac 1 n C^2_m$</p></li><li><p>一个桶为空的概率是多少？一个球不落入桶i的概率是$1-\frac 1 n$，因此桶始终为空的概率是$(1-\frac 1 n)^n \to \frac 1 e$</p></li><li><p>空桶个数的期望值是多少？$\frac n e$</p></li><li><p>一个桶内恰好有k个球的概率是多少？$C_n^k(\frac 1 n)^k(1-\frac 1 n)^{n-k} \le \frac {n^k} {k!} \frac 1 {n^k} &#x3D; \frac 1 {k!}$</p></li><li><p>一个桶内至少有k个球的概率是多少？$\le C^k_n(\frac 1 n)^k \le (\frac e k)^k$</p></li></ul><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/2022-05-06_152213.png" alt="2022-05-06_152213"></p><h4 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h4><p><strong>介绍</strong></p><ul><li>遗传算法是一种优化算法，用来寻找最大化或最小化的一个特定的函数的最优解</li><li>遗传算法是一个演化计算研究领域的一个分支，模拟繁殖和自然选择的生物过程来求解问题</li><li>与进化论一样，遗传算法的许多过程都是随机的，但允许人们设置随机水平和控制水平，比随机搜索和穷举搜索算法更强大和有效</li><li>优势在于不需要关于给定问题的额外信息，找到其他优化方法由于缺乏连续性、导数、线性或其他特性而无法处理的问题的解</li></ul><p><strong>算法的构成</strong></p><p>模拟生物过程设计，相关术语多从生物学中借用，但比其生物对应物要简单。具体包含如下组成部分：</p><ul><li>一个用于优化的适应度函数</li><li>一个染色体群体</li><li>选择哪些染色体将繁殖的方式</li><li>产生下一代染色体的交叉方式</li><li>新一代染色体中的随机变异</li></ul><p><strong>适应度函数</strong></p><ul><li>适应度函数是指算法力图优化的指标函数</li><li>适应度一词源自进化论，用适应度函数测试并量化每个潜在解决方案的适合程度</li><li>设计适应度函数是算法中最关键的部分之一</li><li>从随机选择的染色体初始群体开始，遗传算法用适应度函数对群体中的每一条染色体进行评估，检验它们解决问题的好坏</li></ul><h3 id="9、演化算法-x2F-模拟退火算法"><a href="#9、演化算法-x2F-模拟退火算法" class="headerlink" title="9、演化算法&#x2F;模拟退火算法"></a>9、演化算法&#x2F;模拟退火算法</h3><h4 id="遗传算法-1"><a href="#遗传算法-1" class="headerlink" title="遗传算法"></a>遗传算法</h4><p><strong>适应度函数</strong></p><ul><li>适应度函数是指算法力图优化的指标函数</li><li>适应度一词源自进化论，用适应度函数测试并量化每个潜在解决方案的适合程度</li><li>设计适应度函数是算法中最关键的部分之一</li><li>从随机选择的染色体初始群体开始，遗传算法用适应度函数对群体中的每一条染色体将进行评估，检验它们解决问题的好坏</li></ul><p><strong>染色体</strong></p><ul><li>染色体是指代表遗传算法候选解决方案一个或多个数值</li><li>每个候选解都被编码为一组参数值，如果问题具有维度n，则通常每个染色体编码为n元数组：$chromosome&#x3D;[p_1,p_2,…,p_n]$，其中每个$p_i$是第i个参数的取值</li><li>将候选解的样本空间转化为染色体是遗传算法的关键，例如二进制可将每个参数值转换为一个0&#x2F;1字符串以创建染色体</li></ul><p><strong>选择算子</strong></p><ul><li>选择算子根据用户定义的概率分布选择一些染色体进行复制</li><li>染色体fitness越高，被选中的可能性就越大。例如，如果f是一个非负适应度函数，那么选择$C_{25}$染色体进行繁殖的概率可以设成$Pr(C_{25} &#x3D; \frac {f(C_{25})} {\sum_i^n f(C_i)} )$</li><li>选择算子以带替换的方式选择染色体，因此同一染色体可以多次选择</li></ul><p><strong>Roullete</strong></p><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/2022-05-06_200508.png" alt="2022-05-06_200508"></p><p><strong>交叉算子与变异算子</strong></p><ul><li>交叉算子类似于细胞减数分裂中染色体的生物交叉和重组</li><li>该操作符交换两条所选染色体的子序列来产生两个后代。例如，如果父代染色体为[11010111001000],[01011101010010]，在第四位之后交换，则子代染色体为[01010111001000],[11011101010010]</li><li>变异算子随机翻转新染色体中的单个位(将0变为1，反之亦然)，通常把变异发生的概率设为很低，如0.001</li></ul><p><strong>遗传算法的步骤</strong></p><ul><li>随机产生初始种群</li><li>选择其中一组进行交配，繁殖下一代，使用交叉算子</li><li>使用变异算子</li><li>得到子代后，重新评估适应度函数，接收则停止，否则返回第二步</li></ul><p><strong>单变量函数的优化</strong></p><p><strong>代际更替</strong></p><p><strong>连续值遗传算法</strong></p><p><strong>遗传算法的问题</strong></p><ul><li>如果算法需要搜索连续值，则需要把染色体转换为实数值数组</li><li>算法的解受到浮点数精度的制约</li><li>连续值遗传算法可以比二进制遗传算法更快，因为在计算适应度值时无需预先解码</li><li>例如，适应度函数为$f(x) &#x3D; 2xsin(x)+ysin(2y)$，$chromosone&#x3D;[x,y]$，$0 \le x \le 10,0 \le y \le 10$</li><li>可以提升变异概率，保留部分上一代的个体进入下一代。需要设计新的选择概率形式和交叉算子</li></ul><p><strong>遗传算法应用</strong></p><ul><li><p>背包问题：选择物品，在满足重量约束下使价值最高</p></li><li><p>染色体编码：二进制编码，位数与物品数量一致，1代表放入，0表示不放</p></li><li><p>适应度函数：不超出重量限制时取价值之和，否则设为-1</p></li><li><p>选择概率：$Pr(x_i) &#x3D; \frac {e^{f(x_i)}} {\sum ^n_j e^{f(x_j)}}$</p></li></ul><p><strong>遗传算法问题</strong></p><ul><li>每一代种群相当于一组可行解</li><li>按照概率分布探索解空间的不同区域</li><li>优点：较少的迭代次数，较低的计算强度，可以设计不同的适应度函数求解复杂的优化问题</li><li>困难：收敛过快，易于陷入局部最优；交叉和变异可能导致进入不可行的区域</li></ul><h5 id="遗传算法实现"><a href="#遗传算法实现" class="headerlink" title="遗传算法实现"></a>遗传算法实现</h5><p>种群初始化：通过随机生成的方式来创造一个种群，采用二进制将一个染色体编码为基因型，随后用进制转化，将二进制的基因型转化为十进制的表现型。</p><p>适应度计算（种群评估）：将目标函数值作为个体的适应度。</p><p>选择（复制）操作：根据种群中个体的适应度大小，通过轮盘赌等方式将适应度高的个体从当前种群中选择出来。其中轮盘赌即是与适应度成正比的概率来确定各个个体遗传到下一代群体中的数量。具体步骤如下：</p><ul><li>首先计算所有个体的适应度总和$\sum f_i$</li><li>其次计算出每个个体的相对适应度大小$\frac {f_i} {\sum_{f_i}}$</li><li>再产生一个0到1之间的随机数，依据随机数出现在上述哪个概率区域来确定各个个体被选中的次数</li></ul><p>交叉（交配）运算：该步骤是遗传算法中产生新的个体的主要操作过程，它用一定的交配概率阈值(pc，一般是0.4到0.99)来控制是否采取单点交叉，多点交叉等方式生成新的交叉个体。具体步骤如下：</p><ul><li>先对群体随机配对</li><li>再随机设定交叉点的位置</li><li>再互换配对染色体间的部分基因</li></ul><p>变异运算：该步骤是产生新的个体的另一种操作。一般先随机产生变异点，再根据变异概率阈值(pm，一般是0.0001到0.1)将变异点原有基因取反</p><p>终止判断：如果满足条件（迭代次数，一般是200~500）则终止算法，否则返回适应度计算</p><p><strong>代码实现</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> cm<br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<br><br><span class="hljs-comment"># sample:计算F(x,y)在[-3,3]和[-3,3]里的最大值</span><br><br><span class="hljs-comment"># 初始化</span><br>DNA_SIZE = <span class="hljs-number">24</span><br>POP_SIZE = <span class="hljs-number">200</span><br>CROSSOVER_RATE = <span class="hljs-number">0.8</span><br>MUTATION_RATE = <span class="hljs-number">0.005</span><br>N_GENERATIONS = <span class="hljs-number">50</span><br>X_BOUND = [-<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]<br>Y_BOUND = [-<span class="hljs-number">3</span>,<span class="hljs-number">3</span>]<br><br><span class="hljs-comment"># 目标函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">F</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>*(<span class="hljs-number">1</span>-x)**<span class="hljs-number">2</span>*np.exp(-(x**<span class="hljs-number">2</span>)-(y+<span class="hljs-number">1</span>)**<span class="hljs-number">2</span>)-<span class="hljs-number">10</span>*(x/<span class="hljs-number">5</span>- x**<span class="hljs-number">3</span> - y**<span class="hljs-number">5</span>)*np.exp(-x**<span class="hljs-number">2</span>-y**<span class="hljs-number">2</span>)-<span class="hljs-number">1</span>/<span class="hljs-number">3</span>**np.exp(-(x+<span class="hljs-number">1</span>)**<span class="hljs-number">2</span> - y**<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 适应度函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_fitness</span>(<span class="hljs-params">pop</span>):<br>    x,y = translateDNA(pop)<br>    pred = F(x,y)<br>    <span class="hljs-keyword">return</span> (pred - np.<span class="hljs-built_in">min</span>(pred)) + <span class="hljs-number">1e-3</span><br><br><span class="hljs-comment"># 解码函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">translateDNA</span>(<span class="hljs-params">pop</span>):<br>    x_pop = pop[:,<span class="hljs-number">1</span>::<span class="hljs-number">2</span>] <span class="hljs-comment"># 奇数列</span><br>    y_pop = pop[:,::<span class="hljs-number">2</span>] <span class="hljs-comment"># 偶数列</span><br>    x = x_pop.dot(<span class="hljs-number">2</span>**np.arange(DNA_SIZE)[::-<span class="hljs-number">1</span>])/<span class="hljs-built_in">float</span>(<span class="hljs-number">2</span>**DNA_SIZE-<span class="hljs-number">1</span>)*(X_BOUND[<span class="hljs-number">1</span>]-X_BOUND[<span class="hljs-number">0</span>])+X_BOUND[<span class="hljs-number">0</span>]<br>    y = y_pop.dot(<span class="hljs-number">2</span>**np.arange(DNA_SIZE)[::-<span class="hljs-number">1</span>])/<span class="hljs-built_in">float</span>(<span class="hljs-number">2</span>**DNA_SIZE-<span class="hljs-number">1</span>)*(Y_BOUND[<span class="hljs-number">1</span>]-Y_BOUND[<span class="hljs-number">0</span>])+Y_BOUND[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> x,y<br><br><span class="hljs-comment"># 交叉变异</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">crossover_and_mutation</span>(<span class="hljs-params">pop,CROSSOVER_RATE = <span class="hljs-number">0.8</span></span>):<br>    new_pop = []<br>    <span class="hljs-keyword">for</span> father <span class="hljs-keyword">in</span> pop:<br>        child = father<br>        <span class="hljs-keyword">if</span> np.random.rand() &lt; CROSSOVER_RATE:<br>            mother = pop[np.random.randint(POP_SIZE)]<br>            cross_points = np.random.randint(low=<span class="hljs-number">1</span>,high=DNA_SIZE*<span class="hljs-number">2</span>)<br>            child[cross_points:] = mother[cross_points:]<br>        mutation(child)<br>        new_pop.append(child)<br>    <span class="hljs-keyword">return</span> new_pop<br><br><span class="hljs-comment"># 变异</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mutation</span>(<span class="hljs-params">child,MUTATION_RATE=<span class="hljs-number">0.001</span></span>):<br>    <span class="hljs-keyword">if</span> np.random.rand() &lt; MUTATION_RATE:<br>        mutate_point = np.random.randint(<span class="hljs-number">0</span>,DNA_SIZE*<span class="hljs-number">2</span>)<br>        child[mutate_point] = child[mutate_point]^<span class="hljs-number">1</span><br><br><span class="hljs-comment"># 选择</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">select</span>(<span class="hljs-params">pop, fitness</span>):<br>    idx = np.random.choice(np.arange(POP_SIZE),size=POP_SIZE,replace=<span class="hljs-literal">True</span>,p=(fitness)/(fitness.<span class="hljs-built_in">sum</span>()))<br>    <span class="hljs-keyword">return</span> pop[idx]<br><br><span class="hljs-comment"># 打印结果</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_info</span>(<span class="hljs-params">pop</span>):<br>    fitness = get_fitness(pop)<br>    max_fitness_index = np.argmax(fitness)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;max_fitness:&quot;</span>,fitness[max_fitness_index])<br>    x,y = translateDNA(pop)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;最优的基因型：&quot;</span>,pop[max_fitness_index])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;(x,y):&quot;</span>,(x[max_fitness_index],y[max_fitness_index]))<br><br><span class="hljs-comment"># 可视化</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">plot_3d</span>(<span class="hljs-params">ax</span>):<br><br>    X = np.linspace(*X_BOUND, <span class="hljs-number">100</span>)<br>    Y = np.linspace(*Y_BOUND, <span class="hljs-number">100</span>)<br>    X,Y = np.meshgrid(X,Y)<br>    Z = F(X,Y)<br>    ax.plot_surface(X,Y,Z,rstride=<span class="hljs-number">1</span>,cstride=<span class="hljs-number">1</span>,cmap=cm.coolwarm)<br>    ax.set_zlim(-<span class="hljs-number">10</span>,<span class="hljs-number">10</span>)<br>    ax.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>    ax.set_ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>    ax.set_zlabel(<span class="hljs-string">&#x27;z&#x27;</span>)<br>    plt.pause(<span class="hljs-number">3</span>)<br>    plt.show()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GAs</span>():<br><br>    fig = plt.figure()<br>    ax = Axes3D(fig)<br>    plt.ion()<br>    plot_3d(ax)<br><br>    <span class="hljs-comment"># 随机产生初始种群</span><br>    pop = np.random.randint(<span class="hljs-number">2</span>,size=(POP_SIZE,DNA_SIZE*<span class="hljs-number">2</span>))<br><br>    <span class="hljs-comment"># 迭代N代</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N_GENERATIONS):<br>        x,y = translateDNA(pop)<br><br>        <span class="hljs-comment"># 可视化</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;sca&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">locals</span>():<br>            sca.remove()<br>        sca = ax.scatter(x,y,F(x,y),c=<span class="hljs-string">&#x27;black&#x27;</span>,marker=<span class="hljs-string">&#x27;o&#x27;</span>);plt.show();plt.pause(<span class="hljs-number">0.1</span>)<br><br>        pop = np.array(crossover_and_mutation(pop,CROSSOVER_RATE))<br>        fitness = get_fitness(pop)<br>        pop = select(pop,fitness)<br><br>    print_info(pop)<br>    plt.ioff()<br>    plot_3d(ax)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    GAs()<br></code></pre></td></tr></table></figure><h4 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h4><ul><li>模拟退火算法采用Monte Carlo方法，模仿金属退火时的加热-冷却过程来求解最大规模组合优化问题</li><li>与遗传算法相似，采用随机方式探索解空间，可用于非连续、不可微、非凸问题</li><li>与遗传算法不同，模拟退火在理论上具有可以保证的收敛性</li><li>遗传算法种群中的每一个点具有独立性，可以并行执行；模拟退火算法从单点出发，在存在很多局部最优解的情况下可以跳出局部寻找全局最优</li></ul><p> <strong>退火</strong></p><ul><li><p>固体材料加热到超过熔点，然后冷却回固体状态</p></li><li><p>最终的结构取决于冷却的方式</p><ul><li>缓慢冷却–大晶体（能量低）</li><li>快速冷却–缺陷（能量高）</li></ul></li><li><p>Metropolis算法模拟系统在冷却过程中能量变化，系统会最终收敛到某种能量的“冻结”状态</p></li><li><p>根据热力学：在温度T时，能量增加$\delta E$的概率为：$P(\triangle E) &#x3D; e^{-\frac {\delta E} {kT}}$</p></li></ul><p><strong>模拟退火算法实施</strong></p><ul><li>与一般的爬山法相似，区别在于不是接受最佳移动，而是接受一个随机移动</li><li>如果移动改进了结果，则接受；否则算法以一个小于1的概率采取这种移动（Metropolis判据）</li><li>接受概率与移动使解变坏的程度$\triangle E$有关，与其指数成反比：$Pr(\text{accepting uphill move}) \sim 1-e^{\frac {\triangle E} {kT}}$</li><li>参数T表示退火时的温度，T越大，接受的概率越大；k实质是Boltzmann常数。选择参数T逐步下降，$T(k+1)&#x3D;\alpha T(k), \alpha &lt; 1$</li></ul><p><strong>退火过程</strong></p><ul><li>凝聚态物理中，固体液化时在加热后需要冷却，使粒子在低能量状态下重新组织为晶格形式</li><li>在寻优过程中，允许偶发的上升，逃脱局部最优的陷阱</li></ul><p><img src="/blog/2022/09/01/%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/2022-05-07_163131.png" alt="2022-05-07_163131"></p><p><strong>模拟退火过程</strong></p><ul><li>设置初始温度</li><li>重复下列步骤<ol><li>按预定次数执行<ul><li>生成一个扰动</li><li>如果能量下降，接受新的状态；否则以$P(\triangle E)$接受新的概率状态</li><li>降低温度</li></ul></li><li>直到冻结</li></ol></li></ul><p><strong>分析</strong></p><ul><li>在高温下，接受更差步骤的概率更改。如果$T&#x3D;\infin$，所有动作均可接受，对应于随机局部行走</li><li>在低温下，接受更差步骤的概率降低。如果$T&#x3D;0$，不接受更差的移动，搜索等同于局部搜索</li><li>接受解的质量大幅度退化的概率呈指数下降，趋近于0</li><li>温度必须足够高才允许移动到几乎所有邻近状态</li></ul><p><strong>分析</strong></p><ul><li>平稳分布（玻尔兹曼）：$P(x) ∝ e^{\frac {E(x)} T}$</li><li>如果T下降的足够慢，就会收敛到最优状态</li><li>考虑两个相邻状态x,y，$E(y) &lt; E(x)$</li><li>假设x→y和y→x且出度D(x)&#x3D;D(y)&#x3D;D</li><li>设P(x),P(y)为T点的均衡占有概率，P(x→y)是状态x跃迁到状态y的概率</li><li>为了避开局部最优，需要的爬坡步数越多，越不可能连续爬坡</li><li>“足够慢”也许意味着指数级的慢</li></ul><h5 id="模拟退火实现"><a href="#模拟退火实现" class="headerlink" title="模拟退火实现"></a>模拟退火实现</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> matplotlib.animation <span class="hljs-keyword">as</span> animation<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> mpl_toolkits.mplot3d <span class="hljs-keyword">import</span> Axes3D<br><br><span class="hljs-comment"># sample: 求解一元函数y=x+10sin(5x)+7cos(4x)的最大值</span><br><br><span class="hljs-comment"># 判断函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Judge</span>(<span class="hljs-params">deltaE,T</span>):<br>    <span class="hljs-keyword">if</span> deltaE &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># probability会变大</span><br>        probability = math.exp(deltaE/T)<br>        <span class="hljs-comment"># random.random() 用于生成一个0到1的随机浮点数</span><br>        <span class="hljs-keyword">if</span> probability &gt; random.random():<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br><span class="hljs-comment"># 为当前解添加随机扰动</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Disturbance</span>(<span class="hljs-params">low,high,x_old</span>):<br>    <span class="hljs-keyword">if</span> random.random() &gt; <span class="hljs-number">0.5</span>:<br>        x_new = x_old + (high-x_old)*random.random()<br>    <span class="hljs-keyword">else</span>:<br>        x_new = x_old - (x_old-low)*random.random()<br>    <span class="hljs-keyword">return</span> x_new<br><br><span class="hljs-comment"># 优化目标函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Func</span>(<span class="hljs-params">x</span>):<br>    y = x+<span class="hljs-number">10</span>*math.sin(<span class="hljs-number">5</span>*x)+<span class="hljs-number">7</span>*math.cos(<span class="hljs-number">4</span>*x)<br>    <span class="hljs-keyword">return</span> y<br><br><span class="hljs-comment"># 退火过程</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SA</span>(<span class="hljs-params">low,high,T,T_min,alpha,counter</span>):<br>    c = <span class="hljs-number">0</span><br>    x_old = low+(high-low)*random.random()<br>    x_new = x_old<br>    value_old = Func(x_old)<br>    value_new = Func(x_new)<br>    record_x = []<br>    record_y = []<br>    <span class="hljs-keyword">while</span> T &gt; T_min <span class="hljs-keyword">and</span> c &lt; counter:<br>        x_new = Disturbance(low, high, x_old)<br>        value_new = Func(x_new)<br>        deltaE = value_new - value_old<br>        <span class="hljs-comment"># 求最大值：deltaE&gt;0更优 deltaE&lt;0更劣 </span><br>        <span class="hljs-keyword">if</span> Judge(deltaE,T) == <span class="hljs-number">1</span>:<br>            value_old = value_new<br>            record_x.append(x_new)<br>            record_y.append(value_new)<br>            x_old = x_new<br>        <span class="hljs-keyword">if</span> deltaE &gt; <span class="hljs-number">0</span>:<br>            T = T*alpha<br>        <span class="hljs-keyword">else</span>:<br>            counter += <span class="hljs-number">1</span><br>    <br>    <span class="hljs-comment"># 可视化</span><br>    <span class="hljs-comment"># 第一个图：显示x,y各自的取值</span><br>    length = <span class="hljs-built_in">len</span>(record_x)<br>    index = [i+<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length)]<br>    plt.plot(index,record_y)<br>    plt.plot(index,record_x)<br>    <br>    <span class="hljs-comment"># 第二个图：显示x,y曲线</span><br>    x = np.linspace(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>,<span class="hljs-number">10000</span>)<br>    y = x+<span class="hljs-number">10</span>*np.sin(<span class="hljs-number">5</span>*x)+<span class="hljs-number">7</span>*np.cos(<span class="hljs-number">4</span>*x)<br>    plt.plot(x,y)<br><br>    <span class="hljs-comment"># 绘制动画</span><br>    fig, ax = plt.subplots()<br>    l = ax.plot(x,y)<br>    dot, = ax.plot([],[],<span class="hljs-string">&#x27;ro&#x27;</span>)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>        ax.set_xlim(<span class="hljs-number">0</span>,<span class="hljs-number">10</span>)<br>        ax.set_ylim(-<span class="hljs-number">16</span>,<span class="hljs-number">25</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_dot</span>():<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> index:<br>            newdot = [record_x[i-<span class="hljs-number">1</span>],record_y[i-<span class="hljs-number">1</span>]]<br>            <span class="hljs-keyword">yield</span> newdot<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">update_dot</span>(<span class="hljs-params">newd</span>):<br>        dot.set_data(newd[<span class="hljs-number">0</span>],newd[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">return</span> dot,<br><br>    ani = animation.FuncAnimation(<br>        fig, update_dot, frames = gen_dot, repeat = <span class="hljs-literal">False</span>, <br>        interval = <span class="hljs-number">10</span>, init_func = init)<br><br>    plt.show()<br><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    SA(<span class="hljs-number">0</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1e5</span>,<span class="hljs-number">1e-3</span>,<span class="hljs-number">0.98</span>,<span class="hljs-number">1000</span>)<br></code></pre></td></tr></table></figure><p><strong>练习</strong></p><ul><li>函数形式：$f(x)&#x3D;x^3-60x^2+900x+100$</li><li>编码x：5位二进制整数</li><li>邻域：随机反转某一位的值</li><li>初始值：$x_0&#x3D;0x10101,T_0&#x3D;800$</li><li>冷却方案：$T_k&#x3D;0.9T_{k-1}$</li></ul><h3 id="10、分治算法回顾-x2F-矩阵运算-x2F-流算法-x2F-在线算法"><a href="#10、分治算法回顾-x2F-矩阵运算-x2F-流算法-x2F-在线算法" class="headerlink" title="10、分治算法回顾&#x2F;矩阵运算&#x2F;流算法&#x2F;在线算法"></a>10、分治算法回顾&#x2F;矩阵运算&#x2F;流算法&#x2F;在线算法</h3><h4 id="大作业"><a href="#大作业" class="headerlink" title="大作业"></a>大作业</h4><p>8min PPT：问题的定义、算法、分析、实现及举例</p><p> 时间空间复杂度 不足及改进的思路</p><p>周六实验课演示</p><p>可选主题：寻找最近邻点问题、寻找凸包问题、最长公共子序列问题、最优二叉搜索树、人员分配问题、旅行商问题(TSP)、A*算法、素数检验问题、子集和问题近似求解、顶点覆盖问题</p><h4 id="分治算法回顾"><a href="#分治算法回顾" class="headerlink" title="分治算法回顾"></a>分治算法回顾</h4><p>矩阵运算</p><h5 id="Strassen算法"><a href="#Strassen算法" class="headerlink" title="Strassen算法"></a>Strassen算法</h5><h4 id="流算法"><a href="#流算法" class="headerlink" title="流算法"></a>流算法</h4><h3 id="11、"><a href="#11、" class="headerlink" title="11、"></a>11、</h3><h3 id="12、实验课（pre）"><a href="#12、实验课（pre）" class="headerlink" title="12、实验课（pre）"></a>12、实验课（pre）</h3><h4 id="x3D-x3D-寻找最近邻点问题-x3D-x3D"><a href="#x3D-x3D-寻找最近邻点问题-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;寻找最近邻点问题&#x3D;&#x3D;"></a>&#x3D;&#x3D;寻找最近邻点问题&#x3D;&#x3D;</h4><h4 id="x3D-x3D-寻找凸包问题-x3D-x3D"><a href="#x3D-x3D-寻找凸包问题-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;寻找凸包问题&#x3D;&#x3D;"></a>&#x3D;&#x3D;寻找凸包问题&#x3D;&#x3D;</h4><h4 id="x3D-x3D-最长公共子序列问题-x3D-x3D"><a href="#x3D-x3D-最长公共子序列问题-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;最长公共子序列问题&#x3D;&#x3D;"></a>&#x3D;&#x3D;最长公共子序列问题&#x3D;&#x3D;</h4><h4 id="x3D-x3D-最优二叉搜索树-x3D-x3D"><a href="#x3D-x3D-最优二叉搜索树-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;最优二叉搜索树&#x3D;&#x3D;"></a>&#x3D;&#x3D;最优二叉搜索树&#x3D;&#x3D;</h4><h4 id="x3D-x3D-人员分配问题-x3D-x3D"><a href="#x3D-x3D-人员分配问题-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;人员分配问题&#x3D;&#x3D;"></a>&#x3D;&#x3D;人员分配问题&#x3D;&#x3D;</h4><h4 id="x3D-x3D-旅行商问题（TSP）-x3D-x3D"><a href="#x3D-x3D-旅行商问题（TSP）-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;旅行商问题（TSP）&#x3D;&#x3D;"></a>&#x3D;&#x3D;旅行商问题（TSP）&#x3D;&#x3D;</h4><h4 id="x3D-x3D-A-算法-x3D-x3D"><a href="#x3D-x3D-A-算法-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;A*算法&#x3D;&#x3D;"></a>&#x3D;&#x3D;A*算法&#x3D;&#x3D;</h4><h4 id="x3D-x3D-素数检验问题-x3D-x3D"><a href="#x3D-x3D-素数检验问题-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;素数检验问题&#x3D;&#x3D;"></a>&#x3D;&#x3D;素数检验问题&#x3D;&#x3D;</h4><h4 id="x3D-x3D-子集和问题近似求解-x3D-x3D"><a href="#x3D-x3D-子集和问题近似求解-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;子集和问题近似求解&#x3D;&#x3D;"></a>&#x3D;&#x3D;子集和问题近似求解&#x3D;&#x3D;</h4><h4 id="x3D-x3D-顶点覆盖问题-x3D-x3D"><a href="#x3D-x3D-顶点覆盖问题-x3D-x3D" class="headerlink" title="&#x3D;&#x3D;顶点覆盖问题&#x3D;&#x3D;"></a>&#x3D;&#x3D;顶点覆盖问题&#x3D;&#x3D;</h4>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>随机化算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>react</title>
    <link href="/blog/2022/08/12/react/"/>
    <url>/blog/2022/08/12/react/</url>
    
    <content type="html"><![CDATA[<h2 id="react"><a href="#react" class="headerlink" title="react"></a>react</h2><p>常看常新</p><h3 id="1-npx可以不用管node版本的限制，先下载，之后删掉，不占电脑空间"><a href="#1-npx可以不用管node版本的限制，先下载，之后删掉，不占电脑空间" class="headerlink" title="1. npx可以不用管node版本的限制，先下载，之后删掉，不占电脑空间"></a>1. npx可以不用管node版本的限制，先下载，之后删掉，不占电脑空间</h3><p>快速新建一个react项目：<code>npx create-react-app demo</code></p><h3 id="2-组件名称要大写"><a href="#2-组件名称要大写" class="headerlink" title="2. 组件名称要大写"></a>2. 组件名称要大写</h3><h3 id="3-JS中出现-代表其中想要写html"><a href="#3-JS中出现-代表其中想要写html" class="headerlink" title="3. JS中出现()代表其中想要写html"></a>3. JS中出现()代表其中想要写html</h3><h3 id="4-html中出现-代表其中想要写js"><a href="#4-html中出现-代表其中想要写js" class="headerlink" title="4. html中出现{}代表其中想要写js"></a>4. html中出现{}代表其中想要写js</h3><h3 id="5-语法🍬："><a href="#5-语法🍬：" class="headerlink" title="5. 语法🍬："></a>5. 语法🍬：</h3><p>在vs code中配置jsx的语法：在设置中搜素include languages，添加”javascript”: “javascriptreact“，将Trigger Expansion On Tab设置为启用</p><p>安装es7插件，rcc+tab或rfc+tab改变人生（类组件和函数式组件</p><p>在settings.json中添加    “editor.formatOnSave”: true,  可以在保存时自动格式化代码</p><h3 id="6-普通变量的值变化不会触发视图更新，可以使用setState来更新视图"><a href="#6-普通变量的值变化不会触发视图更新，可以使用setState来更新视图" class="headerlink" title="6. 普通变量的值变化不会触发视图更新，可以使用setState来更新视图"></a>6. 普通变量的值变化不会触发视图更新，可以使用setState来更新视图</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; <span class="hljs-title class_">Component</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> num = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Component</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">props</span>) &#123;<br>        <span class="hljs-variable language_">super</span>(props)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span> = &#123;<br>            <span class="hljs-attr">num</span>: <span class="hljs-number">1</span><br>        &#125;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">addNum</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">addNum</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br>    <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> (<br>            <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>数字为：&#123;this.state.num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">                &#123;/* 改变值且刷新页面的四种写法 */&#125;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.setState(&#123; num: this.state.num + 1 &#125;)&#125;&gt;累加1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.addNum.bind(this)&#125;</span>&gt;</span>累加2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> this.addNum()&#125;&gt;累加3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.addNum&#125;</span>&gt;</span>累加3<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>        )<br>    &#125;<br>    <span class="hljs-title function_">addNum</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setState</span>(&#123; <span class="hljs-attr">num</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">state</span>.<span class="hljs-property">num</span> + <span class="hljs-number">1</span> &#125;)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-给自定义的方法传递参数："><a href="#7-给自定义的方法传递参数：" class="headerlink" title="7. 给自定义的方法传递参数："></a>7. 给自定义的方法传递参数：</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;button onClick=&#123;<span class="hljs-variable language_">this</span>.<span class="hljs-property">btnClick</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-number">1</span>)&#125;&gt;按钮<span class="hljs-number">1</span>&lt;/button&gt;<br><span class="hljs-title function_">btnClick</span>(<span class="hljs-params">num</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num)<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="8-函数式组件没有生命周期，没有this，函数式组件没有state状态，主要用Hook：React官方提供的hook-x2F-开发人员自定义的hook"><a href="#8-函数式组件没有生命周期，没有this，函数式组件没有state状态，主要用Hook：React官方提供的hook-x2F-开发人员自定义的hook" class="headerlink" title="8. 函数式组件没有生命周期，没有this，函数式组件没有state状态，主要用Hook：React官方提供的hook&#x2F;开发人员自定义的hook"></a>8. 函数式组件没有生命周期，没有this，函数式组件没有state状态，主要用Hook：React官方提供的hook&#x2F;开发人员自定义的hook</h3><h3 id="9-hook-只能用在组件函数的最顶层"><a href="#9-hook-只能用在组件函数的最顶层" class="headerlink" title="9. hook: 只能用在组件函数的最顶层"></a>9. hook: 只能用在组件函数的最顶层</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 最简单的hook：useState</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">let</span> msg = <span class="hljs-string">&quot;good&quot;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App5</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [msg, setMsg] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment">// const fn = () =&gt; &#123;</span><br>    <span class="hljs-comment">//     setMsg(&#x27;changed&#x27;)</span><br>    <span class="hljs-comment">// &#125;</span><br><br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">fn</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">setMsg</span>(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;msg&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;fn&#125;</span>&gt;</span>修改1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setMsg(0)&#125;&gt;修改2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setMsg(msg + 1)&#125;&gt;累加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-数据请求、检测数据更新、垃圾回收的实现：useEffect"><a href="#10-数据请求、检测数据更新、垃圾回收的实现：useEffect" class="headerlink" title="10. 数据请求、检测数据更新、垃圾回收的实现：useEffect"></a>10. 数据请求、检测数据更新、垃圾回收的实现：useEffect</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> &#123; useState, useEffect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App6</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">const</span> [num1, setNum1] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">const</span> [num2, setNum2] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment">// 模拟mounted，一般在这个位置写ajax：数据请求，也可以检测数据更新</span><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;mounted&#x27;</span>)<br>    &#125;)<br><br>    <span class="hljs-comment">// 检测特定数据更新，写在数组中，不写的话默认检测所有变量更新</span><br>    <span class="hljs-comment">// 不想检测可以给空数组</span><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;num1更新了&#x27;</span>)<br>    &#125;, [num1])<br><br>    <span class="hljs-comment">// 模拟beforeDestory，一般在这个阶段处理脏数据和垃圾回收</span><br>    <span class="hljs-title function_">useEffect</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;destory&#x27;</span>)<br>        &#125;<br>    &#125;)<br><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>数字1为：&#123;num1&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setNum1(num1 + 1)&#125;&gt;累加1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>数字2为：&#123;num2&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setNum2(num2 + 1)&#125;&gt;累加2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-组件间传参"><a href="#11-组件间传参" class="headerlink" title="11. 组件间传参"></a>11. 组件间传参</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-comment">// 父传子：使用props</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>子组件 - &#123;props.num&#125; - <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> props.setNum(333)&#125;&gt;修改值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-comment">// 父组件</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Father</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">num</span>=<span class="hljs-string">&#123;props.num&#125;</span> <span class="hljs-attr">setNum</span>=<span class="hljs-string">&#123;props.setNum&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br>&#125;<br><br><span class="hljs-comment">// 顶级组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App7</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [num, setNum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">123</span>)<br>    <span class="hljs-comment">// 提供给子组件用来修改num的函数</span><br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Father</span> <span class="hljs-attr">num</span>=<span class="hljs-string">&#123;num&#125;</span> <span class="hljs-attr">setNum</span>=<span class="hljs-string">&#123;setNum&#125;</span> /&gt;</span></span><br>&#125;<br><br><span class="hljs-comment">// 子传父，真正在干活的是父组件: 提供用于修改的函数</span><br></code></pre></td></tr></table></figure><h3 id="12-多级组件的传值一般会使用上下文空间"><a href="#12-多级组件的传值一般会使用上下文空间" class="headerlink" title="12. 多级组件的传值一般会使用上下文空间"></a>12. 多级组件的传值一般会使用上下文空间</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, createContext, useContext &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-comment">// 创建上下文空间（提供者、消费者）（provider, consumer）</span><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">NumContext</span> = <span class="hljs-title function_">createContext</span>()<br><br><span class="hljs-comment">// 父传子：使用props</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Child</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; num, setNum &#125; = <span class="hljs-title function_">useContext</span>(<span class="hljs-title class_">NumContext</span>)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setNum(876)&#125;&gt;修改num<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br><br><span class="hljs-comment">//父组件</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">Father</span> = (<span class="hljs-params"></span>) =&gt; <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><br><span class="hljs-comment">// 顶级组件</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App9</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [num, setNum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">123</span>)<br>    <span class="hljs-comment">// 提供给子组件用来修改num的函数</span><br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">NumContext.Provider</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;&#123;</span> <span class="hljs-attr">num</span>, <span class="hljs-attr">setNum</span> &#125;&#125;&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Father</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">NumContext.Provider</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="13-受控组件和不受控组件，只存在于表单元素，受控组件就是表单元素的value需要state（或useSate）定义"><a href="#13-受控组件和不受控组件，只存在于表单元素，受控组件就是表单元素的value需要state（或useSate）定义" class="headerlink" title="13. 受控组件和不受控组件，只存在于表单元素，受控组件就是表单元素的value需要state（或useSate）定义"></a>13. 受控组件和不受控组件，只存在于表单元素，受控组件就是表单元素的value需要state（或useSate）定义</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App10</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [value, setValue] = <span class="hljs-title function_">useState</span>(<span class="hljs-string">&#x27;asd&#x27;</span>)<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">inputChange</span> = (<span class="hljs-params">e</span>) =&gt; &#123;<br>        <span class="hljs-title function_">setValue</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span>)<br>    &#125;<br>    <span class="hljs-keyword">const</span> <span class="hljs-title function_">clickFn</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;value&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;inputChange&#125;</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;clickFn&#125;</span>&gt;</span>获取输入框的值<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125; <br><br><span class="hljs-comment">// 不受控组件：值不会被value和onChange影响</span><br><span class="hljs-comment">// 意味着表单元素的value无法通过state获取，只能使用ref（或useRef）获取</span><br></code></pre></td></tr></table></figure><h3 id="14-使用memo使父组件更新不影响子组件"><a href="#14-使用memo使父组件更新不影响子组件" class="headerlink" title="14. 使用memo使父组件更新不影响子组件"></a>14. 使用memo使父组件更新不影响子组件</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, memo &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>)<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>child<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App11</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [num, setNum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>数字为：&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> setNum(num + 1)&#125;&gt;</span><br><span class="language-xml">                累加</span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Child</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>但是memo只有在子组件是纯静态的时候才有效，<br>不是纯静态时，可以使用useCallBack<br>memo可以配合useCallback使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span>, &#123; useState, memo, useCallback &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Child</span> = <span class="hljs-title function_">memo</span>(<span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>)<br>    <span class="hljs-keyword">return</span> <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> props.doSth()&#125;&gt;累加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>&#125;)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App11</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [num, setNum] = <span class="hljs-title function_">useState</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">// setNum(newValue) 使用新值强行覆盖初始值</span><br>    <span class="hljs-comment">// serNum(num =&gt; num+1) 不断使用新值覆盖旧值</span><br>    <span class="hljs-keyword">const</span> doSth = <span class="hljs-title function_">useCallback</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">setNum</span>(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> num + <span class="hljs-number">1</span>)<br>    &#125;, [])<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>数字为：&#123;num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Child</span> <span class="hljs-attr">doSth</span>=<span class="hljs-string">&#123;doSth&#125;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Child</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><br>也可以使用useMemo<br>    <span class="hljs-comment">// 函数中返回函数：高阶函数</span><br>    <span class="hljs-keyword">const</span> doSth = <span class="hljs-title function_">useMemo</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">setNum</span>(<span class="hljs-function"><span class="hljs-params">num</span> =&gt;</span> num + <span class="hljs-number">1</span>)<br>    &#125;, [])<br></code></pre></td></tr></table></figure><h3 id="15-React-Redux：javascript状态容器，提供可预测化的状态管理"><a href="#15-React-Redux：javascript状态容器，提供可预测化的状态管理" class="headerlink" title="15. React Redux：javascript状态容器，提供可预测化的状态管理"></a>15. React Redux：javascript状态容器，提供可预测化的状态管理</h3><p>在src下创建index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 仓库的入口文件，写好后基本不变</span><br><br><span class="hljs-comment">// 引入reducer</span><br><br><span class="hljs-keyword">import</span> reducer <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./reducer&#x27;</span><br><br><span class="hljs-keyword">import</span> &#123; createStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;redux&#x27;</span><br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(reducer)<br><br><span class="hljs-comment">// 导出仓库</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store;<br></code></pre></td></tr></table></figure><p>再创建reducer.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建初始状态，并导出一个函数</span><br><br><span class="hljs-keyword">const</span> defaultSate = &#123;<br>    <span class="hljs-attr">num</span>: <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">reducerState</span> = (<span class="hljs-params">state = defaultSate, action</span>) =&gt; &#123;<br>    <span class="hljs-comment">// 不能直接对state进行修改，加一层深拷贝</span><br>    <span class="hljs-keyword">let</span> newState = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(state))<br>    <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;addNum&quot;</span>:<br>            newState.<span class="hljs-property">num</span> += action.<span class="hljs-property">value</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-attr">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> newState;<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> reducerState<br></code></pre></td></tr></table></figure><p>新建组件</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; connect &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">App13</span>(<span class="hljs-params">props</span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>数字为：&#123;props.num&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;()</span> =&gt;</span> props.addN()&#125;&gt;累加<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br><span class="hljs-comment">// 状态映射：将reducer中的state映射成props</span><br><span class="hljs-comment">// 让开发者可以在组件中使用props.num去调用state中的num</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapStateToProps</span> = (<span class="hljs-params">state</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">num</span>: state.<span class="hljs-property">num</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mapDispatchToProps</span> = (<span class="hljs-params">dispatch</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-title function_">addN</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">const</span> action = &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;addNum&quot;</span>, value : <span class="hljs-number">2</span> &#125;<br>            <span class="hljs-title function_">dispatch</span>(action)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 事件派发映射：将reducer中的事件映射成props，让开发者可以在组件中使用方法</span><br><span class="hljs-comment">// export default connect(state映射, dispatch映射)(当前组件名称)</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">connect</span>(mapStateToProps, mapDispatchToProps)(<span class="hljs-title class_">App13</span>)<br></code></pre></td></tr></table></figure><h3 id="16-路由"><a href="#16-路由" class="headerlink" title="16. 路由"></a>16. 路由</h3><p>入口文件：src&#x2F;index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// door file</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ReactDOM</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;react-dom&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Router</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Provider</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-redux&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./store&#x27;</span><br><br><span class="hljs-title class_">ReactDOM</span>.<span class="hljs-title function_">render</span>(<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Router</span> /&gt;</span></span>,<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;root&#x27;</span>)<br>)<span class="hljs-string">``</span><span class="hljs-string">`</span><br><span class="hljs-string"></span><br><span class="hljs-string">App14.jsx</span><br><span class="hljs-string">`</span><span class="hljs-string">``</span>jsx<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Outlet</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App14</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>App14<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Outlet</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>路由文件：新建src&#x2F;router&#x2F;index.jsx</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// 基本思路：App &gt; Home + List + Detail</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../App14&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">List</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/List&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Detail</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../pages/Detail&#x27;</span><br><br><span class="hljs-comment">// BrowserRouter（history模式）不带#需要配置，HashRouter（Hash模式）带#打包后即可</span><br><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">BrowserRouter</span>, <span class="hljs-title class_">Routes</span>, <span class="hljs-title class_">Route</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-comment">// 定义一个路由</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">BaseRouter</span> = (<span class="hljs-params"></span>) =&gt; (<br>    <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">App</span> /&gt;</span>&#125;&gt;</span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/home&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Home</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/list&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">List</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">Route</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/detail&quot;</span> <span class="hljs-attr">element</span>=<span class="hljs-string">&#123;</span>&lt;<span class="hljs-attr">Detail</span> /&gt;</span>&#125;&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">Route</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">Routes</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">BrowserRouter</span>&gt;</span></span><br>)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">BaseRouter</span>;<br></code></pre></td></tr></table></figure><p>点击跳转：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Outlet</span>, <span class="hljs-title class_">Link</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">App14</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/list&quot;</span>&gt;</span>列表页<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/detail&quot;</span>&gt;</span>详情页<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">Outlet</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">Outlet</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>也可以写成方法给button使用</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">const</span> <span class="hljs-title function_">goDetail</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>    <span class="hljs-comment">// 跳转详情页</span><br>    <span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;/detail&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>携带参数：<br>斜杠也可以传参<br>在List.jsx中：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> &#123; useParams &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react-router-dom&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">List</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> &#123; id &#125; = <span class="hljs-title function_">useParams</span>()<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>列表页 - &#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>路由文件中：<code>&lt;Route path=&quot;/list/:id&quot; element=&#123;&lt;List /&gt;&#125;&gt;&lt;/Route&gt;</code><br>传参时：<code>&lt;li&gt;&lt;Link to=&quot;/list/123&quot;&gt;列表页&lt;/Link&gt;&lt;/li&gt;</code></p><p>另一种：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Home</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">const</span> [searchParams, setSearchParams] = <span class="hljs-title function_">useSearchParams</span>()<br>    <span class="hljs-keyword">let</span> id = searchParams.<span class="hljs-title function_">getAll</span>(<span class="hljs-string">&#x27;id&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> (<br><br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>主页 - &#123;id&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>传参时：<code>&lt;li&gt;&lt;Link to=&quot;/home?id=456&quot;&gt;首页&lt;/Link&gt; &lt;/li&gt;</code></p><p>以上携带的数据有限，当想要携带大量数据时，比较麻烦，可以↓</p><pre><code class="hljs">const goDetail = () =&gt; &#123;    // 跳转详情页    navigate(&#39;/detail&#39;, &#123;        state: &#123; username: &#39;azure&#39; &#125;    &#125;)&#125;&lt;button onClick=&#123;goDetail&#125;&gt;跳转详情页&lt;/button&gt;</code></pre><p>在子组件定义<code>let location = useLocation()</code>来接收<br>展示：<code>&lt;div&gt;&lt;h2&gt;详情页 -- &#123;location.state ? location.state.username : &#39;&#39;&#125;&lt;/h2&gt;&lt;/div&gt;</code></p><h3 id="17-给404"><a href="#17-给404" class="headerlink" title="17. 给404"></a>17. 给404</h3><p>界面写法：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">import</span> <span class="hljs-title class_">React</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;react&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ErrorImg</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../assets/404.jpg&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Error</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> (<br>        <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">            <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/Users/azure/Desktop/ABC/react/&#123;ErrorImg&#125;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;404&quot;</span> /&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    )<br>&#125;<br></code></pre></td></tr></table></figure><p>路由页：<br><code>&lt;Route path=&quot;*&quot; element=&#123;&lt;Error /&gt;&#125;&gt;&lt;/Route&gt;</code></p><blockquote><p>Ref: </p><p>react 官方网站：<a href="https://react.docschina.org/">https://react.docschina.org</a></p><p>私人教程：<a href="http://codesohigh.com/subject/reactnew/">http://codesohigh.com/subject/reactnew/</a></p><p>react-redux：<a href="https://react-redux.js.org/">https://react-redux.js.org/</a></p><p>reactrouter：<a href="https://reactrouter.com/en/main">https://reactrouter.com/en/main</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
